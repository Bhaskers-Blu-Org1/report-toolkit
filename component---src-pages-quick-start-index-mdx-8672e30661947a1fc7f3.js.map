{"version":3,"sources":["webpack:///./src/pages/quick-start/index.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","Row","Column","Aside","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","prop","href","parentName","colMd","colLg","offsetMd","offsetLg","kind","download","language","isMDXComponent","PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","subDirectory","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","Title","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn"],"mappings":"gdAQO,IAAMA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAkBL,EAAc,mBAChCM,EAAcN,EAAc,eAC5BO,EAAaP,EAAc,cAC3BQ,EAAMR,EAAc,OACpBS,EAAST,EAAc,UACvBU,EAAQV,EAAc,SACtBW,EAAqBX,EAAc,sBACnCY,EAAc,CAClBb,gBAEIc,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGd,E,oIACF,mBACD,OAAO,YAACW,EAAD,KAAeD,EAAiBV,EAAhC,CAAuCc,WAAYA,EAAYC,QAAQ,cAI5E,YAACZ,EAAD,CAAiBY,QAAQ,mBACvB,6EAA4D,YAAC,IAAD,CAAUC,KAAK,cAAcD,QAAQ,aAAjG,oBACA,0EAAyD,iBAAGE,KAAK,YAAR,WAA+B,YAAC,IAAD,CAAUD,KAAK,cAAcD,QAAQ,cAA7H,qBAEF,YAACX,EAAD,CAAaW,QAAQ,eACvB,YAACV,EAAD,CAAYU,QAAQ,cAApB,WACA,YAACV,EAAD,CAAYU,QAAQ,cAApB,gCACA,YAACV,EAAD,CAAYU,QAAQ,cAApB,gCACA,YAACV,EAAD,CAAYU,QAAQ,cAApB,uBACA,YAACV,EAAD,CAAYU,QAAQ,cAApB,mCACA,YAACV,EAAD,CAAYU,QAAQ,cAApB,yBACA,YAACV,EAAD,CAAYU,QAAQ,cAApB,oBAEE,iBAAQ,CACN,GAAM,WADR,WAGA,+CAA8B,YAAC,IAAD,CAAUC,KAAK,cAAcD,QAAQ,aAAnE,0BACA,iBAAQ,CACN,GAAM,sCADR,0CAGA,wDAAuC,kBAAIG,WAAW,KAAf,wDAAvC,SAAiI,mBAAGA,WAAW,KAAQ,CACnJ,KAAQ,uCADqH,sBAAjI,4EAGA,gEACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,gBAApB,6BAAmG,mBAAGA,WAAW,MAAS,CACtH,KAAQ,uBADuF,eAGnG,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,SAApB,KAAoE,mBAAGA,WAAW,MAAS,CACvF,KAAQ,oBADwD,YAApE,KAE2B,0BAAYA,WAAW,MAAvB,qBAF3B,KAGA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,SAApB,KAAoE,mBAAGA,WAAW,MAAS,CACvF,KAAQ,gDADwD,oCAGpE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,WAApB,KAAsE,mBAAGA,WAAW,MAAS,CACzF,KAAQ,4BAD0D,eAGtE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,eAApB,4BAAiG,mBAAGA,WAAW,MAAS,CACpH,KAAQ,kCADqF,SAInG,iBAAQ,CACN,GAAM,wBADR,wBAGA,YAACZ,EAAD,CAAKS,QAAQ,OACX,YAACR,EAAD,CAAQY,MAAO,EAAGC,MAAO,EAAGL,QAAQ,UAClC,8EAA6D,mBAAGG,WAAW,KAAQ,CAC/E,KAAQ,8CACP,0BAAYA,WAAW,KAAvB,QAFL,oDAGA,oEAAmD,YAAC,IAAD,CAAUF,KAAK,cAAcD,QAAQ,aAAxF,IAA0G,kBAAIG,WAAW,KAAf,YAA1G,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6CAKP,YAACX,EAAD,CAAQY,MAAO,EAAGC,MAAO,EAAGC,SAAU,EAAGC,SAAU,EAAGP,QAAQ,UAClE,YAACP,EAAD,CAAOO,QAAQ,SACP,2CAA0B,mBAAGG,WAAW,KAAQ,CAC5C,KAAQ,wEADc,gCAA1B,8CAMN,iBAAQ,CACN,GAAM,gCADR,gCAGA,oDAAmC,YAAC,IAAD,CAAUF,KAAK,cAAcD,QAAQ,aAAxE,4CACA,YAACN,EAAD,CAAoBc,KAAK,OAAOR,QAAQ,sBACtC,mHACS,mBAAGG,WAAW,KAAQ,CAC3B,KAAQ,kCADH,gBADT,MAKF,uIAAsH,0BAAYA,WAAW,KAAvB,QAAtH,gBAAuL,0BAAYA,WAAW,KAAvB,yBAAvL,KACA,wGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qGAIL,yCACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,wLAIL,uDAAsC,0BAAYA,WAAW,KAAvB,QAAtC,cACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,yBAApB,6CACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,iCAApB,wEACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,yCAApB,kBAAyH,0BAAYA,WAAW,MAAvB,OAAzH,oFAA8P,mBAAGA,WAAW,MAAS,CACjR,KAAQ,wFADkP,gCAA9P,0CAIF,6CAAwB,YAAC,IAAD,CAAUF,KAAK,cAAcD,QAAQ,aAA7D,2DACA,iBAAQ,CACN,GAAM,gCADR,gCAGA,6BAAY,0BAAYG,WAAW,KAAvB,eAAZ,oCAAwG,0BAAYA,WAAW,KAAvB,OAAxG,OAA+J,0BAAYA,WAAW,KAAvB,QAA/J,sDAAsQ,0BAAYA,WAAW,KAAvB,wBAAtQ,cACA,qBAAG,0BAAYA,WAAW,KAAvB,wBAAH,8OAAkT,kBAAIA,WAAW,KAAf,WAAlT,KACA,kEAAiD,0BAAYA,WAAW,KAAvB,eAAjD,wIAAiP,YAAC,IAAD,CAAUF,KAAK,cAAcD,QAAQ,aAAtR,mBACA,4BAAW,YAAC,IAAD,CAAUC,KAAK,cAAcD,QAAQ,aAAhD,2CAAyG,YAAC,IAAD,CAAUC,KAAK,aAAaD,QAAQ,aAA7I,KACA,iCAAgB,YAAC,IAAD,CAAUC,KAAK,cAAcD,QAAQ,aAArD,gCACA,uBAAK,sBAAMG,WAAW,OAAU,CAC5B,UAAa,kBADZ,iBAIL,wCACA,YAAC,IAAD,CAAWnB,KAAK,aAAagB,QAAQ,cACrC,+BAAc,YAAC,IAAD,CAAUC,KAAK,aAAaD,QAAQ,aAAlD,aAA6E,kBAAIG,WAAW,KAAf,YAA7E,4BAA8I,0BAAYA,WAAW,KAAvB,UAA9I,KACA,wCAAuB,0BAAYA,WAAW,KAAvB,UAAvB,qCAA+G,0BAAYA,WAAW,KAAvB,UAA/G,2CAA6M,0BAAYA,WAAW,KAAvB,YAA7M,wGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,2DAIL,YAACZ,EAAD,CAAKS,QAAQ,OACX,YAACR,EAAD,CAAQY,MAAO,EAAGC,MAAO,EAAGL,QAAQ,UAClC,kCAAiB,0BAAYG,WAAW,KAAvB,wBAAjB,6DAA+I,0BAAYA,WAAW,KAAvB,wBAA/I,+CAA+P,0BAAYA,WAAW,KAAvB,cAA/P,aAAmU,YAAC,IAAD,CAAUF,KAAK,cAAcD,QAAQ,aAAxW,oBACA,0CAAyB,kBAAIG,WAAW,KAAf,WAAzB,SAAsE,0BAAYA,WAAW,KAAvB,wBAAtE,MAEF,YAACX,EAAD,CAAQY,MAAO,EAAGC,MAAO,EAAGC,SAAU,EAAGC,SAAU,EAAGP,QAAQ,UAClE,YAACP,EAAD,CAAOO,QAAQ,SACP,2BAAU,YAAC,IAAD,CAAUC,KAAK,cAAcD,QAAQ,aAA/C,IAAiE,kBAAIG,WAAW,KAAf,UAAjE,uGAA2M,mBAAGA,WAAW,KAAQ,CAC7N,KAAQ,wCAD+L,uBAA3M,6BAMN,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBACb,WAAc,4BACd,KAAQ,yBAHP,8NAaL,0DAAyC,0BAAYA,WAAW,KAAvB,eAAzC,KAAsG,0BAAYA,WAAW,KAAvB,wBAAtG,kDACA,yCAAwB,YAAC,IAAD,CAAUF,KAAK,cAAcD,QAAQ,aAA7D,OAAkF,kBAAIG,WAAW,KAAf,4BAAlF,aAAoJ,kBAAIA,WAAW,KAAf,UAApJ,yBAAgN,kBAAIA,WAAW,KAAf,OAAhN,+EAA+T,mBAAGA,WAAW,KAAQ,CACjV,KAAQ,8BADmT,aAA/T,0BAGA,6CAA4B,YAAC,IAAD,CAAUF,KAAK,aAAaD,QAAQ,aAAhE,4DAA0I,0BAAYG,WAAW,KAAvB,QAA1I,aACA,iBAAQ,CACN,GAAM,uBADR,uBAGA,kGAAiF,0BAAYA,WAAW,KAAvB,QAAjF,wCAA0K,kBAAIA,WAAW,KAAf,UAA1K,uDAAoQ,YAAC,IAAD,CAAUF,KAAK,cAAcD,QAAQ,aAAzS,cACA,wFACA,YAACN,EAAD,CAAoBM,QAAQ,sBAC1B,gDAA+B,mBAAGG,WAAW,KAAQ,CACjD,KAAQ,kCADmB,oBAA/B,oBAEkD,0BAAYA,WAAW,KAAvB,wBAFlD,uDAE0K,0BAAYA,WAAW,KAAvB,iBAF1K,mBAEuP,mBAAGA,WAAW,KAAQ,CACzQ,KAAQ,8BAD2O,8BAFvP,MAMF,iBAAQ,CACN,GAAM,2BADR,2BAGA,0DAAyC,0BAAYA,WAAW,KAAvB,iBAAzC,cACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6GAKL,oCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBACb,WAAc,YACd,KAAQ,SAHP,0LAQL,iBAAQ,CACN,GAAM,4BADR,4BAGA,oCAAmB,kBAAIA,WAAW,KAAf,UAAnB,4DAAkH,0BAAYA,WAAW,KAAvB,iBAAlH,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6GAKL,0CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBACb,WAAc,YACd,KAAQ,SAHP,0LAQL,YAACT,EAAD,CAAoBc,KAAK,UAAUR,QAAQ,sBAA3C,iGAIA,qEAAoD,0BAAYG,WAAW,KAAvB,QAApD,2DACA,iBAAQ,CACN,GAAM,kBADR,kBAGA,wDAAuC,kBAAIA,WAAW,KAAf,OAAvC,yGAAgL,mBAAGA,WAAW,KAAQ,CAClM,KAAQ,uCADoK,gBAAhL,KAGA,iCAAgB,YAAC,IAAD,CAAUF,KAAK,cAAcD,QAAQ,aAArD,+IACA,oDACA,uBAAK,sBAAMG,WAAW,OAAU,CAC5B,UAAa,kBADZ,2CAIL,8FACA,YAAC,IAAD,CAAWnB,KAAK,cAAcgB,QAAQ,cACtC,oCAAmB,YAAC,IAAD,CAAUC,KAAK,aAAaD,QAAQ,aAAvD,6EACA,0FACA,sBACE,kBAAIG,WAAW,MAAK,sBAAQA,WAAW,MAAnB,MAApB,iBAA6E,kBAAIA,WAAW,MAAf,QAA7E,6CAA4J,kBAAIA,WAAW,MAAf,iBAA5J,gBAAuN,0BAAYA,WAAW,MAAvB,KAAvN,oGAA0W,0BAAYA,WAAW,MAAvB,KAA1W,qFAA8e,0BAAYA,WAAW,MAAvB,KAA9e,6EACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,QAApB,8JAA4N,0BAAYA,WAAW,MAAvB,MAA5N,iCAA6S,kBAAIA,WAAW,MAAf,SAA7S,KAAqV,0BAAYA,WAAW,MAAvB,yBAArV,qCAA6b,0BAAYA,WAAW,MAAvB,eAA7b,qBAA2gB,0BAAYA,WAAW,MAAvB,UAA3gB,UACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,iBAApB,kBAAyF,sBAAQA,WAAW,MAAnB,QAAzF,OAA0I,0BAAYA,WAAW,MAAvB,iBAA1I,kBACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,iBAApB,gCAAuG,sBAAQA,WAAW,MAAnB,QAAvG,OAAwJ,0BAAYA,WAAW,MAAvB,iBAAxJ,mBAEF,uDAAsC,0BAAYA,WAAW,KAAvB,sBAAtC,mMAAwS,0BAAYA,WAAW,KAAvB,oBAAxS,+BAAoY,kBAAIA,WAAW,KAAf,WAApY,0BACA,YAACZ,EAAD,CAAKS,QAAQ,OACX,YAACR,EAAD,CAAQY,MAAO,EAAGC,MAAO,EAAGL,QAAQ,UAClC,0DAAyC,0BAAYG,WAAW,KAAvB,QAAzC,8BAAwH,kBAAIA,WAAW,KAAf,QAAxH,6BACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAApB,yBAAiG,kBAAIA,WAAW,MAC5G,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,aACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,kBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,uBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAExB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,yBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,eACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,oBAGxB,YAACX,EAAD,CAAQY,MAAO,EAAGC,MAAO,EAAGC,SAAU,EAAGC,SAAU,EAAGP,QAAQ,UAClE,YAACP,EAAD,CAAOO,QAAQ,SACP,yFAAwE,0BAAYG,WAAW,KAAvB,oBAAxE,WAAgJ,0BAAYA,WAAW,KAAvB,oBAAhJ,sBAAmO,0BAAYA,WAAW,KAAvB,SAAnO,gCAAqT,mBAAGA,WAAW,KAAQ,CACvU,KAAQ,KADyS,aAArT,sCAMN,4CAA2B,YAAC,IAAD,CAAUF,KAAK,cAAcD,QAAQ,aAAhE,kCAAgH,0BAAYG,WAAW,KAAvB,WAAhH,aACA,iBAAQ,CACN,GAAM,mCADR,mCAGA,gEAA+C,0BAAYA,WAAW,KAAvB,QAA/C,kJACA,sEAAqD,YAAC,IAAD,CAAUF,KAAK,cAAcD,QAAQ,aAA1F,iEAAyK,kBAAIG,WAAW,KAAf,aAAzK,+DACA,mDAAkC,YAAC,IAAD,CAAUF,KAAK,cAAcD,QAAQ,aAAvE,qBAA0G,kBAAIG,WAAW,KAAf,SAA1G,8HAA0Q,mBAAGA,WAAW,KAAQ,CAC5R,KAAQ,sBAD8P,UAA1Q,2DAE+E,YAAC,IAAD,CAAUF,KAAK,cAAcD,QAAQ,aAFpH,8DAGA,gHACA,uBAAK,sBAAMG,WAAW,OAAU,CAC5B,UAAa,kBADZ,gCAIL,iEAAgD,kBAAIA,WAAW,KAAf,aAAhD,6BAAmH,YAAC,IAAD,CAAUF,KAAK,aAAaD,QAAQ,aAAvJ,+CACA,6BAAY,kBAAIG,WAAW,KAAf,WAAZ,wCAAwF,kBAAIA,WAAW,KAAf,YAAxF,kEACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,YACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAEtB,gDAA+B,YAAC,IAAD,CAAUF,KAAK,aAAaD,QAAQ,aAAnE,uDAAwI,kBAAIG,WAAW,KAAf,SAAxI,KACA,oGAAmF,0BAAYA,WAAW,KAAvB,QAAnF,2BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,gDAIL,mDAAkC,kBAAIA,WAAW,KAAf,aAAlC,8BACA,YAAC,IAAD,CAAWnB,KAAK,mBAAmBgB,QAAQ,cAC3C,sDAAqC,0BAAYG,WAAW,KAAvB,aAArC,QAAmG,0BAAYA,WAAW,KAAvB,gBAAnG,oKACA,qHAAoG,0BAAYA,WAAW,KAAvB,QAApG,wCAA6L,0BAAYA,WAAW,KAAvB,SAA7L,KACA,YAACT,EAAD,CAAoBM,QAAQ,sBAC1B,qDAAoC,0BAAYG,WAAW,KAAvB,SAApC,sCAA4H,YAAC,IAAD,CAAUF,KAAK,aAAaD,QAAQ,aAAhK,kDAEF,gJAA+H,kBAAIG,WAAW,KAAf,UAA/H,sBAAwL,iBAAGD,KAAK,0CAA0CO,UAAQ,GAA1D,YAAwE,qEAAhQ,6BAAiW,0BAAYN,WAAW,KAAvB,WAAjW,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qDAIL,oDAAmC,kBAAIA,WAAW,KAAf,YAAnC,YAAoF,0BAAYA,WAAW,KAAvB,mBAApF,kCACA,YAAC,IAAD,CAAWnB,KAAK,mBAAmBgB,QAAQ,cAC3C,2BAAU,0BAAYG,WAAW,KAAvB,sCAAV,4CAAqI,kBAAIA,WAAW,KAAf,QAArI,mEACA,qRACA,YAACT,EAAD,CAAoBM,QAAQ,sBAC1B,sHAAqG,mBAAGG,WAAW,KAAQ,CACvH,KAAQ,KADyF,uBAArG,8BAE+D,kBAAIA,WAAW,KAAf,OAF/D,0BAEyH,mBAAGA,WAAW,KAAQ,CAC3I,KAAQ,KAD6G,4BAFzH,MAMF,+CAA8B,YAAC,IAAD,CAAUF,KAAK,aAAaD,QAAQ,aAAlE,MAAsF,0BAAYG,WAAW,KAAvB,aAAtF,+DACA,iBAAQ,CACN,GAAM,yBADR,yBAGA,4BAAW,0BAAYA,WAAW,KAAvB,aAAX,gCAAiG,kBAAIA,WAAW,KAAf,eAAjG,2CACA,yEACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,OAApB,4BACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAApB,qCACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,2CACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,gHACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,uCAAgH,kBAAIA,WAAW,MAAf,WAAhH,6BACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAApB,qBACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,sGACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,SAApB,mCAA0G,0BAAYA,WAAW,MAAvB,QAA1G,QAAoK,0BAAYA,WAAW,MAAvB,WAApK,4BAEF,mCAAkB,kBAAIA,WAAW,KAAf,MAAlB,6EAA8H,mBAAGA,WAAW,KAAQ,CAChJ,KAAQ,4BACP,0BAAYA,WAAW,KAAvB,WAFL,QAEoE,mBAAGA,WAAW,KAAQ,CACtF,KAAQ,gCACP,0BAAYA,WAAW,KAAvB,eAJL,KAKA,iBAAQ,CACN,GAAM,0BADR,OAEW,0BAAYA,WAAW,MAAvB,UAFX,gBAGA,4BAAW,0BAAYA,WAAW,KAAvB,UAAX,iJACA,+DAA8C,kBAAIA,WAAW,KAAf,QAA9C,mBAAkG,0BAAYA,WAAW,KAAvB,QAAlG,8CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0FAKL,8FAA6E,0BAAYA,WAAW,KAAvB,QAA7E,sCACA,YAAC,IAAD,CAAWnB,KAAK,qBAAqB0B,SAAS,OAAOV,QAAQ,cAC7D,sCAAqB,0BAAYG,WAAW,KAAvB,aAArB,4DAAuI,0BAAYA,WAAW,KAAvB,wBAAvI,QAAgN,0BAAYA,WAAW,KAAvB,iBAAhN,gBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,yGAKL,uDAAsC,0BAAYA,WAAW,KAAvB,aAAtC,QAAoG,0BAAYA,WAAW,KAAvB,aAApG,qCACA,gEAA+C,0BAAYA,WAAW,KAAvB,cAA/C,KACA,iBAAQ,CACN,GAAM,8BADR,OAEW,0BAAYA,WAAW,MAAvB,cAFX,gBAGA,yFAAwE,kBAAIA,WAAW,KAAf,WAAxE,wEACA,qBAAG,0BAAYA,WAAW,KAAvB,QAAH,qIAAyL,0BAAYA,WAAW,KAAvB,WAAzL,0BAAuQ,0BAAYA,WAAW,KAAvB,cAAvQ,oGACA,yDAAwC,0BAAYA,WAAW,KAAvB,QAAxC,qGAA8L,0BAAYA,WAAW,KAAvB,UAA9L,MACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,uIAKL,4CAA2B,0BAAYA,WAAW,KAAvB,cAA3B,mBAAqG,0BAAYA,WAAW,KAAvB,iBAArG,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,gDAIL,gEACA,YAAC,IAAD,CAAWnB,KAAK,qBAAqB0B,SAAS,OAAOV,QAAQ,cAC7D,6EAA4D,0BAAYG,WAAW,KAAvB,iBAA5D,MACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,uIAKL,iDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,gDAIL,sCAAqB,kBAAIA,WAAW,KAAf,QAArB,0BAAgF,0BAAYA,WAAW,KAAvB,iBAAhF,2CAAqL,0BAAYA,WAAW,KAAvB,YAArL,YACA,YAAC,IAAD,CAAWnB,KAAK,qBAAqB0B,SAAS,OAAOV,QAAQ,cAC7D,4BAAW,kBAAIG,WAAW,KAAf,OAAX,iCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6IAKL,6BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,gDAIL,oCACA,YAAC,IAAD,CAAWnB,KAAK,qBAAqB0B,SAAS,OAAOV,QAAQ,cAC7D,6CAA4B,0BAAYG,WAAW,KAAvB,QAA5B,iFACA,YAACT,EAAD,CAAoBM,QAAQ,sBAC1B,gEAA+C,0BAAYG,WAAW,KAAvB,aAA/C,sCAA2I,kBAAIA,WAAW,KAAf,iBAA3I,4BAAiN,0BAAYA,WAAW,KAAvB,QAAjN,OAAyQ,0BAAYA,WAAW,KAAvB,WAAzQ,aAA0U,0BAAYA,WAAW,KAAvB,kBAA1U,mEAAwc,0BAAYA,WAAW,KAAvB,WAAxc,6CAAyiB,mBAAGA,WAAW,KAAQ,CAC3jB,KAAQ,KAD6hB,aAAziB,kBAIF,iBAAQ,CACN,GAAM,cADR,cAGA,0CAAyB,YAAC,IAAD,CAAUF,KAAK,cAAcD,QAAQ,aAA9D,gDAA4H,YAAC,IAAD,CAAUC,KAAK,cAAcD,QAAQ,aAAjK,QACA,sBACE,kBAAIG,WAAW,MAAf,2CACA,kBAAIA,WAAW,MAAf,+BACA,kBAAIA,WAAW,MAAf,oDACA,kBAAIA,WAAW,MAAf,oDAEF,4BAAW,mBAAGA,WAAW,KAAQ,CAC7B,KAAQ,qBADD,SAAX,oEAGA,iBAAQ,CACN,GAAM,mBADR,mBAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,6BADQ,qCAQ1BL,EAAWa,gBAAiB,G,wZCzbbC,ECGI,SAAC,GAAD,MAAGC,EAAH,EAAGA,MAAH,IAAUC,YAAV,MAAiB,GAAjB,SACjB,mBAAKC,UAAWC,IAAGC,cAAD,OAAgBC,YAAWJ,EAAKK,OAAhC,KAChB,mBAAKJ,UAAU,YACb,mBAAKA,UAAU,WACb,mBAAKA,UAAU,iBACb,kBAAIK,GAAG,aAAaL,UAAWM,QAC5BR,Q,kBCTES,ECIE,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,iBAA8BC,EAAqB,EAAjCC,WAGhBA,EAHiD,OAEnEC,KACEC,aAAgBF,WAHiD,EAkBnCD,GAAkBC,EAA5CG,EAlB6D,EAkB7DA,QAEF1B,EAAU0B,EAAN,eApB2D,EAkBpDC,aAEP,aAAqDN,EAE/D,OAAOK,EACL,mBAAKb,UAAS,WAAae,OACzB,mBAAKf,UAAU,WACb,iBAAGA,UAAWgB,OAAM7B,KAAMA,GAA1B,8BAKF,M,sCClCS8B,E,gLCkBbC,OAAA,WAAU,IAAD,EACgBC,KAAKjD,MAApB6B,EADD,EACCA,KAAMqB,EADP,EACOA,KACRC,EAAaD,EAChBE,MAAM,KACNC,OAAOC,SACPC,OAAO,GAAG,GAEPC,EAAW3B,EAAK4B,KAAI,SAAAC,GAAQ,IAAD,EACzBC,EAAeC,IAAQF,EAAK,CAAEG,OAAO,IACrCC,EAAWH,IAAiBR,EAC5BY,EAAkB,IAAIC,OAAUb,EAAd,SAClBlC,EAAOiC,EAAKe,QAAQF,EAAiBJ,GAC3C,OACE,kBAAIO,IAAKR,EAAK5B,UAAWC,KAAE,OAAIoC,gBAAeL,EAAnB,GAA+BM,aACxD,YAAC,OAAD,CAAMtC,UAAWgB,OAAMuB,GAAE,GAAKpD,GAC3ByC,OAMT,OACE,mBAAK5B,UAAWwC,iBACd,mBAAKxC,UAAU,YACb,mBAAKA,UAAU,WACb,mBAAKA,UAAU,mCACb,uBACE,kBAAIA,UAAWyC,QAAOf,S,GAjCAgB,IAAMC,W,SCmD7BC,IArDC,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAAY,EACJH,EAAlDI,mBADsD,MACxC,GADwC,EACpCzC,EAAgCqC,EAAhCrC,iBAAkB0C,EAAcL,EAAdK,UACpCnD,EAA8CkD,EAA9ClD,KAAMD,EAAwCmD,EAAxCnD,MAAOqD,EAAiCF,EAAjCE,MAAOC,EAA0BH,EAA1BG,YAAaC,EAAaJ,EAAbI,SAI/BC,EANoD,OAM5D3C,KAAQ2C,WAUJlC,EAAOkC,EACTP,EAASQ,SAASpB,QAAQmB,EAAY,IACtCP,EAASQ,SAOPlC,EAJCtB,EACEqB,EAAKE,MAAM,KAAKG,OAAO,GAAG,IAAMK,IAAQ/B,EAAK,GAAI,CAAEgC,OAAO,IAD/C,GAKpB,OACE,YAACyB,EAAA,EAAD,CACEC,UAAU,EACVN,MAAOA,EACPO,UAAW5D,EACX6D,gBAAiBP,EACjBQ,aAAcP,EACdH,UAAWA,GAEX,YAAC,EAAD,CAAYpD,MAAOkD,EAAQ,YAACA,EAAD,MAAYlD,EAAO+D,MAAM,QAAQ9D,KAAMA,IACjEA,GAAQ,YAAC,EAAD,CAAUqB,KAAMA,EAAMrB,KAAMA,EAAMsB,WAAYA,IACvD,YAACyC,EAAA,EAAD,CAAMC,QAAM,GACTjB,EACD,YAAC,EAAD,CAAUtC,iBAAkBA,KAE9B,YAACwD,EAAA,EAAD,CACEnB,YAAaA,EACbE,SAAUA,EACV3B,KAAMA,EACNrB,KAAMA,EACNsB,WAAYA,IAEd,YAAC4C,EAAA,EAAD","file":"component---src-pages-quick-start-index-mdx-8672e30661947a1fc7f3.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/boneskull/projects/boneskull/report-toolkit/packages/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nimport { Metadata, EmbedCode } from '../../components';\nimport { reportExample } from './index.module.scss';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst Row = makeShortcode(\"Row\");\nconst Column = makeShortcode(\"Column\");\nconst Aside = makeShortcode(\"Aside\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`This “quick start” guide will provide an overview of `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{`’s capabilities.`}</p>\n      <p>{`Use the links below to jump to a section, or just `}<a href=\"#install\">{`install `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" /></a>{` and get moving!`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Install</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Generate a Diagnostic Report</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Redact Secrets From a Report</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Compare Two Reports</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Detect Problems within a Report</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Transforming a Report</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Further Reading</AnchorLink>\n    </AnchorLinks>\n    <h2 {...{\n      \"id\": \"install\"\n    }}>{`Install`}</h2>\n    <p>{`Unsurprisingly, to use `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{`, you must install it.`}</p>\n    <h3 {...{\n      \"id\": \"prerequisite-nodejs-v1180-or-newer\"\n    }}>{`Prerequisite: Node.js v11.8.0 or newer`}</h3>\n    <p>{`For the purposes of this guide, `}<em parentName=\"p\">{`you must be running Node.js version v11.8.0 or newer`}</em>{`; the `}<a parentName=\"p\" {...{\n        \"href\": \"https://nodejs.org/api/report.html\"\n      }}>{`Diagnostic Reports`}</a>{` API referenced in this guide will reflect its state at version v11.8.0.`}</p>\n    <p>{`Here are some options for installation:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Recommended:`}</strong>{` An official package from `}<a parentName=\"li\" {...{\n          \"href\": \"https://nodejs.org\"\n        }}>{`nodejs.org`}</a></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`macOS`}</strong>{`: `}<a parentName=\"li\" {...{\n          \"href\": \"https://brew.sh\"\n        }}>{`Homebrew`}</a>{` (`}<inlineCode parentName=\"li\">{`brew install node`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Linux`}</strong>{`: `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/nodesource/distributions\"\n        }}>{`NodeSource Binary Distributions`}</a></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Windows`}</strong>{`: `}<a parentName=\"li\" {...{\n          \"href\": \"https://chocolatey.org/\"\n        }}>{`Chocolatey`}</a></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Linux/macOS`}</strong>{`: A version manager like `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/nvm-sh/nvm\"\n        }}>{`nvm`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"package-installation\"\n    }}>{`Package Installation`}</h3>\n    <Row mdxType=\"Row\">\n      <Column colMd={5} colLg={8} mdxType=\"Column\">\n        <p>{`Use your favorite Node.js package manager to install; `}<a parentName=\"p\" {...{\n            \"href\": \"https://docs.npmjs.com/cli-documentation/\"\n          }}><inlineCode parentName=\"a\">{`npm`}</inlineCode></a>{` comes packaged with most Node.js distributions.`}</p>\n        <p>{`For this guide, it’s recommended to install `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` `}<em parentName=\"p\">{`globally`}</em>{`:`}</p>\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`$ npm install report-toolkit --global\n`}</code></pre>\n      </Column>\n      <Column colMd={2} colLg={3} offsetMd={1} offsetLg={1} mdxType=\"Column\">\n  <Aside mdxType=\"Aside\">\n          <p>{`See npm’s guide on `}<a parentName=\"p\" {...{\n              \"href\": \"https://docs.npmjs.com/downloading-and-installing-packages-globally\"\n            }}>{`installing packages globally`}</a>{` for other options and troubleshooting.`}</p>\n  </Aside>\n      </Column>\n    </Row>\n    <h2 {...{\n      \"id\": \"generate-a-diagnostic-report\"\n    }}>{`Generate a Diagnostic Report`}</h2>\n    <p>{`To do much of anything with `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{`, you must generate a diagnostic report.`}</p>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`If you already have a diagnostic report file you intend to use, you can skip\nahead to the `}<a parentName=\"p\" {...{\n          \"href\": \"#redact-secrets-from-a-report\"\n        }}>{`next section`}</a>{`.`}</p>\n    </InlineNotification>\n    <p>{`At the time of this writing (2019-09-23), the diagnostic report functionality is “hidden” behind a flag to the `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` executable; `}<inlineCode parentName=\"p\">{`--experimental-report`}</inlineCode>{`.`}</p>\n    <p>{`The quickest way to generate a report is to evaluate an inline script, like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`node --experimental-report --report-filename report.json --eval \"process.report.writeReport()\"\n`}</code></pre>\n    <p>{`You’ll see this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Writing Node.js report to file: report.json\nNode.js report completed\n(node:18881) ExperimentalWarning: report is an experimental feature. This feature could change at any time\n`}</code></pre>\n    <p>{`Breaking down the arguments to `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{`, we have:`}</p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`--experimental-report`}</inlineCode>{`; enables diagnostic report functionality`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`--report-filename report.json`}</inlineCode>{`; whenever a diagnostic report is written to disk, use this filename`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`--eval \"process.report.writeReport()\"`}</inlineCode>{`; instead of a `}<inlineCode parentName=\"li\">{`.js`}</inlineCode>{` file, execute the double-quoted string as a script, then exit. The script calls `}<a parentName=\"li\" {...{\n          \"href\": \"https://nodejs.org/api/process.html#process_process_report_writereport_filename_err\"\n        }}>{`process.report.writeReport()`}</a>{`, which writes a report file to disk.`}</li>\n    </ol>\n    <p>Next, you'll see how <Metadata prop=\"packageName\" mdxType=\"Metadata\" /> enables safe storage and transmission of report files.</p>\n    <h2 {...{\n      \"id\": \"redact-secrets-from-a-report\"\n    }}>{`Redact Secrets From a Report`}</h2>\n    <p>{`Open `}<inlineCode parentName=\"p\">{`report.json`}</inlineCode>{` in your favorite editor (or use `}<inlineCode parentName=\"p\">{`cat`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`less`}</inlineCode>{` or whathaveyou). Scroll down to—or search for—the `}<inlineCode parentName=\"p\">{`environmentVariables`}</inlineCode>{` property.`}</p>\n    <p><inlineCode parentName=\"p\">{`environmentVariables`}</inlineCode>{` is a top-level property of a report file. It contains a complete dump of the environment at the time the report was created. You might notice API keys, cloud provider tokens, credentials, or other session identifiers; in other words, `}<em parentName=\"p\">{`secrets`}</em>{`.`}</p>\n    <p>{`Depending on your filesystem permissions, `}<inlineCode parentName=\"p\">{`report.json`}</inlineCode>{` might even be readable by other users who couldn’t otherwise see your environment. This is a potential leak, and we should plug it. `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` to the rescue!`}</p>\n    <p>{`The `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` package provides command-line utility, `}<Metadata prop=\"executable\" mdxType=\"Metadata\" />{`.`}</p>\n    <p>{`Assuming `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` is installed globally, run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`rtk --help\n`}</code></pre>\n    <p>{`You should see:`}</p>\n    <EmbedCode name=\"cli-output\" mdxType=\"EmbedCode\" />\n    <p>{`We see `}<Metadata prop=\"executable\" mdxType=\"Metadata\" />{` provides `}<em parentName=\"p\">{`commands`}</em>{`; the command we want is `}<inlineCode parentName=\"p\">{`redact`}</inlineCode>{`.`}</p>\n    <p>{`By default, the `}<inlineCode parentName=\"p\">{`redact`}</inlineCode>{` command will print its output to `}<inlineCode parentName=\"p\">{`STDOUT`}</inlineCode>{` (the terminal). Instead, let’s use the `}<inlineCode parentName=\"p\">{`--output`}</inlineCode>{` option to write to a new file (smarties may also ask their shell to redirect the output to a file):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`rtk redact --output report-redacted.json report.json\n`}</code></pre>\n    <Row mdxType=\"Row\">\n      <Column colMd={5} colLg={8} mdxType=\"Column\">\n        <p>{`Now, open `}<inlineCode parentName=\"p\">{`report-redacted.json`}</inlineCode>{` in your editor (or otherwise display it). Search for the `}<inlineCode parentName=\"p\">{`environmentVariables`}</inlineCode>{` property. Within this object, you will see `}<inlineCode parentName=\"p\">{`[REDACTED]`}</inlineCode>{` wherever `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` found a secret.`}</p>\n        <p>{`Here’s an example `}<em parentName=\"p\">{`excerpt`}</em>{` from `}<inlineCode parentName=\"p\">{`report-redacted.json`}</inlineCode>{`:`}</p>\n      </Column>\n      <Column colMd={2} colLg={3} offsetMd={1} offsetLg={1} mdxType=\"Column\">\n  <Aside mdxType=\"Aside\">\n          <p>{`If `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` `}<em parentName=\"p\">{`didn’t`}</em>{` catch all your secrets, fear not; you can customize its behavior to suit your environment. See the `}<a parentName=\"p\" {...{\n              \"href\": \"/report-toolkit/configuration-guide\"\n            }}>{`Configuration Guide`}</a>{` for more information.`}</p>\n  </Aside>\n      </Column>\n    </Row>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"path=report-redacted.json\",\n        \"path\": \"report-redacted.json\"\n      }}>{`{\n \"environmentVariables\": {\n    \"TERM_SESSION_ID\": \"[REDACTED]\",\n    \"SSH_AUTH_SOCK\": \"[REDACTED]\",\n    \"Apple_PubSub_Socket_Render\": \"[REDACTED]\",\n    \"COLORFGBG\": \"15;0\",\n    \"ITERM_PROFILE\": \"yoyodyne\"\n }\n`}</code></pre>\n    <p>{`If you wish, delete your original `}<inlineCode parentName=\"p\">{`report.json`}</inlineCode>{`; `}<inlineCode parentName=\"p\">{`report-redacted.json`}</inlineCode>{` is now safe to share or send across the wire.`}</p>\n    <p>{`A design goal of `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` is `}<em parentName=\"p\">{`strong security defaults`}</em>{`. It will `}<em parentName=\"p\">{`always`}</em>{` automatically redact `}<em parentName=\"p\">{`all`}</em>{` reports which it ingests. You can disable this via a flag—see the detailed `}<a parentName=\"p\" {...{\n        \"href\": \"/report-toolkit/cli-guide\"\n      }}>{`CLI Guide`}</a>{` for more information.`}</p>\n    <p>{`Next, you’ll see how `}<Metadata prop=\"executable\" mdxType=\"Metadata\" />{` can provide a quick comparison of two reports using its `}<inlineCode parentName=\"p\">{`diff`}</inlineCode>{` command.`}</p>\n    <h2 {...{\n      \"id\": \"compare-two-reports\"\n    }}>{`Compare Two Reports`}</h2>\n    <p>{`If you’re having trouble tracking down the difference between two running `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` processes—say, on two machines that `}<em parentName=\"p\">{`should`}</em>{` have identical environments—diagnostic reports and `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` can help.`}</p>\n    <p>{`As you may have deduced, we’ll need two (2) reports to proceed.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`If you’ve completed the `}<a parentName=\"p\" {...{\n          \"href\": \"#redact-secrets-from-a-report\"\n        }}>{`previous section`}</a>{`, you can re-use `}<inlineCode parentName=\"p\">{`report-redacted.json`}</inlineCode>{`; use this filename whenever this section refers to `}<inlineCode parentName=\"p\">{`report-1.json`}</inlineCode>{`. Skip ahead to `}<a parentName=\"p\" {...{\n          \"href\": \"#create-the-second-report\"\n        }}>{`creating the second report`}</a>{`.`}</p>\n    </InlineNotification>\n    <h3 {...{\n      \"id\": \"create-the-first-report\"\n    }}>{`Create the First Report`}</h3>\n    <p>{`To create the first report, named `}<inlineCode parentName=\"p\">{`report-1.json`}</inlineCode>{`, execute:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`node --experimental-report --report-filename report-1.json \\\\\n  --eval \"process.report.writeReport()\"\n`}</code></pre>\n    <p>{`You’ll see:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-plain\",\n        \"metastring\": \"wrap=true\",\n        \"wrap\": \"true\"\n      }}>{`Writing Node.js report to file: report-1.json\nNode.js report completed\n(node:18881) ExperimentalWarning: report is an experimental feature. This feature could change at any time\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-the-second-report\"\n    }}>{`Create the Second Report`}</h3>\n    <p>{`To create a `}<em parentName=\"p\">{`second`}</em>{` report, repeat the command with the filename changed to `}<inlineCode parentName=\"p\">{`report-2.json`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`node --experimental-report --report-filename report-2.json \\\\\n  --eval \"process.report.writeReport()\"\n`}</code></pre>\n    <p>{`And you will see:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-plain\",\n        \"metastring\": \"wrap=true\",\n        \"wrap\": \"true\"\n      }}>{`Writing Node.js report to file: report-2.json\nNode.js report completed\n(node:18881) ExperimentalWarning: report is an experimental feature. This feature could change at any time\n`}</code></pre>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n  Remember, report files may contain secrets; be deliberate about what you do\n  with these files!\n    </InlineNotification>\n    <p>{`With our two reports in-hand, we can use the `}<inlineCode parentName=\"p\">{`diff`}</inlineCode>{` command to see what’s changed between these two files.`}</p>\n    <h3 {...{\n      \"id\": \"running-a-diff\"\n    }}>{`Running a Diff`}</h3>\n    <p>{`A “diff” between two reports is `}<em parentName=\"p\">{`not`}</em>{` a POSIX diff like you’d see between two versions of the same file. If you want that, you can use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Diff\"\n      }}>{`diff utility`}</a>{`!`}</p>\n    <p>{`Instead, `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` attempts to disregard typically-irrelevant information, and provide output tailored to the data structure of a report file, which is JSON.`}</p>\n    <p>{`To display a diff, execute:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`rtk diff report-1.json report-2.json\n`}</code></pre>\n    <p>{`You’ll get something like the below (but probably with fancy colors):`}</p>\n    <EmbedCode name=\"diff-output\" mdxType=\"EmbedCode\" />\n    <p>{`By default, `}<Metadata prop=\"executable\" mdxType=\"Metadata\" />{` will display a diff in a tabular format, intended for human consumption.`}</p>\n    <p>{`In the table above, we have four (4) columns. Breaking them down:`}</p>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Op`}</strong>{`: This is the `}<em parentName=\"li\">{`type`}</em>{` of change. In this case, all changes are `}<em parentName=\"li\">{`modifications`}</em>{`, denoted by `}<inlineCode parentName=\"li\">{`M`}</inlineCode>{`. This means that the field exists in both reports, but the value is different. You may also see `}<inlineCode parentName=\"li\">{`A`}</inlineCode>{` for “added” (when a field is present in the second report and not the first) and `}<inlineCode parentName=\"li\">{`D`}</inlineCode>{` for “deleted” (when a field is present in the first but not the second).`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Path`}</strong>{`: This is the JSON “keypath” of the field. If you were to reference the field like the report is a regular JavaScript object, this is how you would do it. `}<inlineCode parentName=\"li\">{`[]`}</inlineCode>{` indicates the presence of an `}<em parentName=\"li\">{`array`}</em>{`. `}<inlineCode parentName=\"li\">{`header.commandLine[3]`}</inlineCode>{`, for example, 4th element of the `}<inlineCode parentName=\"li\">{`commandLine`}</inlineCode>{` prop of the root `}<inlineCode parentName=\"li\">{`header`}</inlineCode>{` prop.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`report-1.json`}</strong>{`: The value at `}<strong parentName=\"li\">{`Path`}</strong>{` in `}<inlineCode parentName=\"li\">{`report-1.json`}</inlineCode>{` (if present).`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`report-2.json`}</strong>{`: The corresponding value at `}<strong parentName=\"li\">{`Path`}</strong>{` in `}<inlineCode parentName=\"li\">{`report-2.json`}</inlineCode>{` (if present).`}</li>\n    </ol>\n    <p>{`Note the difference within the `}<inlineCode parentName=\"p\">{`header.commandLine`}</inlineCode>{` array. This reflects the different commands we used to generate each report. We could use that information to determine if the same application generated both reports. Likewise, by comparing `}<inlineCode parentName=\"p\">{`header.processId`}</inlineCode>{`, we could tell if the same `}<em parentName=\"p\">{`process`}</em>{` created both reports.`}</p>\n    <Row mdxType=\"Row\">\n      <Column colMd={5} colLg={8} mdxType=\"Column\">\n        <p>{`To squelch noise, by default, the `}<inlineCode parentName=\"p\">{`diff`}</inlineCode>{` command shows differences `}<em parentName=\"p\">{`only`}</em>{` within these properties:`}</p>\n        <ol>\n          <li parentName=\"ol\"><inlineCode parentName=\"li\">{`header`}</inlineCode>{`, omitting properties:`}<ol parentName=\"li\">\n              <li parentName=\"ol\"><inlineCode parentName=\"li\">{`filename`}</inlineCode></li>\n              <li parentName=\"ol\"><inlineCode parentName=\"li\">{`dumpEventTime`}</inlineCode></li>\n              <li parentName=\"ol\"><inlineCode parentName=\"li\">{`dumpEventTimeStamp`}</inlineCode></li>\n              <li parentName=\"ol\"><inlineCode parentName=\"li\">{`cpus`}</inlineCode></li>\n            </ol></li>\n          <li parentName=\"ol\"><inlineCode parentName=\"li\">{`environmentVariables`}</inlineCode></li>\n          <li parentName=\"ol\"><inlineCode parentName=\"li\">{`userLimits`}</inlineCode></li>\n          <li parentName=\"ol\"><inlineCode parentName=\"li\">{`sharedObjects`}</inlineCode></li>\n        </ol>\n      </Column>\n      <Column colMd={2} colLg={3} offsetMd={1} offsetLg={1} mdxType=\"Column\">\n  <Aside mdxType=\"Aside\">\n          <p>{`You can control which fields appear in the diff by providing the `}<inlineCode parentName=\"p\">{`--includeProp/-i`}</inlineCode>{` and/or `}<inlineCode parentName=\"p\">{`--excludeProp/-x`}</inlineCode>{` arguments, or use `}<inlineCode parentName=\"p\">{`--all`}</inlineCode>{` to show everything. See the `}<a parentName=\"p\" {...{\n              \"href\": \"\"\n            }}>{`CLI Guide`}</a>{` for more in-depth information.`}</p>\n  </Aside>\n      </Column>\n    </Row>\n    <p>{`Next, we’ll see how `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` can detect problems using its `}<inlineCode parentName=\"p\">{`inspect`}</inlineCode>{` command.`}</p>\n    <h2 {...{\n      \"id\": \"detect-problems-within-a-report\"\n    }}>{`Detect Problems within a Report`}</h2>\n    <p>{`A diagnostic report is raw data about a `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` process. If you’re familiar with diagnostic reports—or happen to know precisely what you’re looking for—you can interpret that data yourself.`}</p>\n    <p>{`But much like a radiologist reading an X-ray, `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` can interpret the raw data in a report and provide akin to a `}<em parentName=\"p\">{`diagnosis`}</em>{`—or warn about something you may have otherwise overlooked.`}</p>\n    <p>{`Given a diagnostic report, `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` can run a set of `}<em parentName=\"p\">{`rules`}</em>{` (heuristics) against it, providing further information if a “check” fails. This is similar—and, in fact, patterned on—how `}<a parentName=\"p\" {...{\n        \"href\": \"http://eslint.org\"\n      }}>{`ESLint`}</a>{` runs rules against your codebase. Also akin to ESLint, `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` ships with a set of built-in rules, which we’ll use next.`}</p>\n    <p>{`Let’s take one of the reports we’ve already created (it doesn’t matter which). Execute:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`rtk inspect report-1.json\n`}</code></pre>\n    <p>{`Most likely, this command will result in `}<em parentName=\"p\">{`no output`}</em>{`—in other words, success. `}<Metadata prop=\"executable\" mdxType=\"Metadata\" />{` didn’t find anything worth your attention.`}</p>\n    <p>{`Each `}<em parentName=\"p\">{`message`}</em>{` emitted by a rule has an associated `}<em parentName=\"p\">{`severity`}</em>{`. These severities, from “most severe” to “least severe”, are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`error`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`warning`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`info`}</inlineCode></li>\n    </ul>\n    <p>{`The default behavior of `}<Metadata prop=\"executable\" mdxType=\"Metadata\" />{` is to exclusively show messages with a severity of `}<em parentName=\"p\">{`error`}</em>{`.`}</p>\n    <p>{`But you, the user, can control this. Let’s change the severity threshold to `}<inlineCode parentName=\"p\">{`info`}</inlineCode>{`, and see what happens:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`rtk inspect report-1.json --severity info\n`}</code></pre>\n    <p>{`The output should now look `}<em parentName=\"p\">{`something`}</em>{` like this (and in color):`}</p>\n    <EmbedCode name=\"inspect-output-1\" mdxType=\"EmbedCode\" />\n    <p>{`Above, we see that two rules (`}<inlineCode parentName=\"p\">{`cpu-usage`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`memory-usage`}</inlineCode>{`) each output a message. Reading the message, we see that the allowed CPU usage and memory usage, respectively, are within the default thresholds for each rule.`}</p>\n    <p>{`If, for example, the CPU usage was greater than 50%, then instead of a message with severity `}<inlineCode parentName=\"p\">{`INFO`}</inlineCode>{`, the severity would be displayed as `}<inlineCode parentName=\"p\">{`ERROR`}</inlineCode>{`.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`When a message with severity `}<inlineCode parentName=\"p\">{`ERROR`}</inlineCode>{` is encountered during inspection, `}<Metadata prop=\"executable\" mdxType=\"Metadata\" />{`’s process with exit with a nonzero code (1).`}</p>\n    </InlineNotification>\n    <p>{`Instead of printing a fibonacci sequence in another process, we can use an example “problem” report file to see what an `}<em parentName=\"p\">{`actual`}</em>{` error looks like. `}<a href=\"/raw/report-high-cpu-usage.example.json\" download>{`Download `}<inlineCode>{`report-high-cpu-usage.example.json`}</inlineCode></a>{`; we’ll hand this file to `}<inlineCode parentName=\"p\">{`inspect`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`rtk inspect report-high-cpu-usage.example.json\n`}</code></pre>\n    <p>{`Note that the above command `}<em parentName=\"p\">{`does not`}</em>{` include `}<inlineCode parentName=\"p\">{`--severity info`}</inlineCode>{`. Now, we should see an error:`}</p>\n    <EmbedCode name=\"inspect-output-2\" mdxType=\"EmbedCode\" />\n    <p>{`In `}<inlineCode parentName=\"p\">{`report-high-cpu-usage.example.json`}</inlineCode>{`, the reported CPU usage (precisely, the `}<em parentName=\"p\">{`mean`}</em>{` across all CPUs) is greater than the default threshold of 50%.`}</p>\n    <p>{`You could use this information to verify that the process isn’t taking up too much CPU—or change the range (via a configuration file) to assert the process remains active—or even verify that utilization is high enough to justify paying for the compute!`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`To get the most out of the built-in rules—all of which are independently configurable—see the `}<a parentName=\"p\" {...{\n          \"href\": \"\"\n        }}>{`Configuration Guide`}</a>{`. If you want to make your `}<em parentName=\"p\">{`own`}</em>{` custom rules, see the `}<a parentName=\"p\" {...{\n          \"href\": \"\"\n        }}>{`Plugin Developer’s Guide`}</a>{`;`}</p>\n    </InlineNotification>\n    <p>{`Finally, let’s see how `}<Metadata prop=\"executable\" mdxType=\"Metadata\" />{`’s `}<inlineCode parentName=\"p\">{`transform`}</inlineCode>{` command can help convert a report to a more useful format.`}</p>\n    <h2 {...{\n      \"id\": \"transforming-a-report\"\n    }}>{`Transforming a Report`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`transform`}</inlineCode>{` command allows you to apply `}<em parentName=\"p\">{`one or more`}</em>{` “transformers” to a diagnostic report.`}</p>\n    <p>{`The list of built-in transformers is as follows:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`csv`}</inlineCode>{`: Converts to CSV format`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`filter`}</inlineCode>{`: Pick or omit certain properties`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`json`}</inlineCode>{`: Converts to JSON format (the default)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`newline`}</inlineCode>{`: Converts to newline-delimited format, suitable for piping via shell, consumption via Node.js streams, etc.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`numeric`}</inlineCode>{`: A special filter which picks only `}<em parentName=\"li\">{`numeric`}</em>{` fields; good for metrics`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`redact`}</inlineCode>{`: Redacts secrets`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`stack-hash`}</inlineCode>{`: Computes a hash of the exception for metrics; helps answer “have we seen this exception before?”`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`table`}</inlineCode>{`: The default transform for the `}<inlineCode parentName=\"li\">{`diff`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`inspect`}</inlineCode>{` commands, among others`}</li>\n    </ul>\n    <p>{`Since this `}<em parentName=\"p\">{`is`}</em>{` supposed to be a quick-start guide, we’ll pick two of these as examples: `}<a parentName=\"p\" {...{\n        \"href\": \"#the-filter-transformer\"\n      }}><inlineCode parentName=\"a\">{`filter`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#the-stack-hash-transformer\"\n      }}><inlineCode parentName=\"a\">{`stack-hash`}</inlineCode></a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"the-filter-transformer\"\n    }}>{`The `}<inlineCode parentName=\"h3\">{`filter`}</inlineCode>{` Transformer`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` transformer allows you to essentially “whitelist” or “blacklist” some portion of a report (or both at once; the blacklist takes preference).`}</p>\n    <p>{`For example, if you’d like to retrieve `}<em parentName=\"p\">{`only`}</em>{` the version of `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` used to generate the report, you can use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`rtk transform -t filter --include header.componentVersions.node \\\\\n  report-1.json\n`}</code></pre>\n    <p>{`Which will result in something like this (depending on the version of `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` you used to generate the report):`}</p>\n    <EmbedCode name=\"transform-output-1\" language=\"json\" mdxType=\"EmbedCode\" />\n    <p>{`Likewise, the `}<inlineCode parentName=\"p\">{`--exclude`}</inlineCode>{` argument would allow you to, say, omit the entirety the `}<inlineCode parentName=\"p\">{`environmentVariables`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`sharedObjects`}</inlineCode>{` properties:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`rtk transform -t filter --exclude environmentVariables --exclude \\\\\n  sharedObjects report-1.json\n`}</code></pre>\n    <p>{`As you can see from the above, `}<inlineCode parentName=\"p\">{`--include`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`--exclude`}</inlineCode>{` can be specified multiple times.`}</p>\n    <p>{`For something more practical, let’s try `}<inlineCode parentName=\"p\">{`stack-hash`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"the-stack-hash-transformer\"\n    }}>{`The `}<inlineCode parentName=\"h3\">{`stack-hash`}</inlineCode>{` Transformer`}</h3>\n    <p>{`The intent of this transformer is to facilitate the gathering of `}<em parentName=\"p\">{`metrics`}</em>{` around exceptions (or more specifically, the stack traces thereof).`}</p>\n    <p><inlineCode parentName=\"p\">{`node`}</inlineCode>{` can be configured to automatically generate a diagnostic report when it encounters an uncaught exception or a user signal (e.g., `}<inlineCode parentName=\"p\">{`SIGUSR1`}</inlineCode>{`). We can then use the `}<inlineCode parentName=\"p\">{`stack-hash`}</inlineCode>{` transformer to associate the stack (present in all reports) with a reasonably unique SHA1 hash.`}</p>\n    <p>{`Here’s an example of configuring `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` to automatically output a report file upon an uncaught exception (and summarily throwing one via `}<inlineCode parentName=\"p\">{`--eval`}</inlineCode>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`node --experimental-report --report-filename report-3.json \\\\\n  --report-uncaught-exception --eval \"throw new Error('oh no')\"\n`}</code></pre>\n    <p>{`We can then use the `}<inlineCode parentName=\"p\">{`stack-hash`}</inlineCode>{` transformer on `}<inlineCode parentName=\"p\">{`report-3.json`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`rtk transform -t stack-hash report-3.json\n`}</code></pre>\n    <p>{`Which will result in something akin to:`}</p>\n    <EmbedCode name=\"transform-output-2\" language=\"json\" mdxType=\"EmbedCode\" />\n    <p>{`If we repeat the command using a different filename (`}<inlineCode parentName=\"p\">{`report-4.json`}</inlineCode>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`node --experimental-report --report-filename report-4.json \\\\\n  --report-uncaught-exception --eval \"throw new Error('oh no')\"\n`}</code></pre>\n    <p>{`And run the transformer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`rtk transform -t stack-hash report-4.json\n`}</code></pre>\n    <p>{`We’ll get the `}<em parentName=\"p\">{`same`}</em>{` hash, even though the `}<inlineCode parentName=\"p\">{`dumpEventTime`}</inlineCode>{` (when the report file was created) and `}<inlineCode parentName=\"p\">{`filepath`}</inlineCode>{` differ:`}</p>\n    <EmbedCode name=\"transform-output-3\" language=\"json\" mdxType=\"EmbedCode\" />\n    <p>{`But `}<em parentName=\"p\">{`not`}</em>{` if the message is different:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`node --experimental-report --report-filename report-5.json \\\\\n  --report-uncaught-exception --eval \"throw new Error('pizza party')\"\n`}</code></pre>\n    <p>{`And:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`rtk transform -t stack-hash report-5.json\n`}</code></pre>\n    <p>{`Results in:`}</p>\n    <EmbedCode name=\"transform-output-4\" language=\"json\" mdxType=\"EmbedCode\" />\n    <p>{`You can see that the `}<inlineCode parentName=\"p\">{`sha1`}</inlineCode>{` property is different, because the exception thrown has a different message.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`Transformers aren’t limited to just the `}<inlineCode parentName=\"p\">{`transform`}</inlineCode>{` command; you can use transformers `}<em parentName=\"p\">{`combined with`}</em>{` any other command (like `}<inlineCode parentName=\"p\">{`diff`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`inspect`}</inlineCode>{`) via the `}<inlineCode parentName=\"p\">{`--transform/-t`}</inlineCode>{` argument, as applicable. For example, converting the output of `}<inlineCode parentName=\"p\">{`inspect`}</inlineCode>{` to JSON for machine consumption. See the `}<a parentName=\"p\" {...{\n          \"href\": \"\"\n        }}>{`CLI Guide`}</a>{` for details.`}</p>\n    </InlineNotification>\n    <h2 {...{\n      \"id\": \"conclusion\"\n    }}>{`Conclusion`}</h2>\n    <p>{`That wraps up the `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` quick start guide! We’ve learned how to use `}<Metadata prop=\"packageName\" mdxType=\"Metadata\" />{` to:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Redact secrets from a diagnostic report`}</li>\n      <li parentName=\"ul\">{`Diff two diagnostic reports`}</li>\n      <li parentName=\"ul\">{`Check a diagnostic report for potential problems`}</li>\n      <li parentName=\"ul\">{`Transform a diagnostic report to another format`}</li>\n    </ul>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#further-reading\"\n      }}>{`below`}</a>{` for links to detailed documentation on all of the above topics.`}</p>\n    <h2 {...{\n      \"id\": \"further-reading\"\n    }}>{`Further Reading`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/report-toolkit/api/home\"\n        }}>{`Programmatic API Documentation`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory } = repositoryProp || repository;\n\n  const href = `${baseUrl}/tree/master${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const currentTabRegex = new RegExp(`${currentTab}(?!-)`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={Title ? <Title /> : title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}