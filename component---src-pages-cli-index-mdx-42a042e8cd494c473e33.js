(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{"013z":function(e,t,n){"use strict";n("HQhv"),n("sC2a");var a=n("pOBw"),r=n("q1tI"),o=n.n(r),i=n("NmYn"),l=n.n(i),b=n("OKom"),p=n("a7k6"),c=n("TSYQ"),s=n.n(c),m=n("ecM3"),d=n("qKvR"),u=function(e){var t,n=e.title,a=e.tabs,r=void 0===a?[]:a;return Object(d.b)("div",{className:s()(m.pageHeader,(t={},t[m.withTabs]=r.length,t))},Object(d.b)("div",{className:"bx--grid"},Object(d.b)("div",{className:"bx--row"},Object(d.b)("div",{className:"bx--col-lg-12"},Object(d.b)("h1",{id:"page-title",className:m.text},n)))))},j=n("pEPl"),O=n("BAC9"),h=function(e){var t=e.relativePagePath,n=e.repository,a=j.data.site.siteMetadata.repository,r=n||a,o=r.baseUrl,i=r.subDirectory,l=o+"/edit/"+r.branch+i+"/src/pages"+t;return o?Object(d.b)("div",{className:"bx--row "+O.row},Object(d.b)("div",{className:"bx--col"},Object(d.b)("a",{className:O.link,href:l},"Edit this page on GitHub"))):null},f=(n("YbXK"),n("cFtU"),n("m210"),n("xtjI"),n("4DPX"),n("rzGZ"),n("Dq+y"),n("Ggvi"),n("gu/5"),n("eoYm"),n("zTTH"),n("q8oJ"),n("8npG"),n("HQAx"),n("UPW5")),N=(n("pJf4"),n("Wbzz")),g=n("E7yi"),C=function(e){var t=e.previousItem,n=e.nextItem;return Object(d.b)("div",{className:g.wrapper},Object(d.b)("div",{className:g.linkContainer},t.to&&Object(d.b)(N.Link,{className:s()(g.link,g.firstLink),to:t.to},Object(d.b)("div",{className:g.direction},"Previous"),Object(d.b)("div",{className:g.name},t.name)),n.to&&Object(d.b)(N.Link,{className:s()(g.link,g.secondLink),to:n.to},Object(d.b)("div",{className:g.direction},"Next"),Object(d.b)("div",{className:g.name},n.name))))};function y(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var x=function(){var e=f.data,t=e.allNavItemsYaml.edges,n=e.site.pathPrefix;return[t.flatMap((function(e){var t=e.node;return t.pages.map((function(e){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){w(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,{category:t.title})}))})),n]},T=function(e,t){return e+(t?": "+t:"")},k=function(e){var t=e.tabs,n=e.location,a=e.pageContext,r=void 0===a?{frontmatter:"Home"}:a,o=x(),i=o[0],b=o[1],p=function(e){return e.frontmatter.title?l()(e.frontmatter.title,{lower:!0}):"Home"}(r),c=n.pathname.replace(b,"").split("/").filter(Boolean),s=function(e){var t=e.tabs,n=e.location.pathname.split("/");if(!t)return{prevTabItem:null,nextTabItem:null};var a=t.map((function(e){var t=l()(e,{lower:!0}),a=n.filter((function(e){return e===t})).toString()===t;return{title:e,slug:t,currentTab:a}})),r=a.findIndex((function(e){return e.currentTab}));return{prevTabItem:a[r-1],nextTabItem:a[r+1]}}({currentTitle:p,location:n,tabs:t}),m=s.prevTabItem,u=s.nextTabItem,j=function(e){var t=e.tabs,n=e.location,a=x(),r=a[0],o=a[1],i=n.pathname.replace(o,""),l=t?i.replace(/\/[^/]*\/?$/,""):i.replace(/\/$/,""),b=r.findIndex((function(e){return e.path.includes(l)}));return{prevCategory:r[b-1],nextCategory:r[b+1],navIndex:b}}({location:n,tabs:t}),O=j.prevCategory,h=j.nextCategory,f=j.navIndex;return"Home"===p||i[f]?Object(d.b)(C,{previousItem:m?{to:"/"+[].concat(y(c.slice(0,-1)),[m.slug]).join("/"),name:T(i[f].title||i[f].category,m.title)}:O?{to:O.path,name:T(O.category,O.title)}:"Home"===p?{}:{to:"/",name:"Home"},nextItem:"Home"===p?{to:i[f].path,name:T(i[f].category,i[f].title)}:u&&u.slug?{to:"/"+[].concat(y(c.slice(0,-1)),[u.slug]).join("/"),name:T(i[f].title||i[f].category,u.title)}:h?{to:h.path,name:T(h.category,h.title)}:{}}):null},I=(n("klQ5"),n("I8xM"));var A=function(e){var t,n;function a(){return e.apply(this,arguments)||this}return n=e,(t=a).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,a.prototype.render=function(){var e=this.props,t=e.tabs,n=e.slug,a=n.split("/").filter(Boolean).slice(-1)[0],r=t.map((function(e){var t,r=l()(e,{lower:!0}),o=r===a,i=new RegExp(a+"(?!-)"),b=n.replace(i,r);return Object(d.b)("li",{key:e,className:s()((t={},t[I.selectedItem]=o,t),I.listItem)},Object(d.b)(N.Link,{className:I.link,to:""+b},e))}));return Object(d.b)("div",{className:I.tabsContainer},Object(d.b)("div",{className:"bx--grid"},Object(d.b)("div",{className:"bx--row"},Object(d.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(d.b)("nav",null,Object(d.b)("ul",{className:I.list},r))))))},a}(o.a.Component),D=n("MjG9");t.a=function(e){var t=e.pageContext,n=e.children,r=e.location,o=e.Title,i=t.frontmatter,c=void 0===i?{}:i,s=t.relativePagePath,m=t.titleType,j=c.tabs,O=c.title,f=c.theme,N=c.description,g=c.keywords,C=a.data.site.pathPrefix,y=C?r.pathname.replace(C,""):r.pathname,v=j?y.split("/").slice(-1)[0]||l()(j[0],{lower:!0}):"";return Object(d.b)(p.a,{tabs:j,homepage:!1,theme:f,pageTitle:O,pageDescription:N,pageKeywords:g,titleType:m},Object(d.b)(u,{title:o?Object(d.b)(o,null):O,label:"label",tabs:j}),j&&Object(d.b)(A,{slug:y,tabs:j,currentTab:v}),Object(d.b)(D.a,{padded:!0},n,Object(d.b)(h,{relativePagePath:s})),Object(d.b)(k,{pageContext:t,location:r,slug:y,tabs:j,currentTab:v}),Object(d.b)(b.a,null))}},UPW5:function(e){e.exports=JSON.parse('{"data":{"allNavItemsYaml":{"edges":[{"node":{"id":"0418868e-af0a-5a4f-bfa7-6777d7e3ee49","title":"Quick Start","pages":[{"title":"Quick Start","path":"/quick-start"}]}},{"node":{"id":"9ea2dcf5-7bbd-531d-9832-c7d68491c4ed","title":"Command-Line Usage","pages":[{"title":"Command-Line Usage","path":"/cli"}]}},{"node":{"id":"f1441d10-921e-5a42-9ba6-beafc1dbea42","title":"API Docs","pages":[{"title":"API Docs","path":"/api"}]}},{"node":{"id":"0c2d41c3-1fc9-5c22-acf7-51ce9b8a7fff","title":"Configuration","pages":[{"title":"Configuration","path":"/config"}]}}]},"site":{"id":"Site","pathPrefix":"/report-toolkit"}}}')},eAvE:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return b})),n.d(t,"default",(function(){return N}));n("E5k/"),n("rzGZ"),n("Dq+y"),n("8npG"),n("Ggvi"),n("q1tI");var a=n("7ljp"),r=n("013z"),o=(n("oocL"),n("Kvkj")),i=n("+tiy");n("qKvR");function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var b={},p=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",t)}},c=p("PageDescription"),s=p("Metadata"),m=p("AnchorLinks"),d=p("AnchorLink"),u=p("DoDontRow"),j=p("DoDont"),O=p("InlineNotification"),h={_frontmatter:b},f=r.a;function N(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(f,l({},h,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(c,{mdxType:"PageDescription"},Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)(s,{prop:"packageName",mdxType:"Metadata"}))," provides a command-line utility, ",Object(a.b)(s,{prop:"executable",mdxType:"Metadata"}),". This usage documentation provides detailed descriptions of all ",Object(a.b)("em",{parentName:"p"},"commands")," and options for ",Object(a.b)(s,{prop:"executable",mdxType:"Metadata"}),".")),Object(a.b)(m,{mdxType:"AnchorLinks"},Object(a.b)(d,{mdxType:"AnchorLink"},"General Usage Guidelines"),Object(a.b)(d,{mdxType:"AnchorLink"},"Global Options"),Object(a.b)(d,{to:"#the-diff-command",mdxType:"AnchorLink"},"The ",Object(a.b)(o.a,{mdxType:"InlineCode"},"diff")," Command"),Object(a.b)(d,{to:"#the-inspect-command",mdxType:"AnchorLink"},"The ",Object(a.b)(o.a,{mdxType:"InlineCode"},"inspect")," Command"),Object(a.b)(d,{to:"#the-redact-command",mdxType:"AnchorLink"},"The ",Object(a.b)(o.a,{mdxType:"InlineCode"},"redact")," Command"),Object(a.b)(d,{to:"#the-transform-command",mdxType:"AnchorLink"},"The ",Object(a.b)(o.a,{mdxType:"InlineCode"},"transform")," Command"),Object(a.b)(d,{to:"#common-output-options",mdxType:"AnchorLink"},"Common Output Options"),Object(a.b)(d,{to:"#transformer-specific-options",mdxType:"AnchorLink"},"Transformer-Specific Options")),Object(a.b)("h2",null,"General Usage Guidelines"),Object(a.b)("h3",null,Object(a.b)(s,{prop:"executable",mdxType:"Metadata"})," Requires a Command"),Object(a.b)("p",null,"You must supply a ",Object(a.b)("em",{parentName:"p"},"command")," to ",Object(a.b)(s,{prop:"executable",mdxType:"Metadata"}),". A ",Object(a.b)("em",{parentName:"p"},"single")," command must immediately follow the ",Object(a.b)(s,{prop:"executable",mdxType:"Metadata"})," executable."),Object(a.b)(u,{mdxType:"DoDontRow"},Object(a.b)(j,{type:"do",color:"dark",captionTitle:"Correct Usage",caption:"Command is first argument",text:"rtk redact report-file.json",className:i.doDontCode,mdxType:"DoDont"}),Object(a.b)(j,{type:"dont",color:"dark",captionTitle:"Incorrect Usage",caption:"Command in wrong position",text:"rtk report-file.json redact",className:i.doDontCode,mdxType:"DoDont"})),Object(a.b)("h3",null,"Available Commands"),Object(a.b)("p",null,"The command must be one of the following:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"#the-diff-command"}),Object(a.b)("inlineCode",{parentName:"a"},"diff"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"#the-inspect-command"}),Object(a.b)("inlineCode",{parentName:"a"},"inspect"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"#the-redact-command"}),Object(a.b)("inlineCode",{parentName:"a"},"redact"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"#the-transform-command"}),Object(a.b)("inlineCode",{parentName:"a"},"transform")))),Object(a.b)(O,{kind:"info",mdxType:"InlineNotification"},Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"As of v0.5.1"),", the ",Object(a.b)("inlineCode",{parentName:"p"},"list-rules")," command (for the time being; see ",Object(a.b)("a",l({parentName:"p"},{href:"https://github.com/IBM/report-toolkit/issues/80"}),"#80"),") will output the built-in rules for ",Object(a.b)("a",l({parentName:"p"},{href:"#the-inspect-command"}),Object(a.b)("inlineCode",{parentName:"a"},"inspect"))," and their descriptions.")),Object(a.b)("h3",null,"About Flags"),Object(a.b)("p",null,"Any “boolean” flag—an option without an argument—can be explicitly disabled by prepending ",Object(a.b)("inlineCode",{parentName:"p"},"--no-")," to the option name. For example, to explicitly disable color output when comparing ",Object(a.b)("inlineCode",{parentName:"p"},"report-A.json")," to ",Object(a.b)("inlineCode",{parentName:"p"},"report-B.json"),":"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk --no-color diff report-A.json report-B.json\n")),Object(a.b)("p",null,"This is applicable to both ",Object(a.b)("a",l({parentName:"p"},{href:"#global-options"}),"global")," and command-specific boolean flags."),Object(a.b)("h3",null,"About Configuration"),Object(a.b)("p",null,"Configuration will be read from a JavaScript file named ",Object(a.b)("inlineCode",{parentName:"p"},".rtkrc.js")," or ",Object(a.b)("inlineCode",{parentName:"p"},"rtk.config.js"),". If one is not found in the current working directory, the search for one of these files will continue until one is found, the current user’s “home” directory is found, or the root of the filesystem is found (see ",Object(a.b)("a",l({parentName:"p"},{href:"https://npm.im/cosmiconfig"}),"cosmiconfig")," for further details on the file-finding algorithm)."),Object(a.b)(O,{kind:"warning",mdxType:"InlineNotification"},Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"As of v0.5.1"),", only CommonJS-style ",Object(a.b)("inlineCode",{parentName:"p"},".js")," is allowed; the config file must use ",Object(a.b)("inlineCode",{parentName:"p"},"module.exports")," or ",Object(a.b)("inlineCode",{parentName:"p"},"exports"),", and cannot be an ECMAScript module.")),Object(a.b)("p",null,"Other formats, including JSON, YAML, TOML, etc., are explicitly ",Object(a.b)("em",{parentName:"p"},"not")," supported. Configuration cannot be stored in a ",Object(a.b)("inlineCode",{parentName:"p"},"package.json"),", either. Sorry!"),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"TODO: Write configuration docs and link to them; see ",Object(a.b)("a",l({parentName:"em"},{href:"https://github.com/IBM/report-toolkit/issues/66"}),"#66"))),Object(a.b)("h2",null,"Global Options"),Object(a.b)("p",null,"These options can be used in tandem with any command."),Object(a.b)("p",null,"In the case of ",Object(a.b)("inlineCode",{parentName:"p"},"--help")," and ",Object(a.b)("inlineCode",{parentName:"p"},"--version"),", no command is required."),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"--rc </path/to/.rtkrc.js>")),Object(a.b)("p",null,"Supply an explicit path to a ",Object(a.b)(s,{prop:"packageName",mdxType:"Metadata"})," config file. This option is only necessary if your config file has non-standard location and/or name."),Object(a.b)("h4",null,"Example: Run ",Object(a.b)("inlineCode",{parentName:"h4"},"inspect")," Using Config ",Object(a.b)("inlineCode",{parentName:"h4"},"my-config.js")),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk --rc my-config.js inspect report-A.json\n")),Object(a.b)("p",null,"The same restrictions as described above in ",Object(a.b)("a",l({parentName:"p"},{href:"#about-configuration"}),"About Configuration")," apply."),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"--color")," / ",Object(a.b)("inlineCode",{parentName:"h3"},"--no-color")),Object(a.b)("p",null,"Color output is enabled ",Object(a.b)("a",l({parentName:"p"},{href:"#defaults-of-diff"}),"by default")," when a TTY is available. If there is no TTY (like in a subprocess, or when piped), specify ",Object(a.b)("inlineCode",{parentName:"p"},"--color")," to force color."),Object(a.b)(O,{kind:"warning",mdxType:"InlineNotification"},Object(a.b)("p",null,"Some transformations do not support color output (e.g., ",Object(a.b)("inlineCode",{parentName:"p"},"csv"),"), and ",Object(a.b)("inlineCode",{parentName:"p"},"--color")," will be ignored. In ",Object(a.b)(s,{prop:"executable",mdxType:"Metadata"}),", color is intended for human-readable output.")),Object(a.b)("h4",null,"Example: Force Color Output When Comparing ",Object(a.b)("inlineCode",{parentName:"h4"},"report-A.json")," and ",Object(a.b)("inlineCode",{parentName:"h4"},"report-B.json")),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk diff --color report-A.json report-B.json\n")),Object(a.b)("h4",null,"Example: Disable Color Output When Inspecting ",Object(a.b)("inlineCode",{parentName:"h4"},"report.json")),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk inspect --no-color report.json\n")),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"--debug")," / ",Object(a.b)("inlineCode",{parentName:"h3"},"--verbose")),Object(a.b)("p",null,"Enables debug output. ",Object(a.b)("inlineCode",{parentName:"p"},"--verbose")," is an alias of ",Object(a.b)("inlineCode",{parentName:"p"},"--debug"),"; their behavior is identical."),Object(a.b)("p",null,"This can be noisy."),Object(a.b)("p",null,"Using ",Object(a.b)("inlineCode",{parentName:"p"},"--debug")," is equivalent to setting the environment variable ",Object(a.b)("inlineCode",{parentName:"p"},"DEBUG=rtk*"),". Further granularity can be achieved by appending package or module name(s) separated by colons, e.g., ",Object(a.b)("inlineCode",{parentName:"p"},"DEBUG=rtk:cli*")," will show all debug output from the ",Object(a.b)("a",l({parentName:"p"},{href:"https://github.com/IBM/report-toolkit/tree/master/packages/cli"}),"CLI package"),". Package names follow a pattern of ",Object(a.b)("inlineCode",{parentName:"p"},"rtk:<package name>[:..submodule name or path]"),"."),Object(a.b)("p",null,"Debug output is sent to ",Object(a.b)("inlineCode",{parentName:"p"},"STDERR"),"."),Object(a.b)(O,{kind:"info",mdxType:"InlineNotification"},Object(a.b)("p",null,"See the documentation of the ",Object(a.b)("a",l({parentName:"p"},{href:"https://github.com/visionmedia/debug#readme"}),"debug")," package for more about controlling its behavior via the ",Object(a.b)("inlineCode",{parentName:"p"},"DEBUG")," environment variable.")),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"--help")),Object(a.b)("p",null,"Displays help text, then exits. ",Object(a.b)("inlineCode",{parentName:"p"},"--help")," can be used by itself (to see global\noptions and the list of commands), or combined with any command to see command-specific options."),Object(a.b)("h4",null,"Example: Print Help Text"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk --help\n")),Object(a.b)("h4",null,"Example: Print Help Text for ",Object(a.b)("inlineCode",{parentName:"h4"},"inspect")," Command"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk inspect --help\n")),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"--version")),Object(a.b)("p",null,"Outputs the version of ",Object(a.b)(s,{prop:"executable",mdxType:"Metadata"})," to ",Object(a.b)("inlineCode",{parentName:"p"},"STDOUT")," then exits."),Object(a.b)("h4",null,"Example: Print Version of Installed ",Object(a.b)("inlineCode",{parentName:"h4"},"rtk")," Executable"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk --version\n")),Object(a.b)("h2",null,"The ",Object(a.b)("inlineCode",{parentName:"h2"},"diff")," Command"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"diff")," command compares two (2) Diagnostic Report files and outputs the difference. Unlike a typical ",Object(a.b)("inlineCode",{parentName:"p"},"diff")," tool, the output is purpose-built for comparing reports."),Object(a.b)("h3",null,"Basic Usage: ",Object(a.b)("inlineCode",{parentName:"h3"},"rtk diff <file-A> <file-B>")),Object(a.b)("p",null,"To use ",Object(a.b)("inlineCode",{parentName:"p"},"diff")," with the ",Object(a.b)("a",l({parentName:"p"},{href:"#defaults-of-diff"}),"defaults"),":"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk diff report-A.json report-B.json\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"diff")," requires two (2) paths to Diagnostic Report files."),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"diff"),": Output Description"),Object(a.b)("p",null,"The output of ",Object(a.b)("inlineCode",{parentName:"p"},"diff")," contains four (4) fields:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Op"),": Shorthand for “operation”:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"(M)odified"),": The field exists in both reports, but differs"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"(A)dded"),": The field exists in the ",Object(a.b)("em",{parentName:"li"},"first")," report only"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"(D)eleted"),": The field exists in the ",Object(a.b)("em",{parentName:"li"},"second")," report only"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Field"),": The field path which differs, represented in “dot” notation."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},Object(a.b)("em",{parentName:"strong"},"(path to first report)")),": The value in the field of the first report (if present)"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},Object(a.b)("em",{parentName:"strong"},"(path to second report)")),": The value in the field of the second report (if present)")),Object(a.b)("p",null,"In the default, tabular output, each “Op” and “Field” pair will be color-coded based on its operation. “Modified” is yellow, “deleted” is red, and “added” is green."),Object(a.b)("p",null,"Unlike other commands, the output of ",Object(a.b)("inlineCode",{parentName:"p"},"diff")," depends on the order of the two files given; the results will be the same, but reversed."),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"diff"),": Defaults"),Object(a.b)("p",null,"This section describes the default behavior of ",Object(a.b)("inlineCode",{parentName:"p"},"rtk diff"),"."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Output: a human-readable, ",Object(a.b)("strong",{parentName:"li"},"tabular view")," (in color, where available)"),Object(a.b)("li",{parentName:"ul"},"Secrets are ",Object(a.b)("strong",{parentName:"li"},"redacted")," from Diagnostic Reports ",Object(a.b)("em",{parentName:"li"},"before")," comparison"),Object(a.b)("li",{parentName:"ul"},"To increase the signal-to-noise ratio, ",Object(a.b)("inlineCode",{parentName:"li"},"diff")," ",Object(a.b)("strong",{parentName:"li"},"includes only this following set of fields"),":",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"header")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"environmentVariables")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"userLimits")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"sharedObejcts")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"libuv")))),Object(a.b)("li",{parentName:"ul"},"Furthermore, these nested fields are ",Object(a.b)("strong",{parentName:"li"},"excluded from the ",Object(a.b)("inlineCode",{parentName:"strong"},"header")," field"),":",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"header.filename")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"header.dumpEventTime")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"header.dumpEventTimeStamp")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"header.cpus"))))),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"diff"),"-specific Options"),Object(a.b)("p",null,"This group of options allows the user to fine-tune which fields (properties) ",Object(a.b)("inlineCode",{parentName:"p"},"rtk diff")," considers when comparing report files."),Object(a.b)(O,{kind:"warning",mdxType:"InlineNotification"},Object(a.b)("p",null,"When using these options, please note that ",Object(a.b)("em",{parentName:"p"},"exclusion")," of fields ",Object(a.b)("strong",{parentName:"p"},"takes precedence")," over ",Object(a.b)("em",{parentName:"p"},"inclusion")," of fields. In other words: include fields ",Object(a.b)("em",{parentName:"p"},"first"),", ",Object(a.b)("em",{parentName:"p"},"then")," exclude from your list. In this way, you can include a top level field (like ",Object(a.b)("inlineCode",{parentName:"p"},"header"),"), then exclude a nested field (like ",Object(a.b)("inlineCode",{parentName:"p"},"header.processId"),"). For example, ",Object(a.b)("inlineCode",{parentName:"p"},"rtk diff -i header -x header.processId report-A.json report-B.json")," will compare ",Object(a.b)("inlineCode",{parentName:"p"},"header"),", but not its nested property, ",Object(a.b)("inlineCode",{parentName:"p"},"header.processId"),".")),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"diff"),": Options"),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"--includeProp <field>, -i <field>")),Object(a.b)("p",null,"Explicitly ",Object(a.b)("em",{parentName:"p"},"include")," one or more fields in the comparison. If this option is used, ",Object(a.b)(s,{prop:"executable",mdxType:"Metadata"})," will ",Object(a.b)("em",{parentName:"p"},"only")," consider the field(s) specified (and any nested fields or array items)."),Object(a.b)("p",null,"This option can be used multiple times."),Object(a.b)("h5",null,"Example: Include a Single Field"),Object(a.b)("p",null,"To ",Object(a.b)("em",{parentName:"p"},"only")," compare field ",Object(a.b)("inlineCode",{parentName:"p"},"header")," (and its nested fields) when comparing ",Object(a.b)("inlineCode",{parentName:"p"},"report-A.json")," and ",Object(a.b)("inlineCode",{parentName:"p"},"report-B.json"),":"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk diff --includeProp header report-A.json report-B.json\n")),Object(a.b)("h5",null,"Example: Include Multiple fields"),Object(a.b)("p",null,"To ",Object(a.b)("em",{parentName:"p"},"only")," compare fields ",Object(a.b)("inlineCode",{parentName:"p"},"header.commandLine")," (and its items) and ",Object(a.b)("inlineCode",{parentName:"p"},"header.cwd")," when comparing ",Object(a.b)("inlineCode",{parentName:"p"},"report-A.json")," and ",Object(a.b)("inlineCode",{parentName:"p"},"report-B.json"),":"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk diff -i header.commandLine -i header.cwd report-A.json report-B.json\n")),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"--excludeProp <field>, -x <field>")),Object(a.b)("p",null,"Explicitly ",Object(a.b)("em",{parentName:"p"},"exclude")," one or more fields in the comparison. If this option is used, ",Object(a.b)(s,{prop:"executable",mdxType:"Metadata"})," will consider the ",Object(a.b)("a",l({parentName:"p"},{href:"#defaults-of-diff"}),"defaults"),", then further exclude the specified fields."),Object(a.b)("p",null,"This option can be used multiple times."),Object(a.b)("h5",null,"Example: Exclude a Single Field"),Object(a.b)("p",null,"To exclude field ",Object(a.b)("inlineCode",{parentName:"p"},"header")," (and its nested fields) when comparing ",Object(a.b)("inlineCode",{parentName:"p"},"report-A.json")," and ",Object(a.b)("inlineCode",{parentName:"p"},"report-B.json")," (but otherwise use ",Object(a.b)("a",l({parentName:"p"},{href:"#defaults-of-diff"}),"the defaults"),"):"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk diff --excludeProp header report-A.json report-B.json\n")),Object(a.b)("h5",null,"Example: Exclude Multiple Fields"),Object(a.b)("p",null,"To exclude fields ",Object(a.b)("inlineCode",{parentName:"p"},"header.commandLine")," (and its items) and ",Object(a.b)("inlineCode",{parentName:"p"},"header.cwd")," when comparing ",Object(a.b)("inlineCode",{parentName:"p"},"report-A.json")," and ",Object(a.b)("inlineCode",{parentName:"p"},"report-B.json")," (but otherwise use ",Object(a.b)("a",l({parentName:"p"},{href:"#defaults-of-diff"}),"the defaults"),"):"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk diff -x header.commandLine -x header.cwd report-A.json report-B.json\n")),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"--all")),Object(a.b)("p",null,"By default, ",Object(a.b)(s,{prop:"executable",mdxType:"Metadata"})," ",Object(a.b)("a",l({parentName:"p"},{href:"#defaults-of-diff"}),"excludes certain properties")," to reduce noise. Use ",Object(a.b)("inlineCode",{parentName:"p"},"--all")," if you would like to include the ",Object(a.b)("em",{parentName:"p"},"entire")," Diagnostic Report when comparing."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"--all")," cannot be used with ",Object(a.b)("inlineCode",{parentName:"p"},"--includeProp/-i")," or ",Object(a.b)("inlineCode",{parentName:"p"},"--excludeProp/-x"),"."),Object(a.b)("h5",null,"Example: Compare All Fields"),Object(a.b)("p",null,"To compare the entirety of ",Object(a.b)("inlineCode",{parentName:"p"},"report-A.json")," and ",Object(a.b)("inlineCode",{parentName:"p"},"report-B.json"),":"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk diff --all report-A.json report-B.json\n")),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"diff"),": Additional Options"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"diff")," supports the following common output options:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"#-output-lessfilegreater-o-lessfilegreater"}),Object(a.b)("inlineCode",{parentName:"a"},"--output"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"#-show-secrets-unsafe"}),Object(a.b)("inlineCode",{parentName:"a"},"--show-secrets-unsafe"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"#-transform-lesstransformergreater-t-lesstransformergreater"}),Object(a.b)("inlineCode",{parentName:"a"},"--transform")))),Object(a.b)("h2",null,"The ",Object(a.b)("inlineCode",{parentName:"h2"},"inspect")," Command"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"inspect")," command runs heuristics, called ",Object(a.b)("em",{parentName:"p"},"Rules"),", on one or more Diagnostic Reports. If a Rule finds a potential problem, it will output a message. Some messages may be warnings, and others may be purely informational."),Object(a.b)("p",null,"The purpose of ",Object(a.b)("inlineCode",{parentName:"p"},"inspect")," is to automate the discovery of potential problems in a Node.js process. These may range from runaway resource consumption, to nonstandard configuration, to hung event loops. If a developer can closely inspect a Diagnostic Report to uncover a problem, a Rule can automate this process. Also: developers like to automate things."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"inspect")," draws heavily from ",Object(a.b)("a",l({parentName:"p"},{href:"https://eslint.org"}),"ESLint"),". Like ESLint, ",Object(a.b)(s,{prop:"packageName",mdxType:"Metadata"})," ships with built-in Rules and a recommended configuration. Also like ESLint, developers can create and distribute their own Rules."),Object(a.b)("h3",null,"Basic Usage: ",Object(a.b)("inlineCode",{parentName:"h3"},"rtk inspect <file..>")),Object(a.b)("p",null,"To use ",Object(a.b)("inlineCode",{parentName:"p"},"inspect")," with the default “recommended” configuration:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk inspect report.json\n")),Object(a.b)("p",null,"To use ",Object(a.b)("inlineCode",{parentName:"p"},"inspect")," with the default “recommended” configuration across three (3) report files:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk inspect report-A.json report-B.json report-C.json\n")),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"inspect"),": Output Description"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"inspect"),"’s output contains four (4) fields:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Severity"),": The “severity” of a Message. One of the following, in decreasing order of severity:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"ERROR"),": The associated Message highlights an issue that ",Object(a.b)("em",{parentName:"li"},"should")," be investigated."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"WARNING"),": The associated Message highlights an issue that ",Object(a.b)("em",{parentName:"li"},"might")," need investigation."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"INFO"),": The associated Message is purely informational."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"File"),": The Diagnostic Report file referenced, or ",Object(a.b)("inlineCode",{parentName:"li"},"(multiple files)")," if the Message is aggregated from across multiple files."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Rule"),": The name (unique identifier) of the Rule which sent the Message."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Message"),": A human-readable explanation of the issue.")),Object(a.b)("p",null,"In the default, tabular output, the severities ",Object(a.b)("inlineCode",{parentName:"p"},"ERROR"),", ",Object(a.b)("inlineCode",{parentName:"p"},"WARNING")," and ",Object(a.b)("inlineCode",{parentName:"p"},"INFO")," will be respectively highlighted in red, yellow, and blue."),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"inspect"),": Defaults"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Output: a human-readable, ",Object(a.b)("strong",{parentName:"li"},"tabular view")," (in color, where available)"),Object(a.b)("li",{parentName:"ul"},"Secrets are ",Object(a.b)("strong",{parentName:"li"},"redacted")," from Diagnostic Reports ",Object(a.b)("em",{parentName:"li"},"before")," Rule execution"),Object(a.b)("li",{parentName:"ul"},"The minimum severity level is ",Object(a.b)("inlineCode",{parentName:"li"},"WARNING"),"; ",Object(a.b)("inlineCode",{parentName:"li"},"INFO")," messages will be suppressed."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("em",{parentName:"li"},"Without a configuration file")," present, the “recommended” set of Rules will be run:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"At the time of this writing, this is ",Object(a.b)("em",{parentName:"li"},"all built-in Rules"),"."),Object(a.b)("li",{parentName:"ul"},"Each Rule uses its default configuration."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("em",{parentName:"li"},"With a configuration file")," present, the Rules used and configurations thereof will be as declared by the configuration file.")),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"inspect"),": Options"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"inspect")," allows filtering of Messages by their ",Object(a.b)("em",{parentName:"p"},"severity"),"."),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"--severity <severity>")),Object(a.b)("p",null,"The minimum threshold for Message severity, as defined by ",Object(a.b)("inlineCode",{parentName:"p"},"severity"),". In other words, any Message with a severity “lower” than this will be suppressed."),Object(a.b)("p",null,"Allowed values for ",Object(a.b)("inlineCode",{parentName:"p"},"severity"),", in descending order of severity:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"ERROR")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"WARNING")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"INFO"))),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"severity")," argument is case-insensitive. The default ",Object(a.b)("inlineCode",{parentName:"p"},"severity")," is ",Object(a.b)("inlineCode",{parentName:"p"},"WARNING"),"."),Object(a.b)("h5",null,"Example: Inspect ",Object(a.b)("inlineCode",{parentName:"h5"},"report.json"),", Including “Info”, “Warning” and “Error”-severity Messages"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk inspect --severity info report.json\n")),Object(a.b)("h5",null,"Example: Inspect ",Object(a.b)("inlineCode",{parentName:"h5"},"report.json"),", Including Only “Error”-severity Messages"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk inspect --severity ERROR report.json\n")),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"inspect"),": Additional Options"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"inspect")," supports the following common output options:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"#-output-lessfilegreater-o-lessfilegreater"}),Object(a.b)("inlineCode",{parentName:"a"},"--output"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"#-show-secrets-unsafe"}),Object(a.b)("inlineCode",{parentName:"a"},"--show-secrets-unsafe"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"#-transform-lesstransformergreater-t-lesstransformergreater"}),Object(a.b)("inlineCode",{parentName:"a"},"--transform")))),Object(a.b)("h2",null,"The ",Object(a.b)("inlineCode",{parentName:"h2"},"redact")," Command"),Object(a.b)("p",null,"Node.js Diagnostic Reports contain the entirety of a process’ execution environment in the ",Object(a.b)("inlineCode",{parentName:"p"},"environmentVariables")," field."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"environmentVariables")," can contain things like API keys, tokens, and other secrets. It’s important to keep these secrets from ",Object(a.b)("em",{parentName:"p"},"leaking"),", and a Node.js Diagnostic Report is one potential source of leaks."),Object(a.b)(O,{kind:"warning",mdxType:"InlineNotification"},Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"redact")," command before transmitting a Node.js Diagnostic Report file anywhere!")),Object(a.b)("p",null,"When provided one or more report files, ",Object(a.b)("inlineCode",{parentName:"p"},"redact")," command ",Object(a.b)("em",{parentName:"p"},"redacts")," known secrets and secret-ish values from this field—while retaining the key name. Values are replaced with the string ",Object(a.b)("inlineCode",{parentName:"p"},"[REDACTED]"),"."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"redact")," command is essentially a ",Object(a.b)("em",{parentName:"p"},"shortcut")," for ",Object(a.b)("inlineCode",{parentName:"p"},"transform -t redact"),"."),Object(a.b)("h3",null,"Basic Usage: ",Object(a.b)("inlineCode",{parentName:"h3"},"rtk redact <file..>")),Object(a.b)("p",null,"This command will echo a redacted version of ",Object(a.b)("inlineCode",{parentName:"p"},"report.json")," to ",Object(a.b)("inlineCode",{parentName:"p"},"STDOUT"),":"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk redact report.json\n")),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"redact"),": Output Description"),Object(a.b)("p",null,"The output is the input—Node.js Diagnostic Reports—but with secrets redacted from the ",Object(a.b)("inlineCode",{parentName:"p"},"environmentVariables")," field."),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"redact"),": Defaults"),Object(a.b)("p",null,"The default behavior of ",Object(a.b)("inlineCode",{parentName:"p"},"redact")," is to output the same format which Node.js Diagnostic Report files use: pretty-printed JSON."),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"redact"),": Options"),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"--replace")),Object(a.b)("p",null,"Redacts file(s) ",Object(a.b)("em",{parentName:"p"},"in-place"),". In other words, this reads the file(s), redacts secrets, and overwrites them."),Object(a.b)("p",null,"When ",Object(a.b)("inlineCode",{parentName:"p"},"--replace")," is used, ",Object(a.b)("inlineCode",{parentName:"p"},"redact")," will not echo anything to ",Object(a.b)("inlineCode",{parentName:"p"},"STDOUT"),"."),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"redact"),": Additional Options"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"redact")," does ",Object(a.b)("em",{parentName:"p"},"not")," support transformers, and is limited to JSON output! If you need to use a transformer, use ",Object(a.b)("a",l({parentName:"p"},{href:"#the-transform-command"}),"the ",Object(a.b)("inlineCode",{parentName:"a"},"transform")," command")," instead (which redacts by default)."),Object(a.b)("p",null,"Since ",Object(a.b)("inlineCode",{parentName:"p"},"redact")," defaults to pretty-printed output, it supports ",Object(a.b)("a",l({parentName:"p"},{href:"#-pretty"}),Object(a.b)("inlineCode",{parentName:"a"},"--no-pretty")),"."),Object(a.b)("h2",null,"The ",Object(a.b)("inlineCode",{parentName:"h2"},"transform")," Command"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"transform")," converts a Node.js Diagnostic Report into a different format."),Object(a.b)("p",null,"While ",Object(a.b)("a",l({parentName:"p"},{href:"#-transform-lesstransformergreater-t-lesstransformergreater"}),Object(a.b)("inlineCode",{parentName:"a"},"--transform"))," can be used with the output of other commands, the ",Object(a.b)("inlineCode",{parentName:"p"},"transform")," command works ",Object(a.b)("em",{parentName:"p"},"directly")," on report files."),Object(a.b)("p",null,"As with any other command, reports will be redacted ",Object(a.b)("em",{parentName:"p"},"by default"),"."),Object(a.b)("h3",null,"Basic Usage: ",Object(a.b)("inlineCode",{parentName:"h3"},"rtk transform <file..>")),Object(a.b)("p",null,"To transform Node.js Diagnostic Report file ",Object(a.b)("inlineCode",{parentName:"p"},"report.json")," into ",Object(a.b)("em",{parentName:"p"},"non-pretty-printed")," (ugly?) JSON:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk transform report.json\n")),Object(a.b)("p",null,"The behavior of the below example is ",Object(a.b)("em",{parentName:"p"},"identical")," to ",Object(a.b)("inlineCode",{parentName:"p"},"rtk redact report.json"),":"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk transform --pretty report.json\n")),Object(a.b)("p",null,"Generally, you will use the ",Object(a.b)("a",l({parentName:"p"},{href:"#-transform-lesstransformergreater-t-lesstransformergreater"}),Object(a.b)("inlineCode",{parentName:"a"},"--transform <transformer>"))," option to change the transformer. Notably, the ",Object(a.b)("inlineCode",{parentName:"p"},"transform")," command works with ",Object(a.b)("em",{parentName:"p"},"any")," transformer."),Object(a.b)("p",null,"To transform Node.js Diagnostic Report file ",Object(a.b)("inlineCode",{parentName:"p"},"report.json")," into CSV (for reasons):"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk transform report.json -t csv\n")),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"transform"),": Output Description"),Object(a.b)("p",null,"The output of ",Object(a.b)("inlineCode",{parentName:"p"},"transform")," is based entirely on which transform(s) are used."),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"transform"),": Defaults"),Object(a.b)("p",null,"The default behavior of ",Object(a.b)("inlineCode",{parentName:"p"},"transform")," is to output the original Node.js Diagnostic Report file(s), redacted, and in compressed (non-pretty-printed) JSON format."),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"transform"),": Additional Options"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"transform")," supports the following common output options:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"#-output-lessfilegreater-o-lessfilegreater"}),Object(a.b)("inlineCode",{parentName:"a"},"--output"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"#-show-secrets-unsafe"}),Object(a.b)("inlineCode",{parentName:"a"},"--show-secrets-unsafe"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",l({parentName:"li"},{href:"#-transform-lesstransformergreater-t-lesstransformergreater"}),Object(a.b)("inlineCode",{parentName:"a"},"--transform")))),Object(a.b)("h2",null,"Common Output Options"),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Most")," of these options are available across ",Object(a.b)("em",{parentName:"p"},"most")," commands. Exceptions include:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("inlineCode",{parentName:"li"},"redact")," and ",Object(a.b)("inlineCode",{parentName:"li"},"transform")," commands do not allow ",Object(a.b)("inlineCode",{parentName:"li"},"-o"),", due to ambiguous behavior when given multiple files; use ",Object(a.b)("inlineCode",{parentName:"li"},"--replace")," instead."),Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("inlineCode",{parentName:"li"},"redact")," command doesn’t allow ",Object(a.b)("inlineCode",{parentName:"li"},"--show-secrets-unsafe"),", because that would be pointless.")),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"--output <file>, -o <file>")),Object(a.b)("p",null,"Redirect output to a file."),Object(a.b)("h4",null,"Example: Write Output of Comparison of ",Object(a.b)("inlineCode",{parentName:"h4"},"report-A.json")," and ",Object(a.b)("inlineCode",{parentName:"h4"},"report-B.json")," to File"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk diff report-A.json report-B.json -o diff-output.txt\n")),Object(a.b)("p",null,"The above is equivalent to the following in a POSIX shell:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk diff report-A.json report-B.json > diff-output.txt\n")),Object(a.b)("h4",null,"Example: Write Output of Comparison of ",Object(a.b)("inlineCode",{parentName:"h4"},"report-A.json")," and ",Object(a.b)("inlineCode",{parentName:"h4"},"report-B.json")," to File, in Pretty-Printed JSON Format"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk diff report-A.json report-B.json --transform json --pretty -o diff-output.json\n")),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"--show-secrets-unsafe")),Object(a.b)("p",null,"This will disable automatic redaction of secrets from the ",Object(a.b)("inlineCode",{parentName:"p"},"environmentVariables")," field."),Object(a.b)(O,{kind:"error",mdxType:"InlineNotification"},Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"--show-secrets-unsafe")," option is—as you may have guessed—",Object(a.b)("em",{parentName:"p"},"unsafe"),". Don’t use it unless you’re ",Object(a.b)("em",{parentName:"p"},"absolutely sure")," that you need to!")),Object(a.b)("h5",null,"Example: Disable Redacting of Secrets"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"# danger!\nrtk diff --show-secrets-unsafe report-A.json report-B.json\n")),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"--transform <transformer>, -t <transformer>")),Object(a.b)("p",null,"Transforms command output into various formats."),Object(a.b)("p",null,"This option can be repeated, creating a ",Object(a.b)("em",{parentName:"p"},"transformer chain"),". This works when the output of a transformer is valid input for a subsequent transformer. Note that each transformer can only be used ",Object(a.b)("em",{parentName:"p"},"once"),"."),Object(a.b)("p",null,"Allowed values of ",Object(a.b)("inlineCode",{parentName:"p"},"transformer"),":"),Object(a.b)("dl",{className:i.mono},Object(a.b)("dt",null,"csv"),Object(a.b)("dd",null,"CSV output; nested fields are expanded, so each field has its own column."),Object(a.b)("dt",null,"filter"),Object(a.b)("dd",null,Object(a.b)("p",null,"Filter the output by including/excluding fields. ",Object(a.b)("em",{parentName:"p"},"Only works with the ",Object(a.b)("a",l({parentName:"em"},{href:"#the-transform-command"}),Object(a.b)("inlineCode",{parentName:"a"},"transform"))," command"),".")),Object(a.b)("dt",null,"json"),Object(a.b)("dd",null,"JSON output"),Object(a.b)("dt",null,"newline"),Object(a.b)("dd",null,Object(a.b)("p",null,"Output in newline-delimited JSON format (A.K.A. ",Object(a.b)("inlineCode",{parentName:"p"},"ndjson")," and other aliases); useful for streams.")),Object(a.b)("dt",null,"stack-hash"),Object(a.b)("dd",null,Object(a.b)("p",null,"Takes a hash of the stack trace from the ",Object(a.b)("inlineCode",{parentName:"p"},"javascriptStack")," field, and outputs in a JSON format suitable for collection of metrics. ",Object(a.b)("em",{parentName:"p"},"Only works with the ",Object(a.b)("a",l({parentName:"em"},{href:"#the-transform-command"}),Object(a.b)("inlineCode",{parentName:"a"},"transform"))," command"),".")),Object(a.b)("dt",null,"table"),Object(a.b)("dd",null,"Output in colorful, human-readable tabular format ",Object(a.b)("em",null,"(default behavior)"),".")),Object(a.b)(O,{kind:"warning",mdxType:"InlineNotification"},Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Not all commands support all transformers!")," Please refer to the list of supported transformers as shown in ",Object(a.b)("inlineCode",{parentName:"p"},"rtk <command> --help"),".")),Object(a.b)("h5",null,"Example: Output Diff of ",Object(a.b)("inlineCode",{parentName:"h5"},"report-A.json")," and ",Object(a.b)("inlineCode",{parentName:"h5"},"report-B.json")," as CSV"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk diff -t csv report-A.json report-B.json\n")),Object(a.b)("h5",null,"Example: Output Inspection of ",Object(a.b)("inlineCode",{parentName:"h5"},"report.json")," as JSON"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk inspect -t json report.json\n")),Object(a.b)("h5",null,"Example: Output Diff of ",Object(a.b)("inlineCode",{parentName:"h5"},"report-A.json")," and ",Object(a.b)("inlineCode",{parentName:"h5"},"report-B.json")," as Newline-Delimited JSON"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk diff -t newline report-A.json report-B.json\n")),Object(a.b)("h5",null,"Example: Output Inspection of ",Object(a.b)("inlineCode",{parentName:"h5"},"report-A.json")," and ",Object(a.b)("inlineCode",{parentName:"h5"},"report-B.json")," in Tabular Format (Default)"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk inspect -t table report-A.json report-B.json\n")),Object(a.b)("p",null,"For further customization of transformer output, see ",Object(a.b)("a",l({parentName:"p"},{href:"#transformer-specific-options"}),"Transformer-Specific Options"),"."),Object(a.b)("h2",null,"Transformer-Specific Options"),Object(a.b)("p",null,"Transformers, when used either via the ",Object(a.b)("inlineCode",{parentName:"p"},"transform")," command, or the ",Object(a.b)("inlineCode",{parentName:"p"},"--transform / -t")," option, have their own options. These options ",Object(a.b)("em",{parentName:"p"},"only")," apply when the transformer in question is used."),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"json")," Transformer Options"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"json")," transformer has only one (1) option, ",Object(a.b)("a",l({parentName:"p"},{href:"#--pretty"}),Object(a.b)("inlineCode",{parentName:"a"},"--pretty")),"."),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"--pretty")),Object(a.b)("p",null,"Pretty-prints the JSON output. When used with ",Object(a.b)("inlineCode",{parentName:"p"},"diff"),", this defaults to ",Object(a.b)("inlineCode",{parentName:"p"},"false"),"."),Object(a.b)("h5",null,"Example: Output Inspection of ",Object(a.b)("inlineCode",{parentName:"h5"},"report.json")," as Pretty-Printed JSON"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk inspect -t json --pretty report.json\n")),Object(a.b)("h5",null,"Example: Redact and Output ",Object(a.b)("inlineCode",{parentName:"h5"},"report.json")," as Non-Pretty-Printed JSON"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk redact --no-pretty report.json\n")),Object(a.b)("h3",null,Object(a.b)("inlineCode",{parentName:"h3"},"table")," Transformer Options"),Object(a.b)("p",null,"These options allow tweaking of the tabular display."),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"--max-width <columns>")),Object(a.b)("p",null,"Sets the maximum width, ",Object(a.b)("inlineCode",{parentName:"p"},"columns"),", of the table output. By default, the table will stretch the length of the terminal. In a non-TTY situation, the default width will be 80 characters."),Object(a.b)("p",null,"If ",Object(a.b)("inlineCode",{parentName:"p"},"--no-truncate")," is used, this option will be ignored."),Object(a.b)("h5",null,"Example: Ouptut Diff of ",Object(a.b)("inlineCode",{parentName:"h5"},"report-A.json")," and ",Object(a.b)("inlineCode",{parentName:"h5"},"report-B.json")," in Tabular Format, With a Max Table Width of 72 Characters"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk diff -t table --max-width 72 report-A.json report-B.json\n")),Object(a.b)("h4",null,Object(a.b)("inlineCode",{parentName:"h4"},"--truncate")),Object(a.b)("p",null,"Truncate the values displayed in the table to fit the columns. This is enabled by default, as certain fields (e.g., ",Object(a.b)("inlineCode",{parentName:"p"},"environmentVariables.PATH"),") are likely to be very long."),Object(a.b)("h5",null,"Example: Output Inspection of ",Object(a.b)("inlineCode",{parentName:"h5"},"report.json")," in Tabular Format, Without Truncating Values"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-bash"}),"rtk inspect -t table --no-truncate report.json\n")))}N.isMDXComponent=!0},pEPl:function(e){e.exports=JSON.parse('{"data":{"site":{"id":"Site","siteMetadata":{"repository":{"baseUrl":"https://github.com/IBM/report-toolkit","subDirectory":"packages/docs","branch":"master"}}}}}')},pOBw:function(e){e.exports=JSON.parse('{"data":{"site":{"id":"Site","pathPrefix":"/report-toolkit"}}}')}}]);
//# sourceMappingURL=component---src-pages-cli-index-mdx-42a042e8cd494c473e33.js.map