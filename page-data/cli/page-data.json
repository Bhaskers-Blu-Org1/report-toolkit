{"componentChunkName":"component---src-pages-cli-index-mdx","path":"/cli/","result":{"pageContext":{"frontmatter":{"title":"report-toolkit Command-Line Usage"},"relativePagePath":"/cli/index.mdx","titleType":"append","MdxNode":{"id":"26e130d5-5a13-5116-b358-d6cc91a0dcb2","children":[],"parent":"bf5d09f0-9dd1-5ae6-a066-c7079fa32559","internal":{"content":"---\ntitle: report-toolkit Command-Line Usage\n---\n\nimport {panel} from 'gatsby-theme-carbon/src/components/Tabs/Tabs.module.scss';\nimport {InlineCode} from '../../components';\nimport {doDontCode, mono} from './index.module.scss';\nimport {Examples, Example} from '../../components/examples.js';\n\n<!-- note: if your paragraph contains markdown, it must start with markdown; this is\nwhy we see strong (`**`) in some places where otherwise it would not be needed -->\n\n<PageDescription>\n\n**<Metadata prop=\"packageName\"/>** provides a command-line utility, <Metadata prop=\"executable\"/>. This usage documentation provides detailed descriptions of all _commands_ and options for <Metadata prop=\"executable\"/>.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>General Usage Guidelines</AnchorLink>\n  <AnchorLink>Global Options</AnchorLink>\n  <AnchorLink to=\"#the-diff-command\">\n    The <InlineCode>diff</InlineCode> Command\n  </AnchorLink>\n  <AnchorLink to=\"#the-inspect-command\">\n    The <InlineCode>inspect</InlineCode> Command\n  </AnchorLink>\n  <AnchorLink to=\"#the-list-rules-command\">\n    The <InlineCode>list-rules</InlineCode> Command\n  </AnchorLink>\n  <AnchorLink to=\"#the-redact-command\">\n    The <InlineCode>redact</InlineCode> Command\n  </AnchorLink>\n  <AnchorLink to=\"#the-transform-command\">\n    The <InlineCode>transform</InlineCode> Command\n  </AnchorLink>\n</AnchorLinks>\n\n## General Usage Guidelines\n\n### <Metadata prop=\"executable\"/> Requires a Command\n\nYou must supply a _command_ to <Metadata prop=\"executable\"/>. A _single_ command must immediately follow the <Metadata prop=\"executable\"/> executable.\n\n<DoDontRow>\n  <DoDont\n    type=\"do\"\n    color=\"dark\"\n    captionTitle=\"Correct Usage\"\n    caption=\"Command is first argument\"\n    text=\"rtk redact report-file.json\"\n    className={doDontCode}\n  />\n  <DoDont\n    type=\"dont\"\n    color=\"dark\"\n    captionTitle=\"Incorrect Usage\"\n    caption=\"Command in wrong position\"\n    text=\"rtk report-file.json redact\"\n    className={doDontCode}\n  />\n</DoDontRow>\n\n### Available Commands\n\nThe command must be one of the following:\n\n- [`diff`](#the-diff-command)\n- [`inspect`](#the-inspect-command)\n- [`list-rules`](#the-list-rules-command)\n- [`redact`](#the-redact-command)\n- [`transform`](#the-transform-command)\n\n## Global Options\n\n_Global options_ can be used by themselves, or in tandem with _any_ command.\n\n### `--rc </path/to/.rtkrc.js>`\n\nSupply an explicit path to a <Metadata prop=\"packageName\"/> config file.\n\nBy default, <Metadata prop=\"executable\"/> will search for an `.rtkrc.js` (or `rtk.config.js`) in the current working directory, then search parent directories to the filesystem root or home directory, whichever comes first.\n\n<InlineNotification kind=\"warning\">\n\nAs of _v0.3.0_, <Metadata prop=\"packageName\"/> only supports `.js` scripts using CommonJS exports (`module.exports = ...`).  JSON and YAML are explicitly *not* supported (for reasons).\n\n</InlineNotification>\n\n<Examples>\n  <Example title={\"Run `inspect` Using a Specific Config File\"}>\n\n```bash\nrtk --rc my-config.js inspect report-A.json \n```\n\n  </Example>\n</Examples>\n\nRead more about [configuration (TODO)]().\n\n### `--debug` / `--verbose`\n\nEnables debug output. `--verbose` is an alias of `--debug`; their behavior is identical.\n\nThis can be noisy.\n\nUsing `--debug` is equivalent to setting the environment variable `DEBUG=rtk*`. Further granularity can be achieved by appending package or module name(s) separated by colons, e.g., `DEBUG=rtk:cli*` will show all debug output from the [CLI package](https://github.com/IBM/report-toolkit/tree/master/packages/cli).  Package names follow a pattern of `rtk:<package name>[:..submodule name or path]`.  \n\n<InlineNotification kind=\"info\">\n\nSee the documentation of the [debug](https://github.com/visionmedia/debug#readme) package for more about controlling its behavior via the `DEBUG` environment variable.\n\n</InlineNotification>\n\n### `--help`\n\n<p>Displays help text then exits.  `--help` can be used by itself (to see global options and the list of commands), or combined with any command.  For example: <InlineCode><Metadata prop=\"executable\"/> diff --help</InlineCode>.</p>\n\n### `--version`\n\nOutputs the version of <Metadata prop=\"executable\"/> to `STDOUT` then exits.\n\n## The `diff` Command\n\nThe `diff` command outputs the _difference_ between two (2) Diagnostic Report files.  This is a purpose-built \"diff\".\n\n### Basic Usage of `diff`\n\nTo use `diff` with the [defaults](#defaults-of-diff):\n\n```bash\nrtk diff report-a.json report-b.json\n```\n\n### Defaults of `diff`\n\n<p>This section describes the default behavior of <InlineCode><Metadata prop=\"executable\"/> diff</InlineCode>.</p>\n\n- Output: a human-readable, **tabular view** (in color, where available)\n- Secrets are **redacted** from Diagnostic Reports _before_ comparison\n- To increase the signal-to-noise ratio, `diff` **includes only this following set of fields**:\n  - `header`\n  - `environmentVariables`\n  - `userLimits`\n  - `sharedObejcts`\n  - `libuv`\n- Furthermore, these nested fields are **excluded from the `header` field**:\n  - `header.filename`\n  - `header.dumpEventTime`\n  - `header.dumpEventTimeStamp`\n  - `header.cpus`\n\n### Filtering with `diff`\n\n<p>This group of options allows the user to fine-tune which fields (properties) <InlineCode><Metadata prop=\"executable\"/> diff</InlineCode> considers when comparing Diagnostic Reports.</p>\n\n<InlineNotification kind=\"warning\">\n\nWhen using these options, please note that _exclusion_ of fields **takes precedence** over _inclusion_ of fields.  In other words: include fields _first_, _then_ exclude from your list. In this way, you can include a top level field (like `header`), then exclude a nested field (like `header.processId`).\n\n</InlineNotification>\n\n#### `--includeProp <field>, -i <field>`\n\nExplicitly _include_ one or more fields in the comparison.  If this option is used, <Metadata prop=\"executable\"/> will _only_ consider the field(s) specified (and any nested fields or array items).\n\nThis option can be used multiple times.\n\n##### Example: Include a Single Field\n\nTo _only_ compare field `header` (and its nested fields) when comparing `report-A.json` and `report-B.json`:\n\n```bash\nrtk diff --includeProp header report-A.json report-B.json\n```\n\n##### Example: Include Multiple fields\n\nTo _only_ compare fields `header.commandLine` (and its items) and `header.cwd` when comparing `report-A.json` and `report-B.json`:\n\n```bash\nrtk diff -i header.commandLine -i header.cwd report-A.json report-B.json\n```\n\n#### `--excludeProp <field>, -x <field>`\n\nExplicitly _exclude_ one or more fields in the comparison.  If this option is used, <Metadata prop=\"executable\"/> will consider the [defaults](#defaults-of-diff), then further exclude the specified fields.\n\nThis option can be used multiple times.\n\n##### Example: Exclude a Single Field\n\nTo exclude field `header` (and its nested fields) when comparing `report-A.json` and `report-B.json` (but otherwise use [the defaults](#defaults-of-diff)):\n\n```bash\nrtk diff --excludeProp header report-A.json report-B.json\n```\n\n##### Example: Exclude Multiple Fields\n\nTo exclude fields `header.commandLine` (and its items) and `header.cwd` when comparing `report-A.json` and `report-B.json` (but otherwise use [the defaults](#defaults-of-diff)):\n\n```bash\nrtk diff -x header.commandLine -x header.cwd report-A.json report-B.json\n```\n\n#### `--all`\n\nBy default, <Metadata prop=\"executable\"/> [excludes certain properties](#defaults-of-diff) to reduce noise.  Use `--all` if you would like to include the _entire_ Diagnostic Report when comparing.\n\n`--all` cannot be used with `--includeProp/-i` or `--excludeProp/-x`.\n\n##### Example: Compare All Fields\n\nTo compare the entirety of `report-A.json` and `report-B.json`:\n\n```bash\nrtk diff --all report-A.json report-B.json\n```\n\n* * *\n\n#### Controlling the Output of `diff`\n\n<p>This section describes options for controlling <InlineCode><Metadata prop=\"executable\"/> diff</InlineCode>'s output.</p>\n\nWhile the [section on filtering](#filtering-with-diff) shows how to choose what goes \"in\" to the comparison, this section shows how to choose what comes \"out\"--and where it goes.\n\n#### `--color` / `--no-color`\n\nColor output is enabled [by default](#defaults-of-diff) when a TTY is available.  If there is no TTY (like in a subprocess, or when piped), specify `--color` to force color.\n\n<InlineNotification kind=\"warning\">\n\nSome transformations do not support color output (e.g., `csv`), and `--color` will be ignored.  In <Metadata prop=\"executable\"/>, color is intended for human-readable output.\n\n</InlineNotification>\n\n##### Example: Force Color Output\n\nTo **force color** output when comparing `report-A.json` and `report-B.json`:\n\n```bash\nrtk diff --color report-A.json report-B.json\n```\n\n##### Example: Disable Color Output\n\nTo **disable color** output when comparing `report-A.json` and `report-B.json`:\n\n```bash\nrtk diff --no-color report-A.json report-B.json\n```\n\n#### `--show-secrets-unsafe`\n\nThis will disable automatic redaction of secrets from the `environmentVariables` field.\n\n<InlineNotification kind=\"error\">\n\nThe `--show-secrets-unsafe` option is--as you may have guessed--_unsafe_.  Don't use it.\n\n</InlineNotification>\n\n##### Example: Disable Redacting of Secrets\n\nTo **dangerously inhibit redaction of environment variables** when comparing `report-A.json` and `report-B.json`:\n\n```bash\nrtk diff --show-secrets-unsafe report-A.json report-B.json\n```\n\n#### `--transform <transformer>, -t <transformer>`\n\nTransforms `diff` output into various formats.  \n\nThis option can be repeated, creating a _transformer chain_. This works when the output of a transformer is valid input for a subsequent transformer.  Note that each transformer can only be used _once_.\n\nAllowed values of `transformer`:\n\n<dl className={mono}>\n  <dt>csv</dt>\n  <dd>CSV output; nested fields are expanded, so each field has its own column</dd>\n  <dt>filter</dt>\n  <dd>\n\nOutput a set of fields (see [`filter` transformer options]() for more information)\n\n  </dd>\n  <dt>json</dt>\n  <dd>\n\nOutput in JSON format (see [`json` transformer options]() for more information)\n\n  </dd>\n  <dt>newline</dt>\n  <dd>\n\nOutput in newline-delimited JSON format (otherwise known as `ndjson`); useful for streaming\n\n</dd>\n  <dt>numeric</dt>\n  <dd>Only output numeric values (useful for pipes)</dd>\n  <dt>table</dt>\n  <dd>Output in colorful, human-readable tabular format <em>(default behavior)</em></dd>\n</dl>\n\n\n##### Example: Output Diff of `report-A.json` and `report-B.json` as CSV\n\n```bash\nrtk diff -t csv report-A.json report-B.json\n```\n\n##### Example: Output Diff of `report-A.json` and `report-B.json` as CSV, Containing Only Fields Which Differ\n\n```bash\nrtk diff -t filter --include field -t csv report-A.json \\\nreport-B.json\n```\n\n##### Example: Output Diff of `report-A.json` and `report-B.json` as JSON\n\n```bash\nrtk diff -t json report-A.json report-B.json\n```\n\n##### Example: Output Diff of `report-A.json` and `report-B.json` as Pretty-Printed JSON\n\n```bash\nrtk diff -t json --pretty report-A.json report-B.json\n```\n\n##### Example: Output Diff of `report-A.json` and `report-B.json` as Newline-Delimited JSON\n\n```bash\nrtk diff -t newline --pretty report-A.json report-B.json\n```\n\n##### Example:\n","type":"Mdx","contentDigest":"c01d7f6ddc11a9c209a724d0b38ca877","counter":103,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"report-toolkit Command-Line Usage"},"exports":{},"rawBody":"---\ntitle: report-toolkit Command-Line Usage\n---\n\nimport {panel} from 'gatsby-theme-carbon/src/components/Tabs/Tabs.module.scss';\nimport {InlineCode} from '../../components';\nimport {doDontCode, mono} from './index.module.scss';\nimport {Examples, Example} from '../../components/examples.js';\n\n<!-- note: if your paragraph contains markdown, it must start with markdown; this is\nwhy we see strong (`**`) in some places where otherwise it would not be needed -->\n\n<PageDescription>\n\n**<Metadata prop=\"packageName\"/>** provides a command-line utility, <Metadata prop=\"executable\"/>. This usage documentation provides detailed descriptions of all _commands_ and options for <Metadata prop=\"executable\"/>.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>General Usage Guidelines</AnchorLink>\n  <AnchorLink>Global Options</AnchorLink>\n  <AnchorLink to=\"#the-diff-command\">\n    The <InlineCode>diff</InlineCode> Command\n  </AnchorLink>\n  <AnchorLink to=\"#the-inspect-command\">\n    The <InlineCode>inspect</InlineCode> Command\n  </AnchorLink>\n  <AnchorLink to=\"#the-list-rules-command\">\n    The <InlineCode>list-rules</InlineCode> Command\n  </AnchorLink>\n  <AnchorLink to=\"#the-redact-command\">\n    The <InlineCode>redact</InlineCode> Command\n  </AnchorLink>\n  <AnchorLink to=\"#the-transform-command\">\n    The <InlineCode>transform</InlineCode> Command\n  </AnchorLink>\n</AnchorLinks>\n\n## General Usage Guidelines\n\n### <Metadata prop=\"executable\"/> Requires a Command\n\nYou must supply a _command_ to <Metadata prop=\"executable\"/>. A _single_ command must immediately follow the <Metadata prop=\"executable\"/> executable.\n\n<DoDontRow>\n  <DoDont\n    type=\"do\"\n    color=\"dark\"\n    captionTitle=\"Correct Usage\"\n    caption=\"Command is first argument\"\n    text=\"rtk redact report-file.json\"\n    className={doDontCode}\n  />\n  <DoDont\n    type=\"dont\"\n    color=\"dark\"\n    captionTitle=\"Incorrect Usage\"\n    caption=\"Command in wrong position\"\n    text=\"rtk report-file.json redact\"\n    className={doDontCode}\n  />\n</DoDontRow>\n\n### Available Commands\n\nThe command must be one of the following:\n\n- [`diff`](#the-diff-command)\n- [`inspect`](#the-inspect-command)\n- [`list-rules`](#the-list-rules-command)\n- [`redact`](#the-redact-command)\n- [`transform`](#the-transform-command)\n\n## Global Options\n\n_Global options_ can be used by themselves, or in tandem with _any_ command.\n\n### `--rc </path/to/.rtkrc.js>`\n\nSupply an explicit path to a <Metadata prop=\"packageName\"/> config file.\n\nBy default, <Metadata prop=\"executable\"/> will search for an `.rtkrc.js` (or `rtk.config.js`) in the current working directory, then search parent directories to the filesystem root or home directory, whichever comes first.\n\n<InlineNotification kind=\"warning\">\n\nAs of _v0.3.0_, <Metadata prop=\"packageName\"/> only supports `.js` scripts using CommonJS exports (`module.exports = ...`).  JSON and YAML are explicitly *not* supported (for reasons).\n\n</InlineNotification>\n\n<Examples>\n  <Example title={\"Run `inspect` Using a Specific Config File\"}>\n\n```bash\nrtk --rc my-config.js inspect report-A.json \n```\n\n  </Example>\n</Examples>\n\nRead more about [configuration (TODO)]().\n\n### `--debug` / `--verbose`\n\nEnables debug output. `--verbose` is an alias of `--debug`; their behavior is identical.\n\nThis can be noisy.\n\nUsing `--debug` is equivalent to setting the environment variable `DEBUG=rtk*`. Further granularity can be achieved by appending package or module name(s) separated by colons, e.g., `DEBUG=rtk:cli*` will show all debug output from the [CLI package](https://github.com/IBM/report-toolkit/tree/master/packages/cli).  Package names follow a pattern of `rtk:<package name>[:..submodule name or path]`.  \n\n<InlineNotification kind=\"info\">\n\nSee the documentation of the [debug](https://github.com/visionmedia/debug#readme) package for more about controlling its behavior via the `DEBUG` environment variable.\n\n</InlineNotification>\n\n### `--help`\n\n<p>Displays help text then exits.  `--help` can be used by itself (to see global options and the list of commands), or combined with any command.  For example: <InlineCode><Metadata prop=\"executable\"/> diff --help</InlineCode>.</p>\n\n### `--version`\n\nOutputs the version of <Metadata prop=\"executable\"/> to `STDOUT` then exits.\n\n## The `diff` Command\n\nThe `diff` command outputs the _difference_ between two (2) Diagnostic Report files.  This is a purpose-built \"diff\".\n\n### Basic Usage of `diff`\n\nTo use `diff` with the [defaults](#defaults-of-diff):\n\n```bash\nrtk diff report-a.json report-b.json\n```\n\n### Defaults of `diff`\n\n<p>This section describes the default behavior of <InlineCode><Metadata prop=\"executable\"/> diff</InlineCode>.</p>\n\n- Output: a human-readable, **tabular view** (in color, where available)\n- Secrets are **redacted** from Diagnostic Reports _before_ comparison\n- To increase the signal-to-noise ratio, `diff` **includes only this following set of fields**:\n  - `header`\n  - `environmentVariables`\n  - `userLimits`\n  - `sharedObejcts`\n  - `libuv`\n- Furthermore, these nested fields are **excluded from the `header` field**:\n  - `header.filename`\n  - `header.dumpEventTime`\n  - `header.dumpEventTimeStamp`\n  - `header.cpus`\n\n### Filtering with `diff`\n\n<p>This group of options allows the user to fine-tune which fields (properties) <InlineCode><Metadata prop=\"executable\"/> diff</InlineCode> considers when comparing Diagnostic Reports.</p>\n\n<InlineNotification kind=\"warning\">\n\nWhen using these options, please note that _exclusion_ of fields **takes precedence** over _inclusion_ of fields.  In other words: include fields _first_, _then_ exclude from your list. In this way, you can include a top level field (like `header`), then exclude a nested field (like `header.processId`).\n\n</InlineNotification>\n\n#### `--includeProp <field>, -i <field>`\n\nExplicitly _include_ one or more fields in the comparison.  If this option is used, <Metadata prop=\"executable\"/> will _only_ consider the field(s) specified (and any nested fields or array items).\n\nThis option can be used multiple times.\n\n##### Example: Include a Single Field\n\nTo _only_ compare field `header` (and its nested fields) when comparing `report-A.json` and `report-B.json`:\n\n```bash\nrtk diff --includeProp header report-A.json report-B.json\n```\n\n##### Example: Include Multiple fields\n\nTo _only_ compare fields `header.commandLine` (and its items) and `header.cwd` when comparing `report-A.json` and `report-B.json`:\n\n```bash\nrtk diff -i header.commandLine -i header.cwd report-A.json report-B.json\n```\n\n#### `--excludeProp <field>, -x <field>`\n\nExplicitly _exclude_ one or more fields in the comparison.  If this option is used, <Metadata prop=\"executable\"/> will consider the [defaults](#defaults-of-diff), then further exclude the specified fields.\n\nThis option can be used multiple times.\n\n##### Example: Exclude a Single Field\n\nTo exclude field `header` (and its nested fields) when comparing `report-A.json` and `report-B.json` (but otherwise use [the defaults](#defaults-of-diff)):\n\n```bash\nrtk diff --excludeProp header report-A.json report-B.json\n```\n\n##### Example: Exclude Multiple Fields\n\nTo exclude fields `header.commandLine` (and its items) and `header.cwd` when comparing `report-A.json` and `report-B.json` (but otherwise use [the defaults](#defaults-of-diff)):\n\n```bash\nrtk diff -x header.commandLine -x header.cwd report-A.json report-B.json\n```\n\n#### `--all`\n\nBy default, <Metadata prop=\"executable\"/> [excludes certain properties](#defaults-of-diff) to reduce noise.  Use `--all` if you would like to include the _entire_ Diagnostic Report when comparing.\n\n`--all` cannot be used with `--includeProp/-i` or `--excludeProp/-x`.\n\n##### Example: Compare All Fields\n\nTo compare the entirety of `report-A.json` and `report-B.json`:\n\n```bash\nrtk diff --all report-A.json report-B.json\n```\n\n* * *\n\n#### Controlling the Output of `diff`\n\n<p>This section describes options for controlling <InlineCode><Metadata prop=\"executable\"/> diff</InlineCode>'s output.</p>\n\nWhile the [section on filtering](#filtering-with-diff) shows how to choose what goes \"in\" to the comparison, this section shows how to choose what comes \"out\"--and where it goes.\n\n#### `--color` / `--no-color`\n\nColor output is enabled [by default](#defaults-of-diff) when a TTY is available.  If there is no TTY (like in a subprocess, or when piped), specify `--color` to force color.\n\n<InlineNotification kind=\"warning\">\n\nSome transformations do not support color output (e.g., `csv`), and `--color` will be ignored.  In <Metadata prop=\"executable\"/>, color is intended for human-readable output.\n\n</InlineNotification>\n\n##### Example: Force Color Output\n\nTo **force color** output when comparing `report-A.json` and `report-B.json`:\n\n```bash\nrtk diff --color report-A.json report-B.json\n```\n\n##### Example: Disable Color Output\n\nTo **disable color** output when comparing `report-A.json` and `report-B.json`:\n\n```bash\nrtk diff --no-color report-A.json report-B.json\n```\n\n#### `--show-secrets-unsafe`\n\nThis will disable automatic redaction of secrets from the `environmentVariables` field.\n\n<InlineNotification kind=\"error\">\n\nThe `--show-secrets-unsafe` option is--as you may have guessed--_unsafe_.  Don't use it.\n\n</InlineNotification>\n\n##### Example: Disable Redacting of Secrets\n\nTo **dangerously inhibit redaction of environment variables** when comparing `report-A.json` and `report-B.json`:\n\n```bash\nrtk diff --show-secrets-unsafe report-A.json report-B.json\n```\n\n#### `--transform <transformer>, -t <transformer>`\n\nTransforms `diff` output into various formats.  \n\nThis option can be repeated, creating a _transformer chain_. This works when the output of a transformer is valid input for a subsequent transformer.  Note that each transformer can only be used _once_.\n\nAllowed values of `transformer`:\n\n<dl className={mono}>\n  <dt>csv</dt>\n  <dd>CSV output; nested fields are expanded, so each field has its own column</dd>\n  <dt>filter</dt>\n  <dd>\n\nOutput a set of fields (see [`filter` transformer options]() for more information)\n\n  </dd>\n  <dt>json</dt>\n  <dd>\n\nOutput in JSON format (see [`json` transformer options]() for more information)\n\n  </dd>\n  <dt>newline</dt>\n  <dd>\n\nOutput in newline-delimited JSON format (otherwise known as `ndjson`); useful for streaming\n\n</dd>\n  <dt>numeric</dt>\n  <dd>Only output numeric values (useful for pipes)</dd>\n  <dt>table</dt>\n  <dd>Output in colorful, human-readable tabular format <em>(default behavior)</em></dd>\n</dl>\n\n\n##### Example: Output Diff of `report-A.json` and `report-B.json` as CSV\n\n```bash\nrtk diff -t csv report-A.json report-B.json\n```\n\n##### Example: Output Diff of `report-A.json` and `report-B.json` as CSV, Containing Only Fields Which Differ\n\n```bash\nrtk diff -t filter --include field -t csv report-A.json \\\nreport-B.json\n```\n\n##### Example: Output Diff of `report-A.json` and `report-B.json` as JSON\n\n```bash\nrtk diff -t json report-A.json report-B.json\n```\n\n##### Example: Output Diff of `report-A.json` and `report-B.json` as Pretty-Printed JSON\n\n```bash\nrtk diff -t json --pretty report-A.json report-B.json\n```\n\n##### Example: Output Diff of `report-A.json` and `report-B.json` as Newline-Delimited JSON\n\n```bash\nrtk diff -t newline --pretty report-A.json report-B.json\n```\n\n##### Example:\n","fileAbsolutePath":"/Users/boneskull/projects/boneskull/report-toolkit/packages/docs/src/pages/cli/index.mdx"}}}}