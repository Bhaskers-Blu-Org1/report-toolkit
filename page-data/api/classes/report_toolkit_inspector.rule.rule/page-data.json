{"componentChunkName":"component---src-pages-api-classes-report-toolkit-inspector-rule-rule-mdx","path":"/api/classes/report_toolkit_inspector.rule.rule/","webpackCompilationHash":"55ab1a93e28661290c30","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Rule"},"relativePagePath":"/api/classes/report_toolkit_inspector.rule.rule.mdx","titleType":"append","MdxNode":{"id":"d1fe3e1d-b587-5dad-8cfa-73997d05183e","children":[],"parent":"2d04637f-d78e-59a8-b9d9-cd6a40c14ebd","internal":{"content":"---\ntitle: \"Rule\"\n---\n\n<Breadcrumb noTrailingSlash>\n<BreadcrumbItem><a href=\"../home\">report-toolkit API</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"../modules/report_toolkit_inspector\">@report-toolkit/inspector</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"../modules/report_toolkit_inspector.rule\">rule</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"report_toolkit_inspector.rule.rule\">Rule</a></BreadcrumbItem>\n</Breadcrumb>\n\nA Rule which can be matched against a Context\n\n## Hierarchy\n\n* **Rule**\n\n## Constructors\n\n### constructor\n\n\\+ **new Rule**(`ruleDef`: [RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition)): *[Rule](report_toolkit_inspector.rule.rule)*\n\nApplies defaults, assigns some metadata.\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`ruleDef` | [RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition) |   |\n\n**Returns:** *[Rule](report_toolkit_inspector.rule.rule)*\n\n## Accessors\n\n### description\n\n• **get description**(): *any*\n\n**Returns:** *any*\n\n___\n\n### id\n\n• **get id**(): *any*\n\n**Returns:** *any*\n\n___\n\n### meta\n\n• **get meta**(): *any*\n\n**Returns:** *any*\n\n___\n\n### schema\n\n• **get schema**(): *any*\n\n**Returns:** *any*\n\n___\n\n### url\n\n• **get url**(): *any*\n\n**Returns:** *any*\n\n___\n\n### validate\n\n• **get validate**(): *Function*\n\nLazily-created function which validates the schema itself when first\nreferenced, creates a config-validation function, caches it, then asserts\nany user-supplied config is valid using said function.\n\n**`throws`** If user-supplied config is invalid.\n\n**Returns:** *Function*\n\n## Methods\n\n### handlers\n\n▸ **handlers**(`config?`: any): *Promise‹any›*\n\nCalls the `inspect()` function of a Rule impl, which will return one or\nmore \"handler\" functions. Note `inspect()` might return a `Promise` which\nresolves to the \"handler\" functions.\n\n**Parameters:**\n\nName | Type |\n------ | ------ |\n`config?` | any |\n\n**Returns:** *Promise‹any›*\n\n___\n\n### inspect\n\n▸ **inspect**(`__namedParameters`: object): *Observable‹[Message](report_toolkit_inspector.message.message)›*\n\nGiven a stream of Report objects and an optional configuration, execute the\n`inspect()` function of the rule definition, which should return a \"next\"\nhandler function, or an object having handler function props `next` and\n`complete`.\n1. Normalize the result of the `inspect()` so we can make assumptions about\n   the shape of the returned value.\n2. For each `Report` (`report`), run the `next` handler as if it returned\n   a `Promise`. This handler is passed the `report`, and any `Error`s\n   thrown are trapped. The handler may return a string (\"message\"), a\n   partial `Message` object, `Array` thereof, or a `Promise` resolving to\n   any of that stuff, or just `undefined` in the case of \"nothing to\n   mention\"\n3. Return values are correlated with the filepath of the report. Note that\n   `Report` objects may not *have* a filepath if they were not loaded from\n   file.\n4. Once all `Report`s have passed through the `next` handler, call the\n   `complete` handler.  It receives no `report`, and can be used in tandem\n   with `next` to perform aggregation. Supports the same return values as\n   `next`\n5. Finally, filter out empty/falsy partial `Message`s (e.g., those without\n   actual `string` `message` props), and normalize the `Message` by adding\n   relevant metadata (`Rule` ID, user-supplied config used, default\n   severity, etc.)\n\n**Parameters:**\n\n▪ **__namedParameters**: *object*\n\nName | Type |\n------ | ------ |\n`config` | any |\n`reports` | Observable‹[Report](report_toolkit_common.report.report)‹›› |\n\n**Returns:** *Observable‹[Message](report_toolkit_inspector.message.message)›*\n\n___\n\n### toRuleConfig\n\n▸ **toRuleConfig**(`config`: any): *[RuleConfig](report_toolkit_inspector.rule_config.ruleconfig)*\n\n**Parameters:**\n\nName | Type |\n------ | ------ |\n`config` | any |\n\n**Returns:** *[RuleConfig](report_toolkit_inspector.rule_config.ruleconfig)*\n\n___\n\n### `Static` applyDefaults\n\n▸ **applyDefaults**(`ruleDef`: Partial‹[RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition)›): *[RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition)*\n\nApplies defaults to a rule definition during `Rule` construction.\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`ruleDef` | Partial‹[RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition)› | Raw rule definition |\n\n**Returns:** *[RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition)*\n\n___\n\n### `Static` create\n\n▸ **create**(`ruleDefinition`: [RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition)): *[Rule](report_toolkit_inspector.rule.rule)*\n\nCreates a `Rule` from a user-defined (or builtin) `RuleDefinition`, which\nis the exports of a rule definition file.\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`ruleDefinition` | [RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition) | Rule definition |\n\n**Returns:** *[Rule](report_toolkit_inspector.rule.rule)*\n\nNew rule\n\n___\n\n### `Static` normalizeHandler\n\n▸ **normalizeHandler**(): *function*\n\nOperator.  Given a \"handler\" (returned by the rule definition's `inspect`\nfunction), normalize it into an object (since it may be just a function)\n\n**Returns:** *function*\n\n▸ (`observable`: any): *any*\n\n**Parameters:**\n\nName | Type |\n------ | ------ |\n`observable` | any |\n\n","type":"Mdx","contentDigest":"a60c7a8cea9920d81395e78821636be8","counter":417,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Rule"},"exports":{},"rawBody":"---\ntitle: \"Rule\"\n---\n\n<Breadcrumb noTrailingSlash>\n<BreadcrumbItem><a href=\"../home\">report-toolkit API</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"../modules/report_toolkit_inspector\">@report-toolkit/inspector</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"../modules/report_toolkit_inspector.rule\">rule</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"report_toolkit_inspector.rule.rule\">Rule</a></BreadcrumbItem>\n</Breadcrumb>\n\nA Rule which can be matched against a Context\n\n## Hierarchy\n\n* **Rule**\n\n## Constructors\n\n### constructor\n\n\\+ **new Rule**(`ruleDef`: [RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition)): *[Rule](report_toolkit_inspector.rule.rule)*\n\nApplies defaults, assigns some metadata.\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`ruleDef` | [RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition) |   |\n\n**Returns:** *[Rule](report_toolkit_inspector.rule.rule)*\n\n## Accessors\n\n### description\n\n• **get description**(): *any*\n\n**Returns:** *any*\n\n___\n\n### id\n\n• **get id**(): *any*\n\n**Returns:** *any*\n\n___\n\n### meta\n\n• **get meta**(): *any*\n\n**Returns:** *any*\n\n___\n\n### schema\n\n• **get schema**(): *any*\n\n**Returns:** *any*\n\n___\n\n### url\n\n• **get url**(): *any*\n\n**Returns:** *any*\n\n___\n\n### validate\n\n• **get validate**(): *Function*\n\nLazily-created function which validates the schema itself when first\nreferenced, creates a config-validation function, caches it, then asserts\nany user-supplied config is valid using said function.\n\n**`throws`** If user-supplied config is invalid.\n\n**Returns:** *Function*\n\n## Methods\n\n### handlers\n\n▸ **handlers**(`config?`: any): *Promise‹any›*\n\nCalls the `inspect()` function of a Rule impl, which will return one or\nmore \"handler\" functions. Note `inspect()` might return a `Promise` which\nresolves to the \"handler\" functions.\n\n**Parameters:**\n\nName | Type |\n------ | ------ |\n`config?` | any |\n\n**Returns:** *Promise‹any›*\n\n___\n\n### inspect\n\n▸ **inspect**(`__namedParameters`: object): *Observable‹[Message](report_toolkit_inspector.message.message)›*\n\nGiven a stream of Report objects and an optional configuration, execute the\n`inspect()` function of the rule definition, which should return a \"next\"\nhandler function, or an object having handler function props `next` and\n`complete`.\n1. Normalize the result of the `inspect()` so we can make assumptions about\n   the shape of the returned value.\n2. For each `Report` (`report`), run the `next` handler as if it returned\n   a `Promise`. This handler is passed the `report`, and any `Error`s\n   thrown are trapped. The handler may return a string (\"message\"), a\n   partial `Message` object, `Array` thereof, or a `Promise` resolving to\n   any of that stuff, or just `undefined` in the case of \"nothing to\n   mention\"\n3. Return values are correlated with the filepath of the report. Note that\n   `Report` objects may not *have* a filepath if they were not loaded from\n   file.\n4. Once all `Report`s have passed through the `next` handler, call the\n   `complete` handler.  It receives no `report`, and can be used in tandem\n   with `next` to perform aggregation. Supports the same return values as\n   `next`\n5. Finally, filter out empty/falsy partial `Message`s (e.g., those without\n   actual `string` `message` props), and normalize the `Message` by adding\n   relevant metadata (`Rule` ID, user-supplied config used, default\n   severity, etc.)\n\n**Parameters:**\n\n▪ **__namedParameters**: *object*\n\nName | Type |\n------ | ------ |\n`config` | any |\n`reports` | Observable‹[Report](report_toolkit_common.report.report)‹›› |\n\n**Returns:** *Observable‹[Message](report_toolkit_inspector.message.message)›*\n\n___\n\n### toRuleConfig\n\n▸ **toRuleConfig**(`config`: any): *[RuleConfig](report_toolkit_inspector.rule_config.ruleconfig)*\n\n**Parameters:**\n\nName | Type |\n------ | ------ |\n`config` | any |\n\n**Returns:** *[RuleConfig](report_toolkit_inspector.rule_config.ruleconfig)*\n\n___\n\n### `Static` applyDefaults\n\n▸ **applyDefaults**(`ruleDef`: Partial‹[RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition)›): *[RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition)*\n\nApplies defaults to a rule definition during `Rule` construction.\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`ruleDef` | Partial‹[RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition)› | Raw rule definition |\n\n**Returns:** *[RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition)*\n\n___\n\n### `Static` create\n\n▸ **create**(`ruleDefinition`: [RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition)): *[Rule](report_toolkit_inspector.rule.rule)*\n\nCreates a `Rule` from a user-defined (or builtin) `RuleDefinition`, which\nis the exports of a rule definition file.\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`ruleDefinition` | [RuleDefinition](../modules/report_toolkit_inspector.rule#ruledefinition) | Rule definition |\n\n**Returns:** *[Rule](report_toolkit_inspector.rule.rule)*\n\nNew rule\n\n___\n\n### `Static` normalizeHandler\n\n▸ **normalizeHandler**(): *function*\n\nOperator.  Given a \"handler\" (returned by the rule definition's `inspect`\nfunction), normalize it into an object (since it may be just a function)\n\n**Returns:** *function*\n\n▸ (`observable`: any): *any*\n\n**Parameters:**\n\nName | Type |\n------ | ------ |\n`observable` | any |\n\n","fileAbsolutePath":"/Users/boneskull/projects/boneskull/report-toolkit/packages/docs/src/pages/api/classes/report_toolkit_inspector.rule.rule.mdx"}}}}