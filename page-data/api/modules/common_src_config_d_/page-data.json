{"componentChunkName":"component---src-pages-api-modules-common-src-config-d-mdx","path":"/api/modules/common_src_config_d_/","result":{"pageContext":{"frontmatter":{"title":"common/src/config.d"},"relativePagePath":"/api/modules/common_src_config_d_.mdx","titleType":"append","MdxNode":{"id":"05fe8751-1d6a-58b0-808e-70383ca1a4ed","children":[],"parent":"2cb0f1f0-2081-5fe1-b2bc-e91d29292f3d","internal":{"content":"---\ntitle: \"common/src/config.d\"\n---\n\n<Breadcrumb noTrailingSlash>\n<BreadcrumbItem><a href=\"../../../../../../api\">report-toolkit API</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"common_src_config_d_\">\"common/src/config.d\"</a></BreadcrumbItem>\n</Breadcrumb>\n\n## Index\n\n### Type aliases\n\n- [BuiltinConfigAliases](common_src_config_d_#builtinconfigaliases)\n- [BuiltinConfigModule](common_src_config_d_#builtinconfigmodule)\n- [CommandDefaultsConfig](common_src_config_d_#commanddefaultsconfig)\n- [CommandName](common_src_config_d_#commandname)\n- [Config](common_src_config_d_#config)\n- [ConfigListItem](common_src_config_d_#configlistitem)\n- [ConfigModule](common_src_config_d_#configmodule)\n- [ConfigProps](common_src_config_d_#configprops)\n- [ExportedConfig](common_src_config_d_#exportedconfig)\n- [FlattenedConfigMarker](common_src_config_d_#flattenedconfigmarker)\n- [Observable](common_src_config_d_#observable)\n- [RuleConfig](common_src_config_d_#ruleconfig)\n- [RulesConfig](common_src_config_d_#rulesconfig)\n- [Severity](common_src_config_d_#severity)\n- [TransformerDefaultsConfig](common_src_config_d_#transformerdefaultsconfig)\n- [TransformerName](common_src_config_d_#transformername)\n\n### Variables\n\n- [BUILTIN_CONFIGS](common_src_config_d_#const-builtin_configs)\n- [RECOMMENDED_CONFIG_ALIAS](common_src_config_d_#const-recommended_config_alias)\n\n### Functions\n\n- [filterEnabledRules](common_src_config_d_#filterenabledrules)\n- [normalizeFlattenedConfig](common_src_config_d_#normalizeflattenedconfig)\n- [parseConfig](common_src_config_d_#parseconfig)\n\n## Type aliases\n\n### BuiltinConfigAliases\n\nƬ **BuiltinConfigAliases**: *\"rtk:recommended\"*\n\nA list of built-in config aliases. (This is intended to be a union type\nif/when other built-in configs are added.)\n\n___\n\n### BuiltinConfigModule\n\nƬ **BuiltinConfigModule**: *object*\n\nThe exports of a builtin config file.\n\n#### Type declaration:\n\n* **config**: *object | object | \"rtk:recommended\" | object[]*\n\n___\n\n### CommandDefaultsConfig\n\nƬ **CommandDefaultsConfig**: *object*\n\nCommand-specific defaults.  Command-line arguments will always override these.\n\n#### Type declaration:\n\n* **diff**: *any*\n\n* **inspect**: *any*\n\n* **redact**: *any*\n\n* **transform**: *any*\n\n___\n\n### CommandName\n\nƬ **CommandName**: *\"redact\" | \"inspect\" | \"transform\" | \"diff\"*\n\nValid command names for commands (used with [CommandDefaultsConfig](common_src_config_d_#commanddefaultsconfig)).\n\n___\n\n### Config\n\nƬ **Config**: *object | [ConfigProps](common_src_config_d_#configprops)*\n\nA configuration object. Each configuration file exports an\n[ExportedConfig](common_src_config_d_#exportedconfig) array containing one or more of these.\n\n___\n\n### ConfigListItem\n\nƬ **ConfigListItem**: *Partial‹object› | Partial‹[ConfigProps](common_src_config_d_#configprops)› | [ConfigModule](common_src_config_d_#configmodule) | \"rtk:recommended\"*\n\nAn item in the `config` prop of a config file or [ConfigModule](common_src_config_d_#configmodule).\n\n___\n\n### ConfigModule\n\nƬ **ConfigModule**: *object*\n\nThe exports of a config file. There should be only one; `config`, which may\nbe a [Config](common_src_config_d_#config) or [ExportedConfig](common_src_config_d_#exportedconfig).\n\n#### Type declaration:\n\n* **config**: *object | [ConfigModule](common_src_config_d_#configmodule) | \"rtk:recommended\" | object[]*\n\n___\n\n### ConfigProps\n\nƬ **ConfigProps**: *object*\n\nProperties of a [Config](common_src_config_d_#config) object.\n\n#### Type declaration:\n\n* **commands**: *Partial‹object›*\n\n* **plugins**: *string[]*\n\n* **rules**: *Partial‹object›*\n\n* **transformers**: *Partial‹object›*\n\n___\n\n### ExportedConfig\n\nƬ **ExportedConfig**: *object | object | \"rtk:recommended\" | object[]*\n\nAlias for the `config` prop of a config file or [ConfigModule](common_src_config_d_#configmodule). See\n[ConfigListItem](common_src_config_d_#configlistitem).\n\n___\n\n### FlattenedConfigMarker\n\nƬ **FlattenedConfigMarker**: *object*\n\nThe symbol attached to a flattened [Config](common_src_config_d_#config).\n\n#### Type declaration:\n\n* **__computed**? : *true*\n\n___\n\n### Observable\n\nƬ **Observable**: *Observable‹T›*\n\n___\n\n### RuleConfig\n\nƬ **RuleConfig**: *object*\n\nRule-specific configuration.  `severity` and `enable` will always be usable,\notherwise the rest of the properties are defined by the rule.\n\n#### Type declaration:\n\n- \\[ **key**: *string*\\]: any\n\n___\n\n### RulesConfig\n\nƬ **RulesConfig**: *object*\n\nPer-rule configuration.\n\n#### Type declaration:\n\n- \\[ **key**: *string*\\]: boolean | object\n\n___\n\n### Severity\n\nƬ **Severity**: *\"error\" | \"warning\" | \"info\"*\n\nValid severity levels.\n\n___\n\n### TransformerDefaultsConfig\n\nƬ **TransformerDefaultsConfig**: *object*\n\nPer-transformer defaults, keyed on transformer name.\n\n#### Type declaration:\n\n* **csv**: *any*\n\n* **filter**: *any*\n\n* **json**: *any*\n\n* **newline**: *any*\n\n* **redact**: *any*\n\n* **stack-hash**: *any*\n\n* **table**: *any*\n\n___\n\n### TransformerName\n\nƬ **TransformerName**: *\"table\" | \"filter\" | \"json\" | \"csv\" | \"newline\" | \"redact\" | \"stack-hash\"*\n\nA valid transformer name.\n\n## Variables\n\n### `Const` BUILTIN_CONFIGS\n\n• **BUILTIN_CONFIGS**: *Map‹[BuiltinConfigAliases](common_src_config_d_#builtinconfigaliases), [ExportedConfig](common_src_config_d_#exportedconfig)›*\n\n**`type`** {Map<BuiltinConfigAliases,ExportedConfig>}\n\n**`todo`** move this\n\n___\n\n### `Const` RECOMMENDED_CONFIG_ALIAS\n\n• **RECOMMENDED_CONFIG_ALIAS**: *\"rtk:recommended\"*\n\n## Functions\n\n### filterEnabledRules\n\n▸ **filterEnabledRules**(`config`: object | [ConfigProps](common_src_config_d_#configprops)): *string[]*\n\nGiven a [Config](common_src_config_d_#config), return a list of rules that are enabled.\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`config` | object &#124; [ConfigProps](common_src_config_d_#configprops) | Parsed config |\n\n**Returns:** *string[]*\n\nList of rule IDs\n\n___\n\n### normalizeFlattenedConfig\n\n▸ **normalizeFlattenedConfig**(`config`: Partial‹object› | Partial‹[ConfigProps](common_src_config_d_#configprops)›): *object | [ConfigProps](common_src_config_d_#configprops)*\n\nAssign the \"flattened config\" symbol to complete the config.\nAdd default fields.\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`config` | Partial‹object› &#124; Partial‹[ConfigProps](common_src_config_d_#configprops)› | Config to mark flattened |\n\n**Returns:** *object | [ConfigProps](common_src_config_d_#configprops)*\n\nThe \"final\" config\n\n___\n\n### parseConfig\n\n▸ **parseConfig**(): *OperatorFunction‹Partial‹object› | Partial‹[ConfigProps](common_src_config_d_#configprops)› | [ConfigModule](common_src_config_d_#configmodule) | \"rtk:recommended\" | object | object | \"rtk:recommended\" | object[], object | [ConfigProps](common_src_config_d_#configprops)›*\n\nGiven an `Observable` of [ExportedConfig](common_src_config_d_#exportedconfig) arrays, return a single,\nflattened [Config](common_src_config_d_#config) object.  Config object will have a\n`kFlattenedConfig` `Symbol` property set to `true`.\n\n**`todo`** Eliminate extra empty properties\n\n**Returns:** *OperatorFunction‹Partial‹object› | Partial‹[ConfigProps](common_src_config_d_#configprops)› | [ConfigModule](common_src_config_d_#configmodule) | \"rtk:recommended\" | object | object | \"rtk:recommended\" | object[], object | [ConfigProps](common_src_config_d_#configprops)›*\n\n","type":"Mdx","contentDigest":"cb7067122142d3461a9a520b2d87c597","counter":121,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"common/src/config.d"},"exports":{},"rawBody":"---\ntitle: \"common/src/config.d\"\n---\n\n<Breadcrumb noTrailingSlash>\n<BreadcrumbItem><a href=\"../../../../../../api\">report-toolkit API</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"common_src_config_d_\">\"common/src/config.d\"</a></BreadcrumbItem>\n</Breadcrumb>\n\n## Index\n\n### Type aliases\n\n- [BuiltinConfigAliases](common_src_config_d_#builtinconfigaliases)\n- [BuiltinConfigModule](common_src_config_d_#builtinconfigmodule)\n- [CommandDefaultsConfig](common_src_config_d_#commanddefaultsconfig)\n- [CommandName](common_src_config_d_#commandname)\n- [Config](common_src_config_d_#config)\n- [ConfigListItem](common_src_config_d_#configlistitem)\n- [ConfigModule](common_src_config_d_#configmodule)\n- [ConfigProps](common_src_config_d_#configprops)\n- [ExportedConfig](common_src_config_d_#exportedconfig)\n- [FlattenedConfigMarker](common_src_config_d_#flattenedconfigmarker)\n- [Observable](common_src_config_d_#observable)\n- [RuleConfig](common_src_config_d_#ruleconfig)\n- [RulesConfig](common_src_config_d_#rulesconfig)\n- [Severity](common_src_config_d_#severity)\n- [TransformerDefaultsConfig](common_src_config_d_#transformerdefaultsconfig)\n- [TransformerName](common_src_config_d_#transformername)\n\n### Variables\n\n- [BUILTIN_CONFIGS](common_src_config_d_#const-builtin_configs)\n- [RECOMMENDED_CONFIG_ALIAS](common_src_config_d_#const-recommended_config_alias)\n\n### Functions\n\n- [filterEnabledRules](common_src_config_d_#filterenabledrules)\n- [normalizeFlattenedConfig](common_src_config_d_#normalizeflattenedconfig)\n- [parseConfig](common_src_config_d_#parseconfig)\n\n## Type aliases\n\n### BuiltinConfigAliases\n\nƬ **BuiltinConfigAliases**: *\"rtk:recommended\"*\n\nA list of built-in config aliases. (This is intended to be a union type\nif/when other built-in configs are added.)\n\n___\n\n### BuiltinConfigModule\n\nƬ **BuiltinConfigModule**: *object*\n\nThe exports of a builtin config file.\n\n#### Type declaration:\n\n* **config**: *object | object | \"rtk:recommended\" | object[]*\n\n___\n\n### CommandDefaultsConfig\n\nƬ **CommandDefaultsConfig**: *object*\n\nCommand-specific defaults.  Command-line arguments will always override these.\n\n#### Type declaration:\n\n* **diff**: *any*\n\n* **inspect**: *any*\n\n* **redact**: *any*\n\n* **transform**: *any*\n\n___\n\n### CommandName\n\nƬ **CommandName**: *\"redact\" | \"inspect\" | \"transform\" | \"diff\"*\n\nValid command names for commands (used with [CommandDefaultsConfig](common_src_config_d_#commanddefaultsconfig)).\n\n___\n\n### Config\n\nƬ **Config**: *object | [ConfigProps](common_src_config_d_#configprops)*\n\nA configuration object. Each configuration file exports an\n[ExportedConfig](common_src_config_d_#exportedconfig) array containing one or more of these.\n\n___\n\n### ConfigListItem\n\nƬ **ConfigListItem**: *Partial‹object› | Partial‹[ConfigProps](common_src_config_d_#configprops)› | [ConfigModule](common_src_config_d_#configmodule) | \"rtk:recommended\"*\n\nAn item in the `config` prop of a config file or [ConfigModule](common_src_config_d_#configmodule).\n\n___\n\n### ConfigModule\n\nƬ **ConfigModule**: *object*\n\nThe exports of a config file. There should be only one; `config`, which may\nbe a [Config](common_src_config_d_#config) or [ExportedConfig](common_src_config_d_#exportedconfig).\n\n#### Type declaration:\n\n* **config**: *object | [ConfigModule](common_src_config_d_#configmodule) | \"rtk:recommended\" | object[]*\n\n___\n\n### ConfigProps\n\nƬ **ConfigProps**: *object*\n\nProperties of a [Config](common_src_config_d_#config) object.\n\n#### Type declaration:\n\n* **commands**: *Partial‹object›*\n\n* **plugins**: *string[]*\n\n* **rules**: *Partial‹object›*\n\n* **transformers**: *Partial‹object›*\n\n___\n\n### ExportedConfig\n\nƬ **ExportedConfig**: *object | object | \"rtk:recommended\" | object[]*\n\nAlias for the `config` prop of a config file or [ConfigModule](common_src_config_d_#configmodule). See\n[ConfigListItem](common_src_config_d_#configlistitem).\n\n___\n\n### FlattenedConfigMarker\n\nƬ **FlattenedConfigMarker**: *object*\n\nThe symbol attached to a flattened [Config](common_src_config_d_#config).\n\n#### Type declaration:\n\n* **__computed**? : *true*\n\n___\n\n### Observable\n\nƬ **Observable**: *Observable‹T›*\n\n___\n\n### RuleConfig\n\nƬ **RuleConfig**: *object*\n\nRule-specific configuration.  `severity` and `enable` will always be usable,\notherwise the rest of the properties are defined by the rule.\n\n#### Type declaration:\n\n- \\[ **key**: *string*\\]: any\n\n___\n\n### RulesConfig\n\nƬ **RulesConfig**: *object*\n\nPer-rule configuration.\n\n#### Type declaration:\n\n- \\[ **key**: *string*\\]: boolean | object\n\n___\n\n### Severity\n\nƬ **Severity**: *\"error\" | \"warning\" | \"info\"*\n\nValid severity levels.\n\n___\n\n### TransformerDefaultsConfig\n\nƬ **TransformerDefaultsConfig**: *object*\n\nPer-transformer defaults, keyed on transformer name.\n\n#### Type declaration:\n\n* **csv**: *any*\n\n* **filter**: *any*\n\n* **json**: *any*\n\n* **newline**: *any*\n\n* **redact**: *any*\n\n* **stack-hash**: *any*\n\n* **table**: *any*\n\n___\n\n### TransformerName\n\nƬ **TransformerName**: *\"table\" | \"filter\" | \"json\" | \"csv\" | \"newline\" | \"redact\" | \"stack-hash\"*\n\nA valid transformer name.\n\n## Variables\n\n### `Const` BUILTIN_CONFIGS\n\n• **BUILTIN_CONFIGS**: *Map‹[BuiltinConfigAliases](common_src_config_d_#builtinconfigaliases), [ExportedConfig](common_src_config_d_#exportedconfig)›*\n\n**`type`** {Map<BuiltinConfigAliases,ExportedConfig>}\n\n**`todo`** move this\n\n___\n\n### `Const` RECOMMENDED_CONFIG_ALIAS\n\n• **RECOMMENDED_CONFIG_ALIAS**: *\"rtk:recommended\"*\n\n## Functions\n\n### filterEnabledRules\n\n▸ **filterEnabledRules**(`config`: object | [ConfigProps](common_src_config_d_#configprops)): *string[]*\n\nGiven a [Config](common_src_config_d_#config), return a list of rules that are enabled.\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`config` | object &#124; [ConfigProps](common_src_config_d_#configprops) | Parsed config |\n\n**Returns:** *string[]*\n\nList of rule IDs\n\n___\n\n### normalizeFlattenedConfig\n\n▸ **normalizeFlattenedConfig**(`config`: Partial‹object› | Partial‹[ConfigProps](common_src_config_d_#configprops)›): *object | [ConfigProps](common_src_config_d_#configprops)*\n\nAssign the \"flattened config\" symbol to complete the config.\nAdd default fields.\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`config` | Partial‹object› &#124; Partial‹[ConfigProps](common_src_config_d_#configprops)› | Config to mark flattened |\n\n**Returns:** *object | [ConfigProps](common_src_config_d_#configprops)*\n\nThe \"final\" config\n\n___\n\n### parseConfig\n\n▸ **parseConfig**(): *OperatorFunction‹Partial‹object› | Partial‹[ConfigProps](common_src_config_d_#configprops)› | [ConfigModule](common_src_config_d_#configmodule) | \"rtk:recommended\" | object | object | \"rtk:recommended\" | object[], object | [ConfigProps](common_src_config_d_#configprops)›*\n\nGiven an `Observable` of [ExportedConfig](common_src_config_d_#exportedconfig) arrays, return a single,\nflattened [Config](common_src_config_d_#config) object.  Config object will have a\n`kFlattenedConfig` `Symbol` property set to `true`.\n\n**`todo`** Eliminate extra empty properties\n\n**Returns:** *OperatorFunction‹Partial‹object› | Partial‹[ConfigProps](common_src_config_d_#configprops)› | [ConfigModule](common_src_config_d_#configmodule) | \"rtk:recommended\" | object | object | \"rtk:recommended\" | object[], object | [ConfigProps](common_src_config_d_#configprops)›*\n\n","fileAbsolutePath":"/Users/boneskull/projects/boneskull/report-toolkit/packages/docs/src/pages/api/modules/common_src_config_d_.mdx"}}}}