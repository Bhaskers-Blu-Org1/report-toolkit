{"componentChunkName":"component---src-pages-api-modules-report-toolkit-core-mdx","path":"/api/modules/report_toolkit_core/","webpackCompilationHash":"f89a103bc899618ed7f5","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"@report-toolkit/core"},"relativePagePath":"/api/modules/report_toolkit_core.mdx","titleType":"append","MdxNode":{"id":"1d70f03d-648b-51d9-8ac4-b2415d8725b6","children":[],"parent":"8dfd2cfd-91ab-508f-95a9-b6df64364881","internal":{"content":"---\ntitle: \"@report-toolkit/core\"\n---\n\n<Breadcrumb noTrailingSlash>\n<BreadcrumbItem><a href=\"../home\">report-toolkit API</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"report_toolkit_core\">@report-toolkit/core</a></BreadcrumbItem>\n</Breadcrumb>\n\n## Functions\n\n### diff\n\n▸ **diff**(`report1`: any, `report2`: any, `opts?`: Partial‹[DiffOptions](report_toolkit_core.observable#diffoptions)›): *Promise‹[DiffResult](report_toolkit_core.observable#diffresult)[]›*\n\nReturns the difference between two reports.\n\nExample:\n\n```js\nconst {diff} = require('@report-toolkit/core');\n\nconst report1 = process.report.getReport();\nconst report2 = process.report.getReport();\nconst results = await diff(report1, report2, {\n  filterProperties: ['header', 'javascriptStack', 'nativeStack'],\n  showSecretsUnsafe: false\n});\nresults.forEach(({op, path, newValue, oldValue}) => {\n  console.log(`[${op}] <${path}> ${oldValue} => ${newValue}`);\n});\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`report1` | any | First report to diff |\n`report2` | any | Second report to diff |\n`opts?` | Partial‹[DiffOptions](report_toolkit_core.observable#diffoptions)› | - |\n\n**Returns:** *Promise‹[DiffResult](report_toolkit_core.observable#diffresult)[]›*\n\nArray of results, one per difference\n\n___\n\n### inspect\n\n▸ **inspect**(`reports`: any, `opts?`: Partial‹[InspectOptions](report_toolkit_core.observable#inspectoptions)›): *Promise‹[Message](../classes/report_toolkit_inspector.message.message)[]›*\n\nInspect one or more reports, running rules against each.  Resolves with an array of zero or more [Messages](../classes/report_toolkit_inspector.message.message.mdx).\n\nExample:\n\n```js\nconst {inspect} = require('@report-toolkit/core');\n\nconst report = process.report.getReport();\nconst results = await inspect(report, {\n  severity: 'info',\n  sort: true,\n  sortDirection: 'asc',\n  sortField: 'header.dumpEventTimestamp',\n  showSecretsUnsafe: false,\n  ruleConfig: {\n    'long-timeout': {\n      timeout: '2s'\n    }\n  }\n});\nresults.forEach(({message, filename}) => {\n  console.log(`${filename}: ${message}`);\n});\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`reports` | any | One or more reports |\n`opts?` | Partial‹[InspectOptions](report_toolkit_core.observable#inspectoptions)› | - |\n\n**Returns:** *Promise‹[Message](../classes/report_toolkit_inspector.message.message)[]›*\n\n___\n\n### loadConfig\n\n▸ **loadConfig**(`config`: any): *Promise‹any›*\n\nResolves with a normalized config object from a raw config object.\n\nExample:\n\n```js\nconst {loadConfig} = require('@report-toolkit/core');\n\n// or require('./path/to/.rtkrc.js')\nconst rawConfig = [\n  'report-toolkit:recommended',\n  {\n    rules: {\n      'long-timeout': {\n        timeout: '2s'\n      }\n    }\n  }\n];\n// `normalizedConfig` contains contents of \"recommended\" settings,\n// with our override of custom rule config\nconst normalizedConfig = await loadConfig(rawConfig);\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`config` | any | Raw config object |\n\n**Returns:** *Promise‹any›*\n\nA normalized config object\n\n___\n\n### toReportFromObject\n\n▸ **toReportFromObject**(`value`: any, `opts?`: Partial‹[ToReportFromObjectOptions](report_toolkit_core.observable#toreportfromobjectoptions)›): *Promise‹Readonly‹[Report](../classes/report_toolkit_common.report.report)››*\n\nConvert a plain object (usually parsed from a JSON report generated by See [process.report.writeReport](https://nodejs.org/api/process.html#process_process_report_writereport_filename_err)) to a [Report](../classes/report_toolkit_common.report.report.mdx) instance.\n\nExample:\n\n```js\nconst {toReportFromObject} = require('@report-toolkit/core');\n\nconst json = fs.readFileSync('./report-xxxxx.json');\n// `Report` instance with secrets redacted\nconst report = await toReportFromObject(json, {\n  showSecretsUnsafe: false\n});\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`value` | any | Raw report |\n`opts?` | Partial‹[ToReportFromObjectOptions](report_toolkit_core.observable#toreportfromobjectoptions)› | - |\n\n**Returns:** *Promise‹Readonly‹[Report](../classes/report_toolkit_common.report.report)››*\n\n___\n\n### transform\n\n▸ **transform**(`transformerIds`: string | string[], `source`: any, `config?`: Partial‹any›, `options?`: Partial‹[TransformOptions](report_toolkit_core.observable#transformoptions)›): *Promise‹any[]›*\n\nRun `source` through chain of one or more transformers.  Performs validation before piping.\nIf the final transformer does not output the desired `endType`, the `defaultTransformer` will be appended to the chain; otherwise it is ignored.\n\nExample:\n\n```js\nconst {transform, toReportFromObject} = require('@report-toolkit/core');\n\n// by default, `report` has its secrets redacted\nconst report = await toReportFromObject(process.report.getReport());\nconst [header, ...data] = await transform(['filter', 'csv'], report, {\n  transformers: {\n    filter: {include: 'header'},\n    csv: {flatten: true}\n  }\n});\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`transformerIds` | string &#124; string[] | Unique transformer identifier(s), in order.  Can be one of `csv`, `filter`, `json`, `newline`, `numeric`, `redact`, `stack-hash`, `table`. |\n`source` | any | Source, typically one or more [Reports](../classes/report_toolkit_common.report.report.mdx). |\n`config?` | Partial‹any› | As returned by [loadConfig](report_toolkit_core.mdx#loadconfig); can contain transformer-specific settings. |\n`options?` | Partial‹[TransformOptions](report_toolkit_core.observable#transformoptions)› | Optional constraints & default behavior; overrides settings in `config`, if present.  |\n\n**Returns:** *Promise‹any[]›*\n\n___\n\n### use\n\n▸ **use**(`pluginId`: string): *Promise‹[RTKPlugin](report_toolkit_core.observable#rtkplugin)›*\n\nRegister & enable a plugin.\n\nExample:\n\n```js\nconst {use} = require('@report-toolkit/core');\n\nawait use('some-plugin-in-node_modules');\nawait use('./relative/path/to/plugin.js');\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`pluginId` | string | ID of plugin to register; a resolvable path to a module |\n\n**Returns:** *Promise‹[RTKPlugin](report_toolkit_core.observable#rtkplugin)›*\n\n","type":"Mdx","contentDigest":"1c727a038070f234ec12a6a6896c613c","counter":87,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"@report-toolkit/core"},"exports":{},"rawBody":"---\ntitle: \"@report-toolkit/core\"\n---\n\n<Breadcrumb noTrailingSlash>\n<BreadcrumbItem><a href=\"../home\">report-toolkit API</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"report_toolkit_core\">@report-toolkit/core</a></BreadcrumbItem>\n</Breadcrumb>\n\n## Functions\n\n### diff\n\n▸ **diff**(`report1`: any, `report2`: any, `opts?`: Partial‹[DiffOptions](report_toolkit_core.observable#diffoptions)›): *Promise‹[DiffResult](report_toolkit_core.observable#diffresult)[]›*\n\nReturns the difference between two reports.\n\nExample:\n\n```js\nconst {diff} = require('@report-toolkit/core');\n\nconst report1 = process.report.getReport();\nconst report2 = process.report.getReport();\nconst results = await diff(report1, report2, {\n  filterProperties: ['header', 'javascriptStack', 'nativeStack'],\n  showSecretsUnsafe: false\n});\nresults.forEach(({op, path, newValue, oldValue}) => {\n  console.log(`[${op}] <${path}> ${oldValue} => ${newValue}`);\n});\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`report1` | any | First report to diff |\n`report2` | any | Second report to diff |\n`opts?` | Partial‹[DiffOptions](report_toolkit_core.observable#diffoptions)› | - |\n\n**Returns:** *Promise‹[DiffResult](report_toolkit_core.observable#diffresult)[]›*\n\nArray of results, one per difference\n\n___\n\n### inspect\n\n▸ **inspect**(`reports`: any, `opts?`: Partial‹[InspectOptions](report_toolkit_core.observable#inspectoptions)›): *Promise‹[Message](../classes/report_toolkit_inspector.message.message)[]›*\n\nInspect one or more reports, running rules against each.  Resolves with an array of zero or more [Messages](../classes/report_toolkit_inspector.message.message.mdx).\n\nExample:\n\n```js\nconst {inspect} = require('@report-toolkit/core');\n\nconst report = process.report.getReport();\nconst results = await inspect(report, {\n  severity: 'info',\n  sort: true,\n  sortDirection: 'asc',\n  sortField: 'header.dumpEventTimestamp',\n  showSecretsUnsafe: false,\n  ruleConfig: {\n    'long-timeout': {\n      timeout: '2s'\n    }\n  }\n});\nresults.forEach(({message, filename}) => {\n  console.log(`${filename}: ${message}`);\n});\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`reports` | any | One or more reports |\n`opts?` | Partial‹[InspectOptions](report_toolkit_core.observable#inspectoptions)› | - |\n\n**Returns:** *Promise‹[Message](../classes/report_toolkit_inspector.message.message)[]›*\n\n___\n\n### loadConfig\n\n▸ **loadConfig**(`config`: any): *Promise‹any›*\n\nResolves with a normalized config object from a raw config object.\n\nExample:\n\n```js\nconst {loadConfig} = require('@report-toolkit/core');\n\n// or require('./path/to/.rtkrc.js')\nconst rawConfig = [\n  'report-toolkit:recommended',\n  {\n    rules: {\n      'long-timeout': {\n        timeout: '2s'\n      }\n    }\n  }\n];\n// `normalizedConfig` contains contents of \"recommended\" settings,\n// with our override of custom rule config\nconst normalizedConfig = await loadConfig(rawConfig);\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`config` | any | Raw config object |\n\n**Returns:** *Promise‹any›*\n\nA normalized config object\n\n___\n\n### toReportFromObject\n\n▸ **toReportFromObject**(`value`: any, `opts?`: Partial‹[ToReportFromObjectOptions](report_toolkit_core.observable#toreportfromobjectoptions)›): *Promise‹Readonly‹[Report](../classes/report_toolkit_common.report.report)››*\n\nConvert a plain object (usually parsed from a JSON report generated by See [process.report.writeReport](https://nodejs.org/api/process.html#process_process_report_writereport_filename_err)) to a [Report](../classes/report_toolkit_common.report.report.mdx) instance.\n\nExample:\n\n```js\nconst {toReportFromObject} = require('@report-toolkit/core');\n\nconst json = fs.readFileSync('./report-xxxxx.json');\n// `Report` instance with secrets redacted\nconst report = await toReportFromObject(json, {\n  showSecretsUnsafe: false\n});\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`value` | any | Raw report |\n`opts?` | Partial‹[ToReportFromObjectOptions](report_toolkit_core.observable#toreportfromobjectoptions)› | - |\n\n**Returns:** *Promise‹Readonly‹[Report](../classes/report_toolkit_common.report.report)››*\n\n___\n\n### transform\n\n▸ **transform**(`transformerIds`: string | string[], `source`: any, `config?`: Partial‹any›, `options?`: Partial‹[TransformOptions](report_toolkit_core.observable#transformoptions)›): *Promise‹any[]›*\n\nRun `source` through chain of one or more transformers.  Performs validation before piping.\nIf the final transformer does not output the desired `endType`, the `defaultTransformer` will be appended to the chain; otherwise it is ignored.\n\nExample:\n\n```js\nconst {transform, toReportFromObject} = require('@report-toolkit/core');\n\n// by default, `report` has its secrets redacted\nconst report = await toReportFromObject(process.report.getReport());\nconst [header, ...data] = await transform(['filter', 'csv'], report, {\n  transformers: {\n    filter: {include: 'header'},\n    csv: {flatten: true}\n  }\n});\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`transformerIds` | string &#124; string[] | Unique transformer identifier(s), in order.  Can be one of `csv`, `filter`, `json`, `newline`, `numeric`, `redact`, `stack-hash`, `table`. |\n`source` | any | Source, typically one or more [Reports](../classes/report_toolkit_common.report.report.mdx). |\n`config?` | Partial‹any› | As returned by [loadConfig](report_toolkit_core.mdx#loadconfig); can contain transformer-specific settings. |\n`options?` | Partial‹[TransformOptions](report_toolkit_core.observable#transformoptions)› | Optional constraints & default behavior; overrides settings in `config`, if present.  |\n\n**Returns:** *Promise‹any[]›*\n\n___\n\n### use\n\n▸ **use**(`pluginId`: string): *Promise‹[RTKPlugin](report_toolkit_core.observable#rtkplugin)›*\n\nRegister & enable a plugin.\n\nExample:\n\n```js\nconst {use} = require('@report-toolkit/core');\n\nawait use('some-plugin-in-node_modules');\nawait use('./relative/path/to/plugin.js');\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`pluginId` | string | ID of plugin to register; a resolvable path to a module |\n\n**Returns:** *Promise‹[RTKPlugin](report_toolkit_core.observable#rtkplugin)›*\n\n","fileAbsolutePath":"/Users/boneskull/projects/boneskull/report-toolkit/packages/docs/src/pages/api/modules/report_toolkit_core.mdx"}}}}