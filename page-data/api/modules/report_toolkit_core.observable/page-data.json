{"componentChunkName":"component---src-pages-api-modules-report-toolkit-core-observable-mdx","path":"/api/modules/report_toolkit_core.observable/","result":{"pageContext":{"frontmatter":{"title":"observable"},"relativePagePath":"/api/modules/report_toolkit_core.observable.mdx","titleType":"append","MdxNode":{"id":"4cf308bc-c477-5bc9-8317-e9e1e765c751","children":[],"parent":"c734c9a3-b0f4-533e-86a2-c15252516a4c","internal":{"content":"---\ntitle: \"observable\"\n---\n\n<Breadcrumb noTrailingSlash>\n<BreadcrumbItem><a href=\"../../../../../../api\">report-toolkit API</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"report_toolkit_core\">@report-toolkit/core</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"report_toolkit_core.observable\">observable</a></BreadcrumbItem>\n</Breadcrumb>\n\n[RxJS](https://rxjs.dev) `Observable`-based API. Used interally, but can also be used by consumers.\n\n## Index\n\n### Type aliases\n\n- [Config](report_toolkit_core.observable#config)\n- [DiffOptions](report_toolkit_core.observable#diffoptions)\n- [DiffResult](report_toolkit_core.observable#diffresult)\n- [InspectOptions](report_toolkit_core.observable#inspectoptions)\n- [RTKPlugin](report_toolkit_core.observable#rtkplugin)\n- [ToReportFromObjectOptions](report_toolkit_core.observable#toreportfromobjectoptions)\n- [TransformOptions](report_toolkit_core.observable#transformoptions)\n- [TransformerBlueprint](report_toolkit_core.observable#transformerblueprint)\n\n### Functions\n\n- [deregisterPlugins](report_toolkit_core.observable#deregisterplugins)\n- [diff](report_toolkit_core.observable#diff)\n- [fromTransformerChain](report_toolkit_core.observable#fromtransformerchain)\n- [inspect](report_toolkit_core.observable#inspect)\n- [isPluginRegistered](report_toolkit_core.observable#ispluginregistered)\n- [loadConfig](report_toolkit_core.observable#loadconfig)\n- [registeredRuleDefinitions](report_toolkit_core.observable#registeredruledefinitions)\n- [toReportFromObject](report_toolkit_core.observable#toreportfromobject)\n- [transform](report_toolkit_core.observable#transform)\n- [use](report_toolkit_core.observable#use)\n\n## Type aliases\n\n### Config\n\nƬ **Config**: *any*\n\nA \"normalized\" configuration object.\n\n___\n\n### DiffOptions\n\nƬ **DiffOptions**: *object*\n\nOptions for [diff](report_toolkit_core.observable#diff).\n\n#### Type declaration:\n\n* **excludeProperties**: *string[]*\n\n* **includeAll**: *boolean*\n\n* **includeProperties**: *string[]*\n\n* **showSecretsUnsafe**: *boolean*\n\n___\n\n### DiffResult\n\nƬ **DiffResult**: *object*\n\nA single difference between two reports.  Emitted from [diff](report_toolkit_core.observable#diff).\n\n#### Type declaration:\n\n* **oldValue**: *string | number | boolean*\n\n* **op**: *\"replace\" | \"add\" | \"remove\"*\n\n* **path**: *string*\n\n* **value**: *string | number | boolean*\n\n___\n\n### InspectOptions\n\nƬ **InspectOptions**: *object*\n\nOptions for [inspect](report_toolkit_core.observable#inspect).\n\n#### Type declaration:\n\n* **ruleConfig**: *any*\n\n* **severity**: *string*\n\n* **showSecretsUnsafe**: *boolean*\n\n* **sort**: *boolean*\n\n* **sortDirection**: *\"desc\" | \"asc\"*\n\n* **sortField**: *string*\n\n___\n\n### RTKPlugin\n\nƬ **RTKPlugin**: *object*\n\nRepresents a \"plugin\".  As of this writing, plugins may only contain rule definitions for [inspect](report_toolkit_core.observable#inspect); it would make sense to add support for transformers, as well.\n\n#### Type declaration:\n\n* **rules**: *object[]*\n\n___\n\n### ToReportFromObjectOptions\n\nƬ **ToReportFromObjectOptions**: *object*\n\nOptions for [toReportFromObject](report_toolkit_core.observable#toreportfromobject).\n\n#### Type declaration:\n\n* **showSecretsUnsafe**: *boolean*\n\n___\n\n### TransformOptions\n\nƬ **TransformOptions**: *object*\n\nOptions for [transform](report_toolkit_core.observable#transform).\n\n#### Type declaration:\n\n* **beginWith**: *string*\n\n* **defaultTransformer**: *string*\n\n* **defaultTransformerConfig**: *any*\n\n* **endWith**: *string*\n\n___\n\n### TransformerBlueprint\n\nƬ **TransformerBlueprint**: *object*\n\nA pairing of a transformer ID and a configuration of that transformer, to be\ningested by [transform](report_toolkit_core.observable#transform).\n\n#### Type declaration:\n\n* **config**: *any*\n\n* **id**: *string*\n\n## Functions\n\n### deregisterPlugins\n\n▸ **deregisterPlugins**(): *boolean*\n\nDe-register (\"unload\") all plugins.\n\nExample:\n\n```js\nconst {deregisterPlugins} = require('@report-toolkit/core').observable;\n\nconsole.log(deregisterPlugins()); // `true` or `false`, depending.\n```\n\n**Returns:** *boolean*\n\n`true` if plugins were cleared; `false` if none registered\n\n___\n\n### diff\n\n▸ **diff**(`report1`: [DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) | [Report](../classes/report_toolkit_common.report.report) | Observable‹[DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) | [Report](../classes/report_toolkit_common.report.report)›, `report2`: [DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) | [Report](../classes/report_toolkit_common.report.report) | Observable‹[DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) | [Report](../classes/report_toolkit_common.report.report)›, `opts?`: Partial‹[DiffOptions](report_toolkit_core.observable#diffoptions)›): *Observable‹[DiffResult](report_toolkit_core.observable#diffresult)›*\n\nReturns the difference between two reports.\n\nExample:\n\n```js\nconst {diff} = require('@report-toolkit/core').observable;\n\nconst report1 = process.report.getReport();\nconst report2 = process.report.getReport();\n\ndiff(report1, report2, {\n  filterProperties: ['header', 'javascriptStack', 'nativeStack'],\n  showSecretsUnsafe: false\n}).subscribe(({op, path, newValue, oldValue}) => {\n  console.log(`[${op}] <${path}> ${oldValue} => ${newValue}`);\n})\n```\n\n**`todo`** support JSON reports\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`report1` | [DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) &#124; [Report](../classes/report_toolkit_common.report.report) &#124; Observable‹[DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) &#124; [Report](../classes/report_toolkit_common.report.report)› | First report to diff |\n`report2` | [DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) &#124; [Report](../classes/report_toolkit_common.report.report) &#124; Observable‹[DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) &#124; [Report](../classes/report_toolkit_common.report.report)› | Second report to diff |\n`opts?` | Partial‹[DiffOptions](report_toolkit_core.observable#diffoptions)› | - |\n\n**Returns:** *Observable‹[DiffResult](report_toolkit_core.observable#diffresult)›*\n\nResults, one per difference\n\n___\n\n### fromTransformerChain\n\n▸ **fromTransformerChain**(`transformerIds`: string | string[], `config?`: Partial‹any›): *Observable‹[TransformerBlueprint](report_toolkit_core.observable#transformerblueprint)›*\n\nGiven a list of transformer IDs, create an `Observable` which emits [TransformerBlueprint](report_toolkit_core.observable#transformerblueprint) objects. Output should be piped to [transform](report_toolkit_core.observable#transform).\n\nExample:\n\n```js\nconst {fromTransformerChain} = require('@report-toolkit/core').observable;\n\nfromTransformerChain(['filter', 'csv'], {\n  transformers: {\n    filter: {include: 'header'},\n    csv: {flatten: true}\n  }\n}); // pipe to transform()\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`transformerIds` | string &#124; string[] | List of Transformer IDs |\n`config?` | Partial‹any› | - |\n\n**Returns:** *Observable‹[TransformerBlueprint](report_toolkit_core.observable#transformerblueprint)›*\n\n___\n\n### inspect\n\n▸ **inspect**(`reports`: [DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) | [Report](../classes/report_toolkit_common.report.report) | Observable‹[DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) | [Report](../classes/report_toolkit_common.report.report)›, `opts?`: Partial‹[InspectOptions](report_toolkit_core.observable#inspectoptions)›): *Observable‹[Message](../classes/report_toolkit_inspector.message.message)›*\n\nInspect one or more reports, running rules against each.  Resolves with an array of zero or more [Messages](../classes/report_toolkit_inspector.message.message.mdx).\n\nExample:\n\n```js\nconst {inspect} = require('@report-toolkit/core').observable\n\nconst report = process.report.getReport();\ninspect(report, {\n  severity: 'info',\n  sort: true,\n  sortDirection: 'asc',\n  sortField: 'header.dumpEventTimestamp',\n  showSecretsUnsafe: false,\n  ruleConfig: {\n    'long-timeout': {\n      timeout: '2s'\n    }\n  }\n}).subscribe({message, filename} => {\n  console.log(`${filename}: ${message}`);\n});\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`reports` | [DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) &#124; [Report](../classes/report_toolkit_common.report.report) &#124; Observable‹[DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) &#124; [Report](../classes/report_toolkit_common.report.report)› | One or more Reports |\n`opts?` | Partial‹[InspectOptions](report_toolkit_core.observable#inspectoptions)› | - |\n\n**Returns:** *Observable‹[Message](../classes/report_toolkit_inspector.message.message)›*\n\n___\n\n### isPluginRegistered\n\n▸ **isPluginRegistered**(`pluginId`: string): *boolean*\n\nReturns `true` if plugin with id `pluginId` has already been registered.\n\n```js\nconst {isPluginRegistered} = require('@report-toolkit/core').observable;\n\nconsole.log(isPluginRegistered('my-plugin')); // `true` or `false`, depending.\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`pluginId` | string | A unique [module ID](https://nodejs.org/api/modules.html#modules_module_id)  |\n\n**Returns:** *boolean*\n\n___\n\n### loadConfig\n\n▸ **loadConfig**(`config`: any): *Observable‹any›*\n\nEmits normalized config objects from raw config objects. Only a single input config should be necessary.\n\nExample:\n\n```js\nconst {loadConfig} = require('@report-toolkit/core').observable;\n\n// or require('./path/to/.rtkrc.js')\nconst rawConfig = [\n  'report-toolkit:recommended',\n  {\n    rules: {\n      'long-timeout': {\n        timeout: '2s'\n      }\n    }\n  }\n];\n\nloadConfig(rawConfig).subscribe(normalizedConfig => {\n  // `normalizedConfig` contains contents of \"recommended\" settings,\n  // with our override of custom rule config\n});\n```\n\n**`todo`** ALWAYS load builtin plugin(s)\n\n**`todo`** Document config shape\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`config` | any | Raw config object |\n\n**Returns:** *Observable‹any›*\n\nNormalized config object(s)\n\n___\n\n### registeredRuleDefinitions\n\n▸ **registeredRuleDefinitions**(): *object[]*\n\nGet a list of rule definitions contained within registered plugins.\n\nExample:\n\n```js\nconst {registeredRuleDefinitions} = require('@report-toolkit/core').observable;\n\nregisteredRuleDefinitions().forEach(ruleDef => {\n  console.log(ruleDef.meta.id);\n})\n```\n\n**Returns:** *object[]*\n\n___\n\n### toReportFromObject\n\n▸ **toReportFromObject**(`opts?`: Partial‹[ToReportFromObjectOptions](report_toolkit_core.observable#toreportfromobjectoptions)›): *OperatorFunction‹any, Readonly‹[Report](../classes/report_toolkit_common.report.report)››*\n\nCreates a target `Observable` of [Report](../classes/report_toolkit_common.report.report.mdx) objects from a source `Observable` of plain objects (usually parsed from a JSON report).\n\nExample:\n\n```js\nconst {toReportFromObject} = require('@report-toolkit/core').observable;\n\nconst json = fs.readFileSync('./report-xxxxx.json');\ntoReportFromObject(json, {\n  showSecretsUnsafe: false\n}).subscribe(report => {\n // `Report` instance with secrets redacted\n});\n```\n\n**Parameters:**\n\nName | Type |\n------ | ------ |\n`opts?` | Partial‹[ToReportFromObjectOptions](report_toolkit_core.observable#toreportfromobjectoptions)› |\n\n**Returns:** *OperatorFunction‹any, Readonly‹[Report](../classes/report_toolkit_common.report.report)››*\n\n___\n\n### transform\n\n▸ **transform**(`source`: Observable‹any›, `opts?`: Partial‹[TransformOptions](report_toolkit_core.observable#transformoptions)›): *OperatorFunction‹[TransformerBlueprint](report_toolkit_core.observable#transformerblueprint), any›*\n\nRun `source` through chain of one or more transformers.  Pipe [fromTransformerChain](report_toolkit_core.observable#fromtransformerchain) into this.\nPerforms validation before piping.\nWhile most other functions here will automatically convert a raw report into a `Report` instance for further processing, this one does not (since transformers don't necessarily accept them).  You'll need to do this manually, as seen in the below example.\nIf the final transformer does not output the desired `endType`, the `defaultTransformer` will be appended to the chain; otherwise it is ignored.\n\nExample:\n\n```js\nconst {fromTransformerChain, transform, toReportFromObject} = require('@report-toolkit/core').observable;\n\nconst report$ = toReportFromObject(process.report.getReport());\nfromTransformerChain(['filter', 'csv'], {\n  transformers: {\n    filter: {include: 'header'},\n    csv: {flatten: true}\n  }\n}).pipe(transform(report$)).subscribe(line => {\n  console.log(line);\n});\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`source` | Observable‹any› | Source data to transform.  Objects, [Reports](../classes/report_toolkit_common.report.report.mdx), etc. |\n`opts?` | Partial‹[TransformOptions](report_toolkit_core.observable#transformoptions)› | - |\n\n**Returns:** *OperatorFunction‹[TransformerBlueprint](report_toolkit_core.observable#transformerblueprint), any›*\n\nResult of running `source` through the transformer chains.\n\n___\n\n### use\n\n▸ **use**(`pluginId`: string): *Observable‹[RTKPlugin](report_toolkit_core.observable#rtkplugin)›*\n\nRegister & enable a plugin.\n\nExample:\n\n```js\nconst {use} = require('@report-toolkit/core').observable;\n\nuse('some-plugin-in-node_modules').subscribe();\n\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`pluginId` | string | ID of plugin to register; a resolvable path to a module |\n\n**Returns:** *Observable‹[RTKPlugin](report_toolkit_core.observable#rtkplugin)›*\n\nA plugin instance, but YAGNI.\n\n","type":"Mdx","contentDigest":"ecf343006399c14973e2d1a9b5b322ca","counter":110,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"observable"},"exports":{},"rawBody":"---\ntitle: \"observable\"\n---\n\n<Breadcrumb noTrailingSlash>\n<BreadcrumbItem><a href=\"../../../../../../api\">report-toolkit API</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"report_toolkit_core\">@report-toolkit/core</a></BreadcrumbItem>\n<BreadcrumbItem><a href=\"report_toolkit_core.observable\">observable</a></BreadcrumbItem>\n</Breadcrumb>\n\n[RxJS](https://rxjs.dev) `Observable`-based API. Used interally, but can also be used by consumers.\n\n## Index\n\n### Type aliases\n\n- [Config](report_toolkit_core.observable#config)\n- [DiffOptions](report_toolkit_core.observable#diffoptions)\n- [DiffResult](report_toolkit_core.observable#diffresult)\n- [InspectOptions](report_toolkit_core.observable#inspectoptions)\n- [RTKPlugin](report_toolkit_core.observable#rtkplugin)\n- [ToReportFromObjectOptions](report_toolkit_core.observable#toreportfromobjectoptions)\n- [TransformOptions](report_toolkit_core.observable#transformoptions)\n- [TransformerBlueprint](report_toolkit_core.observable#transformerblueprint)\n\n### Functions\n\n- [deregisterPlugins](report_toolkit_core.observable#deregisterplugins)\n- [diff](report_toolkit_core.observable#diff)\n- [fromTransformerChain](report_toolkit_core.observable#fromtransformerchain)\n- [inspect](report_toolkit_core.observable#inspect)\n- [isPluginRegistered](report_toolkit_core.observable#ispluginregistered)\n- [loadConfig](report_toolkit_core.observable#loadconfig)\n- [registeredRuleDefinitions](report_toolkit_core.observable#registeredruledefinitions)\n- [toReportFromObject](report_toolkit_core.observable#toreportfromobject)\n- [transform](report_toolkit_core.observable#transform)\n- [use](report_toolkit_core.observable#use)\n\n## Type aliases\n\n### Config\n\nƬ **Config**: *any*\n\nA \"normalized\" configuration object.\n\n___\n\n### DiffOptions\n\nƬ **DiffOptions**: *object*\n\nOptions for [diff](report_toolkit_core.observable#diff).\n\n#### Type declaration:\n\n* **excludeProperties**: *string[]*\n\n* **includeAll**: *boolean*\n\n* **includeProperties**: *string[]*\n\n* **showSecretsUnsafe**: *boolean*\n\n___\n\n### DiffResult\n\nƬ **DiffResult**: *object*\n\nA single difference between two reports.  Emitted from [diff](report_toolkit_core.observable#diff).\n\n#### Type declaration:\n\n* **oldValue**: *string | number | boolean*\n\n* **op**: *\"replace\" | \"add\" | \"remove\"*\n\n* **path**: *string*\n\n* **value**: *string | number | boolean*\n\n___\n\n### InspectOptions\n\nƬ **InspectOptions**: *object*\n\nOptions for [inspect](report_toolkit_core.observable#inspect).\n\n#### Type declaration:\n\n* **ruleConfig**: *any*\n\n* **severity**: *string*\n\n* **showSecretsUnsafe**: *boolean*\n\n* **sort**: *boolean*\n\n* **sortDirection**: *\"desc\" | \"asc\"*\n\n* **sortField**: *string*\n\n___\n\n### RTKPlugin\n\nƬ **RTKPlugin**: *object*\n\nRepresents a \"plugin\".  As of this writing, plugins may only contain rule definitions for [inspect](report_toolkit_core.observable#inspect); it would make sense to add support for transformers, as well.\n\n#### Type declaration:\n\n* **rules**: *object[]*\n\n___\n\n### ToReportFromObjectOptions\n\nƬ **ToReportFromObjectOptions**: *object*\n\nOptions for [toReportFromObject](report_toolkit_core.observable#toreportfromobject).\n\n#### Type declaration:\n\n* **showSecretsUnsafe**: *boolean*\n\n___\n\n### TransformOptions\n\nƬ **TransformOptions**: *object*\n\nOptions for [transform](report_toolkit_core.observable#transform).\n\n#### Type declaration:\n\n* **beginWith**: *string*\n\n* **defaultTransformer**: *string*\n\n* **defaultTransformerConfig**: *any*\n\n* **endWith**: *string*\n\n___\n\n### TransformerBlueprint\n\nƬ **TransformerBlueprint**: *object*\n\nA pairing of a transformer ID and a configuration of that transformer, to be\ningested by [transform](report_toolkit_core.observable#transform).\n\n#### Type declaration:\n\n* **config**: *any*\n\n* **id**: *string*\n\n## Functions\n\n### deregisterPlugins\n\n▸ **deregisterPlugins**(): *boolean*\n\nDe-register (\"unload\") all plugins.\n\nExample:\n\n```js\nconst {deregisterPlugins} = require('@report-toolkit/core').observable;\n\nconsole.log(deregisterPlugins()); // `true` or `false`, depending.\n```\n\n**Returns:** *boolean*\n\n`true` if plugins were cleared; `false` if none registered\n\n___\n\n### diff\n\n▸ **diff**(`report1`: [DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) | [Report](../classes/report_toolkit_common.report.report) | Observable‹[DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) | [Report](../classes/report_toolkit_common.report.report)›, `report2`: [DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) | [Report](../classes/report_toolkit_common.report.report) | Observable‹[DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) | [Report](../classes/report_toolkit_common.report.report)›, `opts?`: Partial‹[DiffOptions](report_toolkit_core.observable#diffoptions)›): *Observable‹[DiffResult](report_toolkit_core.observable#diffresult)›*\n\nReturns the difference between two reports.\n\nExample:\n\n```js\nconst {diff} = require('@report-toolkit/core').observable;\n\nconst report1 = process.report.getReport();\nconst report2 = process.report.getReport();\n\ndiff(report1, report2, {\n  filterProperties: ['header', 'javascriptStack', 'nativeStack'],\n  showSecretsUnsafe: false\n}).subscribe(({op, path, newValue, oldValue}) => {\n  console.log(`[${op}] <${path}> ${oldValue} => ${newValue}`);\n})\n```\n\n**`todo`** support JSON reports\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`report1` | [DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) &#124; [Report](../classes/report_toolkit_common.report.report) &#124; Observable‹[DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) &#124; [Report](../classes/report_toolkit_common.report.report)› | First report to diff |\n`report2` | [DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) &#124; [Report](../classes/report_toolkit_common.report.report) &#124; Observable‹[DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) &#124; [Report](../classes/report_toolkit_common.report.report)› | Second report to diff |\n`opts?` | Partial‹[DiffOptions](report_toolkit_core.observable#diffoptions)› | - |\n\n**Returns:** *Observable‹[DiffResult](report_toolkit_core.observable#diffresult)›*\n\nResults, one per difference\n\n___\n\n### fromTransformerChain\n\n▸ **fromTransformerChain**(`transformerIds`: string | string[], `config?`: Partial‹any›): *Observable‹[TransformerBlueprint](report_toolkit_core.observable#transformerblueprint)›*\n\nGiven a list of transformer IDs, create an `Observable` which emits [TransformerBlueprint](report_toolkit_core.observable#transformerblueprint) objects. Output should be piped to [transform](report_toolkit_core.observable#transform).\n\nExample:\n\n```js\nconst {fromTransformerChain} = require('@report-toolkit/core').observable;\n\nfromTransformerChain(['filter', 'csv'], {\n  transformers: {\n    filter: {include: 'header'},\n    csv: {flatten: true}\n  }\n}); // pipe to transform()\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`transformerIds` | string &#124; string[] | List of Transformer IDs |\n`config?` | Partial‹any› | - |\n\n**Returns:** *Observable‹[TransformerBlueprint](report_toolkit_core.observable#transformerblueprint)›*\n\n___\n\n### inspect\n\n▸ **inspect**(`reports`: [DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) | [Report](../classes/report_toolkit_common.report.report) | Observable‹[DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) | [Report](../classes/report_toolkit_common.report.report)›, `opts?`: Partial‹[InspectOptions](report_toolkit_core.observable#inspectoptions)›): *Observable‹[Message](../classes/report_toolkit_inspector.message.message)›*\n\nInspect one or more reports, running rules against each.  Resolves with an array of zero or more [Messages](../classes/report_toolkit_inspector.message.message.mdx).\n\nExample:\n\n```js\nconst {inspect} = require('@report-toolkit/core').observable\n\nconst report = process.report.getReport();\ninspect(report, {\n  severity: 'info',\n  sort: true,\n  sortDirection: 'asc',\n  sortField: 'header.dumpEventTimestamp',\n  showSecretsUnsafe: false,\n  ruleConfig: {\n    'long-timeout': {\n      timeout: '2s'\n    }\n  }\n}).subscribe({message, filename} => {\n  console.log(`${filename}: ${message}`);\n});\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`reports` | [DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) &#124; [Report](../classes/report_toolkit_common.report.report) &#124; Observable‹[DiagnosticReport](../interfaces/common_diagnostic_report_d_.diagnosticreport) &#124; [Report](../classes/report_toolkit_common.report.report)› | One or more Reports |\n`opts?` | Partial‹[InspectOptions](report_toolkit_core.observable#inspectoptions)› | - |\n\n**Returns:** *Observable‹[Message](../classes/report_toolkit_inspector.message.message)›*\n\n___\n\n### isPluginRegistered\n\n▸ **isPluginRegistered**(`pluginId`: string): *boolean*\n\nReturns `true` if plugin with id `pluginId` has already been registered.\n\n```js\nconst {isPluginRegistered} = require('@report-toolkit/core').observable;\n\nconsole.log(isPluginRegistered('my-plugin')); // `true` or `false`, depending.\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`pluginId` | string | A unique [module ID](https://nodejs.org/api/modules.html#modules_module_id)  |\n\n**Returns:** *boolean*\n\n___\n\n### loadConfig\n\n▸ **loadConfig**(`config`: any): *Observable‹any›*\n\nEmits normalized config objects from raw config objects. Only a single input config should be necessary.\n\nExample:\n\n```js\nconst {loadConfig} = require('@report-toolkit/core').observable;\n\n// or require('./path/to/.rtkrc.js')\nconst rawConfig = [\n  'report-toolkit:recommended',\n  {\n    rules: {\n      'long-timeout': {\n        timeout: '2s'\n      }\n    }\n  }\n];\n\nloadConfig(rawConfig).subscribe(normalizedConfig => {\n  // `normalizedConfig` contains contents of \"recommended\" settings,\n  // with our override of custom rule config\n});\n```\n\n**`todo`** ALWAYS load builtin plugin(s)\n\n**`todo`** Document config shape\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`config` | any | Raw config object |\n\n**Returns:** *Observable‹any›*\n\nNormalized config object(s)\n\n___\n\n### registeredRuleDefinitions\n\n▸ **registeredRuleDefinitions**(): *object[]*\n\nGet a list of rule definitions contained within registered plugins.\n\nExample:\n\n```js\nconst {registeredRuleDefinitions} = require('@report-toolkit/core').observable;\n\nregisteredRuleDefinitions().forEach(ruleDef => {\n  console.log(ruleDef.meta.id);\n})\n```\n\n**Returns:** *object[]*\n\n___\n\n### toReportFromObject\n\n▸ **toReportFromObject**(`opts?`: Partial‹[ToReportFromObjectOptions](report_toolkit_core.observable#toreportfromobjectoptions)›): *OperatorFunction‹any, Readonly‹[Report](../classes/report_toolkit_common.report.report)››*\n\nCreates a target `Observable` of [Report](../classes/report_toolkit_common.report.report.mdx) objects from a source `Observable` of plain objects (usually parsed from a JSON report).\n\nExample:\n\n```js\nconst {toReportFromObject} = require('@report-toolkit/core').observable;\n\nconst json = fs.readFileSync('./report-xxxxx.json');\ntoReportFromObject(json, {\n  showSecretsUnsafe: false\n}).subscribe(report => {\n // `Report` instance with secrets redacted\n});\n```\n\n**Parameters:**\n\nName | Type |\n------ | ------ |\n`opts?` | Partial‹[ToReportFromObjectOptions](report_toolkit_core.observable#toreportfromobjectoptions)› |\n\n**Returns:** *OperatorFunction‹any, Readonly‹[Report](../classes/report_toolkit_common.report.report)››*\n\n___\n\n### transform\n\n▸ **transform**(`source`: Observable‹any›, `opts?`: Partial‹[TransformOptions](report_toolkit_core.observable#transformoptions)›): *OperatorFunction‹[TransformerBlueprint](report_toolkit_core.observable#transformerblueprint), any›*\n\nRun `source` through chain of one or more transformers.  Pipe [fromTransformerChain](report_toolkit_core.observable#fromtransformerchain) into this.\nPerforms validation before piping.\nWhile most other functions here will automatically convert a raw report into a `Report` instance for further processing, this one does not (since transformers don't necessarily accept them).  You'll need to do this manually, as seen in the below example.\nIf the final transformer does not output the desired `endType`, the `defaultTransformer` will be appended to the chain; otherwise it is ignored.\n\nExample:\n\n```js\nconst {fromTransformerChain, transform, toReportFromObject} = require('@report-toolkit/core').observable;\n\nconst report$ = toReportFromObject(process.report.getReport());\nfromTransformerChain(['filter', 'csv'], {\n  transformers: {\n    filter: {include: 'header'},\n    csv: {flatten: true}\n  }\n}).pipe(transform(report$)).subscribe(line => {\n  console.log(line);\n});\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`source` | Observable‹any› | Source data to transform.  Objects, [Reports](../classes/report_toolkit_common.report.report.mdx), etc. |\n`opts?` | Partial‹[TransformOptions](report_toolkit_core.observable#transformoptions)› | - |\n\n**Returns:** *OperatorFunction‹[TransformerBlueprint](report_toolkit_core.observable#transformerblueprint), any›*\n\nResult of running `source` through the transformer chains.\n\n___\n\n### use\n\n▸ **use**(`pluginId`: string): *Observable‹[RTKPlugin](report_toolkit_core.observable#rtkplugin)›*\n\nRegister & enable a plugin.\n\nExample:\n\n```js\nconst {use} = require('@report-toolkit/core').observable;\n\nuse('some-plugin-in-node_modules').subscribe();\n\n```\n\n**Parameters:**\n\nName | Type | Description |\n------ | ------ | ------ |\n`pluginId` | string | ID of plugin to register; a resolvable path to a module |\n\n**Returns:** *Observable‹[RTKPlugin](report_toolkit_core.observable#rtkplugin)›*\n\nA plugin instance, but YAGNI.\n\n","fileAbsolutePath":"/Users/boneskull/projects/boneskull/report-toolkit/packages/docs/src/pages/api/modules/report_toolkit_core.observable.mdx"}}}}