{"componentChunkName":"component---src-pages-config-index-mdx","path":"/config/","result":{"pageContext":{"frontmatter":{"title":"report-toolkit Configuration"},"relativePagePath":"/config/index.mdx","titleType":"append","MdxNode":{"id":"fccd1d14-a18f-5bcd-8b04-e38afe8356d1","children":[],"parent":"cc2e4e8c-43e7-59f8-8f76-1153ad569eee","internal":{"content":"---\ntitle: report-toolkit Configuration\n---\n\n<PageDescription>\n\n**<Metadata prop=\"packageName\"/>**'s behavior can be controlled via configuration file. This document serves as both a guide and configuration file format reference.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Do I Need a Configuration File?</AnchorLink>\n  <AnchorLink>Configuration File Location and Naming</AnchorLink>\n  <AnchorLink>Configuration File Format</AnchorLink>\n  <AnchorLink>Configuration By Example</AnchorLink>\n  <AnchorLink to=\"#configuration-reference\">\n    Configuration File Reference\n    <AnchorLinks small>\n      <AnchorLink to=\"#commands-property\">commands</AnchorLink>\n      <AnchorLink to=\"#rules-property\">rules</AnchorLink>\n      <AnchorLink to=\"#transformers-property\">transformers</AnchorLink>\n      <AnchorLink to=\"#plugins-property\">plugins</AnchorLink>\n    </AnchorLinks>\n  </AnchorLink>\n</AnchorLinks>\n\n## Do I Need a Configuration File?\n\nIn general, you only need a configuration file if one of the following statements is true:\n\n- You want to customize the behavior of built-in rules when using `inspect`.\n- You want to use a custom rule with `inspect`.\n- You want to configure one or more commands to _always_ use a particular option (unless overridden by command-line flags).\n- You want to configure alternative transformer defaults.\n\nIf you have answered \"no\" to all of the above, then **you don't need a configuration file.** Come back to this page if you ever do!\n\n## Configuration File Location and Naming\n\nUnless [given an explicit filepath](/cli#-rc-lesspathto.rtkrc.jsgreater) to a configuration file, <Metadata prop=\"executable\"/> will _search_ for a configuration file. This section describes recommended locations (depending on use-case), and the places in which it will otherwise search.\n\n### Recommended Locations\n\nFor a configuration **specific to a project**, the recommended location is in the **project root** as `.rtkrc.js`, alongside `package.json` and your other dotfiles. Keep the configuration under version control.\n\nFor a configuration **at the system level**, the recommended location is the user's **home directory** in `$HOME/.rtkrc.js`. The \"user\", in this case, is the user executing <Metadata prop=\"executable\"/>; this is _not_ the owner of the process which generated the Diagnostic Report file!\n\n### Configuration Search Paths\n\nIn addition to the [recommended locations](#recommended-locations), <Metadata prop=\"packageName\"/> will search for a configuration file named `.rtkrc.js` (preferred) or `rtk.config.js` in the following order, choosing the first found:\n\n1. The current working directory\n1. The parent of the current working directory, and the grandparent, all the way up to the user's `$HOME` directory _or_ the filesystem root (whichever comes first)\n1. The user's `$HOME` directory, if it is not an ancestor of the current working directory\n1. The subdirectory `etc/` of the result of `npm config prefix get` (e.g., `/usr/local/etc` or `$HOME/.nvm/versions/node/(version)/etc`)\n1. (If on a POSIX OS) `$XDG_CONFIG_HOME` and `$XDG_CONFIG_DIRS`\n1. (If on a POSIX OS) `/etc`\n\nRemember, if none of the above work for your use-case, you can always [specify an explicit filepath](/cli#-rc-lesspathto.rtkrc.jsgreater).\n\n## Configuration File Format\n\nMany tools allow configuration in different file formats, including JSON, YAML, and JavaScript. <Metadata prop=\"packageName\"/> is not such a tool.\n\n**<Metadata prop=\"packageName\"/> configuration files are JavaScript only.**\n\n<InlineNotification kind=\"warning\">\n\nAs of v0.5.1, EcmaScript modules are _not_ supported for configuration files.\n\n</InlineNotification>\n\nThere are benefits and drawbacks to this approach, of course, but choosing JavaScript means more power for the user, and easier parsing for <Metadata prop=\"packageName\"/>.\n\nAs for the _content_ of the configuration file, it must:\n\n- Be written in JavaScript.\n- Export an non-empty `Array` property named `config`.\n\nWith that understood, let's look at some examples.\n\n## Configuration By Example\n\nWe'll start by looking at a minimal configuration example, then exploring the builtin \"recommended\" configuration, and finally learn how to customize it.\n\n### Minimal Configuration Example\n\nThe simplest configuration file is perhaps the following:\n\n```js\nexports.config = ['rtk:recommended'];\n```\n\nThis loads the built-in \"recommended\" configuration _by its alias_, `rtk:recommended`. `rtk:recommended` _also_ happens to be the default configuration (if no config file is present), so the above is rather pointless.\n\nThe above can be expressed in an awkward, verbose way (which is what the alias is for):\n\n```js\n// don't do this!\nexports.config = [require('@report-toolkit/common/src/configs/recommended')];\n```\n\n<InlineNotification kind=\"info\">\n\nAs of v0.5.1, `rtk:recommended` is the _only_ alias. Aliases are reserved for built-in configurations; they won't work for any other \"named\" configuration.\n\n</InlineNotification>\n\nFor an less-trivial example, let's take a closer look at this `rtk:recommended` config.\n\n### Basic Configuration Example\n\nThis is the contents of the `rtk:recommended` config, which can serve as a basic\nexample:\n\n```js file=./recommended.js.txt\n```\n\nThe above configuration file has two exports; `config` and `alias`. The latter, `alias`, is reserved for built-in configurations--this is where the `rtk:recommended` name comes from; it can be safely ignored.\n\nThe `config` export is always an array. In the case above, the array has a single object with a `rules` property. This property configures the Rules which the [inspect command](/cli/#the-inspect-command) uses. The _keys_ are Rule names, and the _values_ are the corresponding Rule-specific configuration for each Rule.\n\nWhile each Rule has its own set of options, we can use `true` to _enable the Rule and its default behavior_. Conversely, `false` will disable the Rule altogether.\n\nIn the `rtk:recommended` config, all four (4) the built-in rules are enabled with their defaults.\n\n<InlineNotification kind=\"warning\">\n\nNote that **if a configuration file is detected, all rules are disabled by default**. This means that a config file must enable each. The most straightforward way to do this is to just use the `rtk:recommended` config.\n\n</InlineNotification>\n\nNext, we'll learn how to build on top of the \"recommended\" config with our own configuration.\n\n### Customizing the \"Recommended\" Configuration\n\nWe're going to customize the \"recommended\" configuration. Create an empty config file and call it `.rtkrc.js`--and place it in your current working directory (or project root, or even your user's `$HOME` directory; for our purposes, this doesn't matter, as long as `rtk` can find it):\n\nOpen `.rtkrc.js` in your favorite editor. Copy and paste this into it:\n\n```js\nexports.config = ['rtk.recommended'];\n```\n\nIt is no accident that the `config` property is an `Array`. **Each item in the `config` export is _deeply merged_ into the item before it.** Kind of like the parameters to [`Object.assign()`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)--but a \"deep\" instead of \"shallow\" copy. In practical terms, we can override any given property within the `rtk.recommended` config by appending a _configuration object_ to the `config` export.\n\nLet's take advantage of the deep merging, and configure the `cpu-usage` rule (which emits a message if the total CPU usage across all cores is not within a defined range) to increase its threshold from the default, 50%, to 75%.\n\nChange your `.rtkrc.js` to the following:\n\n```js\nexports.config = [\n  'rtk.recommended',\n  {\n    rules: {\n      'cpu-usage': {\n        enabled: true,\n        max: 75\n      }\n    }\n  }\n];\n```\n\nInternally, the merge of our configuration object (the second item in `exports.config`) into the `rtk:recommended` config results in a final object that looks somewhat like this:\n\n```js\n// This is just for purposes of illustration, and is not a configuration file!\nlet config = {\n  rules: {\n    'cpu-usage': {\n      enabled: true,\n      max: 75\n    },\n    'library-mismatch': true,\n    'long-timeout': true,\n    'memory-usage': true\n  }\n};\n```\n\nNow, when you run `rtk inspect <report-file>`, the `cpu-usage` rule won't emit a Message unless the total CPU usage in the report is at or above 75%.\n\n### Using a Shared Configuration\n\nA _shared_ configuration is essentially _some other config file_. The \"recommended\" config is a shared configuration. Recall that, instead of using the `rtk:recommended` alias, we could `require()` it instead. The previous example config could be rewritten as:\n\n```js\nexports.config = [\n  require('@report-toolkit/common/src/configs/recommended'),\n  {\n    rules: {\n      'cpu-usage': {\n        enabled: true,\n        max: 75\n      }\n    }\n  }\n];\n```\n\nOf course, that's tedious; hence the `rtk:recommended` alias. But the idea is still applicable: **you can include any other config file via `require()`.** Perhaps you have a custom config that you wish to share with your team. For example, you could create a package called `report-toolkit-config-pork-chop-sandwich` and publish it to npm. This package would contain an `index.js`, which would just be a regular `report-toolkit` config file (containing a `config` export). You can then install it into your project, and use it like so:\n\n```js\nexports.config = [\n  'rtk:recommended',\n  require('report-toolkit-config-pork-chop-sandwich'),\n  {\n    rules: {\n      // customize report-toolkit-pork-chop-sandwich further\n    }\n  }\n];\n```\n\nAll three config objects will be merged together, with priority in ascending order.\n\n<InlineNotification kind=\"info\">\n\nBecause config files are JavaScript, you can easily add logic to them. For example, you may want to change the behavior of a particular rule if a certain environment variable is set by looking at `process.env`. Go wild!\n\n</InlineNotification>\n\nThis covers the basics of using configuration files. The next section is a reference of the allowed configuration properties.\n\n## Configuration Reference\n\n### Exports\n\nA configuration file has a single export: `config`.\n\nThe `config` export be an `Array` of [_config objects_](#config-objects) or `string`s corresponding to builtin aliases.\n\n<InlineNotification kind=\"info\">\n\nAs of v0.5.1, `rtk:recommended` is the _only_ builtin alias.\n\n</InlineNotification>\n\nOrder matters; subsequent items will be deeply merged into previous items, overriding their settings.\n\n### Config Objects\n\nA _config object_ is an object containing zero or more of the following properties:\n\n- [`commands`](#commands-property): An object containing keys corresponding to _Command_ names, and values of Command-specific defaults.\n- [`plugins`](#plugins-property): An array of _Plugins_.\n- [`rules`](#rules-property): An object containing keys corresponding to _Rule_ names, and values of Rule-specific options.\n- [`transformers`](#transformers-property): An object containing keys corresponding to _Transformer_ names, and values of Transformer-specific defaults.\n\nWhen you `require()` another config file, you're requiring a module with a `config` export. This means that the following property is supported, but not used directly:\n\n- `config`: Contains a config object.\n\nThe contents of [`commands`](#commands-property), [`plugins`](#plugins-property), [`rules`](#rules-property), and [`transformers`](#transformers-property) are described below.\n\n#### `commands` Property\n\nA _Command_ is an [`rtk` command](/cli/#available-commands). Use the `commands` property to change the default behavior of one or more Commands.\n\nAllowed keys are the supported command names:\n\n- `diff`\n- `inspect`\n- `redact`\n- `transform`\n\nAllowed properties of each are described below; these correspond to the allowed options for the particular command. In addition, properties corresponding to [global options](/cli/#global-options) are allowed.\n\n<InlineNotification kind=\"info\">\n\nYou can derive the name of any property from the command-line options. For example, the global `--verbose` option is a boolean flag. To make this the default behavior for a given command, use `{verbose: true}`.\n\nYou can use camelCase or dashes, where applicable; e.g., `--max-width=50` could be represented as `{'max-width': 50}` _or_ `{maxWidth: 50}`.\n\n</InlineNotification>\n\n##### `commands.diff` Properties\n\nIf present in a `commands.diff` object, these properties will influence the default behavior of `rtk diff`. Command-line arguments will have precedence over these defaults.\n\nFor more information on these options, please see the [docs for `diff`'s options](/cli/#diff-options).\n\n- **`includeProp`** `{string|string[]}`: One or more properties in \"dot notation\" (e.g., `header.nodeJsVersion`) to include.\n- **`excludeProp`** `{string|string[]}`: One or more properties in \"dot notation\" to (e.g., `header.nodeJsVersion`) exclude.\n- **`all`** `{boolean}`: If `true`, include _all_ properties in a diff.\n\nAlso included are the [common output properties](#common-output-properties).\n\n##### `commands.inspect` Properties\n\nIf present in a `commands.inspect` object, these properties will influence the default behavior of `rtk inspect`. Command-line arguments will have precedence over these defaults.\n\nFor more information on these options, please see the [docs for `inspect`'s options](/cli/#inspect-options).\n\n- **`severity`** `{\"error\"|\"warning\"|\"info\"}`: Minimum severity level of a Message to display. The default is `warning`.\n\nAlso included are the [common output properties](#common-output-properties).\n\n##### `commands.redact` Properties\n\nIf present in a `commands.redact` object, these properties will influence the default behavior of `rtk redact`. Command-line arguments will have precedence over these defaults.\n\nFor more information on these options, please see the [docs for `redact`'s options](/cli/#redact-options).\n\n- **`replace`** `{boolean}`: If `true`, overwrite report file in place.\n- **`pretty`** `{boolean}`: If `false`, do not output pretty-printed JSON. Defaults to `true`.\n\n##### `command.transform` Properties\n\n**Note: these settings apply only to the `transform` command.** To change default transformer behavior across _all_ commands, use the [`transformers` config property].\n\nIf present in a `commands.transform` object, these properties will influence the default behavior of `rtk transform`. Command-line arguments will have precedence over these defaults.\n\n`commands.transform` has no unique properties in addition to [the common output properties](#common-output-properties).\n\n##### Common Output Properties\n\nThese properties can be used within `commands.diff`, `commands.inspect`, and `commands.transform`. They influence the default behavior, and command-line arguments will have precedence over these.\n\n- **`output`** `{string}`: Write output to file instead of `STDOUT`. Be sure this is what you really want!\n- **`show-secrets-unsafe`** `{boolean}`: If `true`, do _not_ redact secrets. Careful!\n- **`transform`** {string}: Use a transformer. Read more about the [allowed transformers](/cli/#-transform-lesstransformergreater-t-lesstransformergreater).\n\nAlso allowed are transformer-specific options, which are equivalent to the [list of those available](/cli/#transformer-specific-options) in the CLI.\n\n#### `transformers` Property\n\nThis property allows default transformer behavior to be set \"globally\". For instance, if you'd like to _not_ pretty-print JSON when using the `json` transformer (with _any_ command), use `transformers` to configure this.\n\nEach key in this property corresponds to a [transformer name](/cli/#-transform-lesstransformergreater-t-lesstransformergreater). The value is an object corresponding to the [transformer-specific options](/cli/#transformer-specific-options) for the transformer.\n\nThe example above can be expressed as:\n\n```js\n{\n  transformers: {\n    json: {\n      pretty: false;\n    }\n  }\n}\n```\n\nCommand-specific transformer configuration has precedence over this \"global\" configuration. For example, you can re-enable `pretty` for `redact`, while remaining disabled for all other commands:\n\n```js\n{\n  transformers: {\n    json: {\n      pretty: false\n    }\n  },\n  commands: {\n    redact: {\n      pretty: true\n    }\n  }\n}\n```\n\n### `rules` Property\n\nThe `rules` property allows configuration of Rule behavior (used with the `inspect` command).\n\nThis property is an object where the keys correspond to a Rule identifier. Each Rule--builtin or custom--has a unique identifier. The builtin Rule identifiers are:\n\n- [`cpu-usage`](#cpu-usage-options): Assert CPU usage % is within a range\n- [`library-mismatch`](#library-mismatch-options): Identify potential shared library version mismatches\n- [`long-timeout`](#long-timeout-options): Warn about far-future callbacks in timeout queue\n- [`memory-usage`](#memory-usage-options): Assert memory usage % is within a range\n\n#### `cpu-usage` Options\n\nThe `cpu-usage` Rule checks if the total CPU usage is within an allowed range. The total CPU usage is calculated _across all cores_. Besides the obvious, it also supports a _minimum_ value, which can surface issues with processes that _should_ be using cycles, but aren't.\n\n`cpu-usage` can check the aggregate of multiple reports.\n\n- `max` `{integer}`: Maximum allowed CPU usage, used as a percentage. Default is `50`.\n- `min` `{integer}`: Minimum allowed CPU usage, used as a percentage. Default is `0`.\n- `mode` `{\"mean\"|\"min\"|\"max\"|\"all\"}`: One of four different modes:\n  - `mean`: Check the mean CPU usage across all reports. Default.\n  - `min`: Check the minimum CPU usage found across all reports.\n  - `max`: Check the maximum CPU usage found across all reports.\n  - `all`: Check _each report individually_ for CPU usage in the allowed range.\n\n#### `library-mismatch` Options\n\nThe `library-mismatch` Rule checks the shared libraries in use vs. what libraries Node.js was compiled with. A version mismatch can cause unexpected behavior.\n\n`library-mismatch` checks a single report at a time.\n\n- `ignore` `{string}[]`: One (1) or more components (as found in the keys of `header.componentVersions`) to ignore; mismatches will not be reported for these libraries.\n\n#### `long-timeout` Options\n\nThe `long-timeout` Rule checks for suspicious callbacks waiting in the event loop. These can cause a program to keep running when it was expected to exit.\n\n`long-timeout` checks a single report at a time.\n\n- `timeout` `{integer|string}`: A number (in milliseconds) or shorthand string representation of time, e.g., `1s`. See [the ms package](https://npm.im/ms) for formatting of strings. An active timeout in the event loop waiting at least this long will cause the Rule to emit. Default timeout is ten (10) seconds.\n\n#### `memory-usage` Options\n\nThe `memory` Rule checks the memory usage is within a range.\n\n`memory-usage` can check the aggregate of multiple reports.\n\n- `max` `{integer}`: Maximum allowed memory usage, used as a percentage. Default is `50`.\n- `min` `{integer}`: Minimum allowed memory usage, used as a percentage. Default is `0`.\n- `mode` `{\"mean\"|\"min\"|\"max\"|\"all\"}`: One of four different modes:\n  - `mean`: Check the mean memory usage across all reports. Default.\n  - `min`: Check the minimum memory usage found across all reports.\n  - `max`: Check the maximum memory usage found across all reports.\n  - `all`: Check _each report individually_ for memory usage in the allowed range.\n\n### `plugins` Property\n\nThis property is a list of third-party plugins. The `@report-toolkit/inspector` \"plugin\" (which provides the builtin Rules) is always loaded. This does not imply all rules are enabled, however!\n\nExample:\n\n```js\n{\n  plugins: ['@bigco/big-report-toolkit-plugin'];\n}\n```\n\nPlugins will be resolved from the current working directory. Try `require.resolve('my-plugin')` or an absolute path if you're having trouble.\n\n_TODO: Document how to write a plugin!_\n","type":"Mdx","contentDigest":"22742b0fe82132fa438feb2148ad8608","counter":108,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"report-toolkit Configuration"},"exports":{},"rawBody":"---\ntitle: report-toolkit Configuration\n---\n\n<PageDescription>\n\n**<Metadata prop=\"packageName\"/>**'s behavior can be controlled via configuration file. This document serves as both a guide and configuration file format reference.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Do I Need a Configuration File?</AnchorLink>\n  <AnchorLink>Configuration File Location and Naming</AnchorLink>\n  <AnchorLink>Configuration File Format</AnchorLink>\n  <AnchorLink>Configuration By Example</AnchorLink>\n  <AnchorLink to=\"#configuration-reference\">\n    Configuration File Reference\n    <AnchorLinks small>\n      <AnchorLink to=\"#commands-property\">commands</AnchorLink>\n      <AnchorLink to=\"#rules-property\">rules</AnchorLink>\n      <AnchorLink to=\"#transformers-property\">transformers</AnchorLink>\n      <AnchorLink to=\"#plugins-property\">plugins</AnchorLink>\n    </AnchorLinks>\n  </AnchorLink>\n</AnchorLinks>\n\n## Do I Need a Configuration File?\n\nIn general, you only need a configuration file if one of the following statements is true:\n\n- You want to customize the behavior of built-in rules when using `inspect`.\n- You want to use a custom rule with `inspect`.\n- You want to configure one or more commands to _always_ use a particular option (unless overridden by command-line flags).\n- You want to configure alternative transformer defaults.\n\nIf you have answered \"no\" to all of the above, then **you don't need a configuration file.** Come back to this page if you ever do!\n\n## Configuration File Location and Naming\n\nUnless [given an explicit filepath](/cli#-rc-lesspathto.rtkrc.jsgreater) to a configuration file, <Metadata prop=\"executable\"/> will _search_ for a configuration file. This section describes recommended locations (depending on use-case), and the places in which it will otherwise search.\n\n### Recommended Locations\n\nFor a configuration **specific to a project**, the recommended location is in the **project root** as `.rtkrc.js`, alongside `package.json` and your other dotfiles. Keep the configuration under version control.\n\nFor a configuration **at the system level**, the recommended location is the user's **home directory** in `$HOME/.rtkrc.js`. The \"user\", in this case, is the user executing <Metadata prop=\"executable\"/>; this is _not_ the owner of the process which generated the Diagnostic Report file!\n\n### Configuration Search Paths\n\nIn addition to the [recommended locations](#recommended-locations), <Metadata prop=\"packageName\"/> will search for a configuration file named `.rtkrc.js` (preferred) or `rtk.config.js` in the following order, choosing the first found:\n\n1. The current working directory\n1. The parent of the current working directory, and the grandparent, all the way up to the user's `$HOME` directory _or_ the filesystem root (whichever comes first)\n1. The user's `$HOME` directory, if it is not an ancestor of the current working directory\n1. The subdirectory `etc/` of the result of `npm config prefix get` (e.g., `/usr/local/etc` or `$HOME/.nvm/versions/node/(version)/etc`)\n1. (If on a POSIX OS) `$XDG_CONFIG_HOME` and `$XDG_CONFIG_DIRS`\n1. (If on a POSIX OS) `/etc`\n\nRemember, if none of the above work for your use-case, you can always [specify an explicit filepath](/cli#-rc-lesspathto.rtkrc.jsgreater).\n\n## Configuration File Format\n\nMany tools allow configuration in different file formats, including JSON, YAML, and JavaScript. <Metadata prop=\"packageName\"/> is not such a tool.\n\n**<Metadata prop=\"packageName\"/> configuration files are JavaScript only.**\n\n<InlineNotification kind=\"warning\">\n\nAs of v0.5.1, EcmaScript modules are _not_ supported for configuration files.\n\n</InlineNotification>\n\nThere are benefits and drawbacks to this approach, of course, but choosing JavaScript means more power for the user, and easier parsing for <Metadata prop=\"packageName\"/>.\n\nAs for the _content_ of the configuration file, it must:\n\n- Be written in JavaScript.\n- Export an non-empty `Array` property named `config`.\n\nWith that understood, let's look at some examples.\n\n## Configuration By Example\n\nWe'll start by looking at a minimal configuration example, then exploring the builtin \"recommended\" configuration, and finally learn how to customize it.\n\n### Minimal Configuration Example\n\nThe simplest configuration file is perhaps the following:\n\n```js\nexports.config = ['rtk:recommended'];\n```\n\nThis loads the built-in \"recommended\" configuration _by its alias_, `rtk:recommended`. `rtk:recommended` _also_ happens to be the default configuration (if no config file is present), so the above is rather pointless.\n\nThe above can be expressed in an awkward, verbose way (which is what the alias is for):\n\n```js\n// don't do this!\nexports.config = [require('@report-toolkit/common/src/configs/recommended')];\n```\n\n<InlineNotification kind=\"info\">\n\nAs of v0.5.1, `rtk:recommended` is the _only_ alias. Aliases are reserved for built-in configurations; they won't work for any other \"named\" configuration.\n\n</InlineNotification>\n\nFor an less-trivial example, let's take a closer look at this `rtk:recommended` config.\n\n### Basic Configuration Example\n\nThis is the contents of the `rtk:recommended` config, which can serve as a basic\nexample:\n\n```js file=./recommended.js.txt\n```\n\nThe above configuration file has two exports; `config` and `alias`. The latter, `alias`, is reserved for built-in configurations--this is where the `rtk:recommended` name comes from; it can be safely ignored.\n\nThe `config` export is always an array. In the case above, the array has a single object with a `rules` property. This property configures the Rules which the [inspect command](/cli/#the-inspect-command) uses. The _keys_ are Rule names, and the _values_ are the corresponding Rule-specific configuration for each Rule.\n\nWhile each Rule has its own set of options, we can use `true` to _enable the Rule and its default behavior_. Conversely, `false` will disable the Rule altogether.\n\nIn the `rtk:recommended` config, all four (4) the built-in rules are enabled with their defaults.\n\n<InlineNotification kind=\"warning\">\n\nNote that **if a configuration file is detected, all rules are disabled by default**. This means that a config file must enable each. The most straightforward way to do this is to just use the `rtk:recommended` config.\n\n</InlineNotification>\n\nNext, we'll learn how to build on top of the \"recommended\" config with our own configuration.\n\n### Customizing the \"Recommended\" Configuration\n\nWe're going to customize the \"recommended\" configuration. Create an empty config file and call it `.rtkrc.js`--and place it in your current working directory (or project root, or even your user's `$HOME` directory; for our purposes, this doesn't matter, as long as `rtk` can find it):\n\nOpen `.rtkrc.js` in your favorite editor. Copy and paste this into it:\n\n```js\nexports.config = ['rtk.recommended'];\n```\n\nIt is no accident that the `config` property is an `Array`. **Each item in the `config` export is _deeply merged_ into the item before it.** Kind of like the parameters to [`Object.assign()`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)--but a \"deep\" instead of \"shallow\" copy. In practical terms, we can override any given property within the `rtk.recommended` config by appending a _configuration object_ to the `config` export.\n\nLet's take advantage of the deep merging, and configure the `cpu-usage` rule (which emits a message if the total CPU usage across all cores is not within a defined range) to increase its threshold from the default, 50%, to 75%.\n\nChange your `.rtkrc.js` to the following:\n\n```js\nexports.config = [\n  'rtk.recommended',\n  {\n    rules: {\n      'cpu-usage': {\n        enabled: true,\n        max: 75\n      }\n    }\n  }\n];\n```\n\nInternally, the merge of our configuration object (the second item in `exports.config`) into the `rtk:recommended` config results in a final object that looks somewhat like this:\n\n```js\n// This is just for purposes of illustration, and is not a configuration file!\nlet config = {\n  rules: {\n    'cpu-usage': {\n      enabled: true,\n      max: 75\n    },\n    'library-mismatch': true,\n    'long-timeout': true,\n    'memory-usage': true\n  }\n};\n```\n\nNow, when you run `rtk inspect <report-file>`, the `cpu-usage` rule won't emit a Message unless the total CPU usage in the report is at or above 75%.\n\n### Using a Shared Configuration\n\nA _shared_ configuration is essentially _some other config file_. The \"recommended\" config is a shared configuration. Recall that, instead of using the `rtk:recommended` alias, we could `require()` it instead. The previous example config could be rewritten as:\n\n```js\nexports.config = [\n  require('@report-toolkit/common/src/configs/recommended'),\n  {\n    rules: {\n      'cpu-usage': {\n        enabled: true,\n        max: 75\n      }\n    }\n  }\n];\n```\n\nOf course, that's tedious; hence the `rtk:recommended` alias. But the idea is still applicable: **you can include any other config file via `require()`.** Perhaps you have a custom config that you wish to share with your team. For example, you could create a package called `report-toolkit-config-pork-chop-sandwich` and publish it to npm. This package would contain an `index.js`, which would just be a regular `report-toolkit` config file (containing a `config` export). You can then install it into your project, and use it like so:\n\n```js\nexports.config = [\n  'rtk:recommended',\n  require('report-toolkit-config-pork-chop-sandwich'),\n  {\n    rules: {\n      // customize report-toolkit-pork-chop-sandwich further\n    }\n  }\n];\n```\n\nAll three config objects will be merged together, with priority in ascending order.\n\n<InlineNotification kind=\"info\">\n\nBecause config files are JavaScript, you can easily add logic to them. For example, you may want to change the behavior of a particular rule if a certain environment variable is set by looking at `process.env`. Go wild!\n\n</InlineNotification>\n\nThis covers the basics of using configuration files. The next section is a reference of the allowed configuration properties.\n\n## Configuration Reference\n\n### Exports\n\nA configuration file has a single export: `config`.\n\nThe `config` export be an `Array` of [_config objects_](#config-objects) or `string`s corresponding to builtin aliases.\n\n<InlineNotification kind=\"info\">\n\nAs of v0.5.1, `rtk:recommended` is the _only_ builtin alias.\n\n</InlineNotification>\n\nOrder matters; subsequent items will be deeply merged into previous items, overriding their settings.\n\n### Config Objects\n\nA _config object_ is an object containing zero or more of the following properties:\n\n- [`commands`](#commands-property): An object containing keys corresponding to _Command_ names, and values of Command-specific defaults.\n- [`plugins`](#plugins-property): An array of _Plugins_.\n- [`rules`](#rules-property): An object containing keys corresponding to _Rule_ names, and values of Rule-specific options.\n- [`transformers`](#transformers-property): An object containing keys corresponding to _Transformer_ names, and values of Transformer-specific defaults.\n\nWhen you `require()` another config file, you're requiring a module with a `config` export. This means that the following property is supported, but not used directly:\n\n- `config`: Contains a config object.\n\nThe contents of [`commands`](#commands-property), [`plugins`](#plugins-property), [`rules`](#rules-property), and [`transformers`](#transformers-property) are described below.\n\n#### `commands` Property\n\nA _Command_ is an [`rtk` command](/cli/#available-commands). Use the `commands` property to change the default behavior of one or more Commands.\n\nAllowed keys are the supported command names:\n\n- `diff`\n- `inspect`\n- `redact`\n- `transform`\n\nAllowed properties of each are described below; these correspond to the allowed options for the particular command. In addition, properties corresponding to [global options](/cli/#global-options) are allowed.\n\n<InlineNotification kind=\"info\">\n\nYou can derive the name of any property from the command-line options. For example, the global `--verbose` option is a boolean flag. To make this the default behavior for a given command, use `{verbose: true}`.\n\nYou can use camelCase or dashes, where applicable; e.g., `--max-width=50` could be represented as `{'max-width': 50}` _or_ `{maxWidth: 50}`.\n\n</InlineNotification>\n\n##### `commands.diff` Properties\n\nIf present in a `commands.diff` object, these properties will influence the default behavior of `rtk diff`. Command-line arguments will have precedence over these defaults.\n\nFor more information on these options, please see the [docs for `diff`'s options](/cli/#diff-options).\n\n- **`includeProp`** `{string|string[]}`: One or more properties in \"dot notation\" (e.g., `header.nodeJsVersion`) to include.\n- **`excludeProp`** `{string|string[]}`: One or more properties in \"dot notation\" to (e.g., `header.nodeJsVersion`) exclude.\n- **`all`** `{boolean}`: If `true`, include _all_ properties in a diff.\n\nAlso included are the [common output properties](#common-output-properties).\n\n##### `commands.inspect` Properties\n\nIf present in a `commands.inspect` object, these properties will influence the default behavior of `rtk inspect`. Command-line arguments will have precedence over these defaults.\n\nFor more information on these options, please see the [docs for `inspect`'s options](/cli/#inspect-options).\n\n- **`severity`** `{\"error\"|\"warning\"|\"info\"}`: Minimum severity level of a Message to display. The default is `warning`.\n\nAlso included are the [common output properties](#common-output-properties).\n\n##### `commands.redact` Properties\n\nIf present in a `commands.redact` object, these properties will influence the default behavior of `rtk redact`. Command-line arguments will have precedence over these defaults.\n\nFor more information on these options, please see the [docs for `redact`'s options](/cli/#redact-options).\n\n- **`replace`** `{boolean}`: If `true`, overwrite report file in place.\n- **`pretty`** `{boolean}`: If `false`, do not output pretty-printed JSON. Defaults to `true`.\n\n##### `command.transform` Properties\n\n**Note: these settings apply only to the `transform` command.** To change default transformer behavior across _all_ commands, use the [`transformers` config property].\n\nIf present in a `commands.transform` object, these properties will influence the default behavior of `rtk transform`. Command-line arguments will have precedence over these defaults.\n\n`commands.transform` has no unique properties in addition to [the common output properties](#common-output-properties).\n\n##### Common Output Properties\n\nThese properties can be used within `commands.diff`, `commands.inspect`, and `commands.transform`. They influence the default behavior, and command-line arguments will have precedence over these.\n\n- **`output`** `{string}`: Write output to file instead of `STDOUT`. Be sure this is what you really want!\n- **`show-secrets-unsafe`** `{boolean}`: If `true`, do _not_ redact secrets. Careful!\n- **`transform`** {string}: Use a transformer. Read more about the [allowed transformers](/cli/#-transform-lesstransformergreater-t-lesstransformergreater).\n\nAlso allowed are transformer-specific options, which are equivalent to the [list of those available](/cli/#transformer-specific-options) in the CLI.\n\n#### `transformers` Property\n\nThis property allows default transformer behavior to be set \"globally\". For instance, if you'd like to _not_ pretty-print JSON when using the `json` transformer (with _any_ command), use `transformers` to configure this.\n\nEach key in this property corresponds to a [transformer name](/cli/#-transform-lesstransformergreater-t-lesstransformergreater). The value is an object corresponding to the [transformer-specific options](/cli/#transformer-specific-options) for the transformer.\n\nThe example above can be expressed as:\n\n```js\n{\n  transformers: {\n    json: {\n      pretty: false;\n    }\n  }\n}\n```\n\nCommand-specific transformer configuration has precedence over this \"global\" configuration. For example, you can re-enable `pretty` for `redact`, while remaining disabled for all other commands:\n\n```js\n{\n  transformers: {\n    json: {\n      pretty: false\n    }\n  },\n  commands: {\n    redact: {\n      pretty: true\n    }\n  }\n}\n```\n\n### `rules` Property\n\nThe `rules` property allows configuration of Rule behavior (used with the `inspect` command).\n\nThis property is an object where the keys correspond to a Rule identifier. Each Rule--builtin or custom--has a unique identifier. The builtin Rule identifiers are:\n\n- [`cpu-usage`](#cpu-usage-options): Assert CPU usage % is within a range\n- [`library-mismatch`](#library-mismatch-options): Identify potential shared library version mismatches\n- [`long-timeout`](#long-timeout-options): Warn about far-future callbacks in timeout queue\n- [`memory-usage`](#memory-usage-options): Assert memory usage % is within a range\n\n#### `cpu-usage` Options\n\nThe `cpu-usage` Rule checks if the total CPU usage is within an allowed range. The total CPU usage is calculated _across all cores_. Besides the obvious, it also supports a _minimum_ value, which can surface issues with processes that _should_ be using cycles, but aren't.\n\n`cpu-usage` can check the aggregate of multiple reports.\n\n- `max` `{integer}`: Maximum allowed CPU usage, used as a percentage. Default is `50`.\n- `min` `{integer}`: Minimum allowed CPU usage, used as a percentage. Default is `0`.\n- `mode` `{\"mean\"|\"min\"|\"max\"|\"all\"}`: One of four different modes:\n  - `mean`: Check the mean CPU usage across all reports. Default.\n  - `min`: Check the minimum CPU usage found across all reports.\n  - `max`: Check the maximum CPU usage found across all reports.\n  - `all`: Check _each report individually_ for CPU usage in the allowed range.\n\n#### `library-mismatch` Options\n\nThe `library-mismatch` Rule checks the shared libraries in use vs. what libraries Node.js was compiled with. A version mismatch can cause unexpected behavior.\n\n`library-mismatch` checks a single report at a time.\n\n- `ignore` `{string}[]`: One (1) or more components (as found in the keys of `header.componentVersions`) to ignore; mismatches will not be reported for these libraries.\n\n#### `long-timeout` Options\n\nThe `long-timeout` Rule checks for suspicious callbacks waiting in the event loop. These can cause a program to keep running when it was expected to exit.\n\n`long-timeout` checks a single report at a time.\n\n- `timeout` `{integer|string}`: A number (in milliseconds) or shorthand string representation of time, e.g., `1s`. See [the ms package](https://npm.im/ms) for formatting of strings. An active timeout in the event loop waiting at least this long will cause the Rule to emit. Default timeout is ten (10) seconds.\n\n#### `memory-usage` Options\n\nThe `memory` Rule checks the memory usage is within a range.\n\n`memory-usage` can check the aggregate of multiple reports.\n\n- `max` `{integer}`: Maximum allowed memory usage, used as a percentage. Default is `50`.\n- `min` `{integer}`: Minimum allowed memory usage, used as a percentage. Default is `0`.\n- `mode` `{\"mean\"|\"min\"|\"max\"|\"all\"}`: One of four different modes:\n  - `mean`: Check the mean memory usage across all reports. Default.\n  - `min`: Check the minimum memory usage found across all reports.\n  - `max`: Check the maximum memory usage found across all reports.\n  - `all`: Check _each report individually_ for memory usage in the allowed range.\n\n### `plugins` Property\n\nThis property is a list of third-party plugins. The `@report-toolkit/inspector` \"plugin\" (which provides the builtin Rules) is always loaded. This does not imply all rules are enabled, however!\n\nExample:\n\n```js\n{\n  plugins: ['@bigco/big-report-toolkit-plugin'];\n}\n```\n\nPlugins will be resolved from the current working directory. Try `require.resolve('my-plugin')` or an absolute path if you're having trouble.\n\n_TODO: Document how to write a plugin!_\n","fileAbsolutePath":"/Users/boneskull/projects/boneskull/report-toolkit/packages/docs/src/pages/config/index.mdx"}}}}